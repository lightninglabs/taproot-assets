syntax = "proto3";

import "taro.proto";

package assetwalletrpc;

option go_package = "github.com/lightninglabs/tarorpc/assetwalletrpc";

service AssetWallet {
    /*
    FundVirtualPsbt selects inputs from the available asset commitments to fund
    a virtual transaction matching the template.
    */
    rpc FundVirtualPsbt (FundVirtualPsbtRequest)
        returns (FundVirtualPsbtResponse);

    /*
    SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
    commitments of the inputs and outputs.
    */
    rpc SignVirtualPsbt (SignVirtualPsbtRequest)
        returns (SignVirtualPsbtResponse);

    /*
    AnchorVirtualPsbts merges and then commits multiple virtual transactions in
    a single BTC level anchor transaction.

    TODO(guggero): Actually implement accepting and merging multiple
    transactions.
    */
    rpc AnchorVirtualPsbts (AnchorVirtualPsbtsRequest)
        returns (tarorpc.SendAssetResponse);
}

message FundVirtualPsbtRequest {
    oneof template {
        /*
        Use an existing PSBT packet as the template for the funded PSBT.

        TODO(guggero): Actually implement this. We can't use the "reserved"
        keyword here because we're in a oneof, so we add the field but implement
        it later.
        */
        bytes psbt = 1;

        /*
        Use the asset outputs and optional asset inputs from this raw template.
        */
        TxTemplate raw = 2;
    }
}

message FundVirtualPsbtResponse {
    /*
    The funded but not yet signed PSBT packet.
    */
    bytes funded_psbt = 1;

    /*
    The index of the added change output or -1 if no change was left over.
    */
    int32 change_output_index = 2;
}

message TxTemplate {
    /*
    An optional list of inputs to use. Every input must be an asset UTXO known
    to the wallet. The sum of all inputs must be greater than or equal to the
    sum of all outputs.

    If no inputs are specified, asset coin selection will be performed instead
    and inputs of sufficient value will be added to the resulting PSBT.
    */
    repeated PrevId inputs = 1;

    /*
    A map of all Taro addresses mapped to the anchor transaction's output index
    that should be sent to.
    */
    map<string, uint64> recipients = 2;
}

message PrevId {
    /*
    The bitcoin anchor output on chain that contains the input asset.
    */
    OutPoint outpoint = 1;

    /*
    The asset ID of the previous asset tree.
    */
    bytes id = 2;

    /*
    The tweaked Taproot output key committing to the possible spending
    conditions of the asset.
    */
    bytes script_key = 3;
}

message OutPoint {
    /*
    Raw bytes representing the transaction id.
    */
    bytes txid = 1;

    /*
    The index of the output on the transaction.
    */
    uint32 output_index = 2;
}

message SignVirtualPsbtRequest {
    /*
    The PSBT of the virtual transaction that should be signed. The PSBT must
    contain all required inputs, outputs, UTXO data and custom fields required
    to identify the signing key.
    */
    bytes funded_psbt = 1;
}

message SignVirtualPsbtResponse {
    /*
    The signed virtual transaction in PSBT format.
    */
    bytes signed_psbt = 1;

    /*
    The indices of signed inputs.
    */
    repeated uint32 signed_inputs = 2;
}

message AnchorVirtualPsbtsRequest {
    /*
    The list of virtual transactions that should be merged and committed to in
    the BTC level anchor transaction.
    */
    repeated bytes virtual_psbts = 1;
}
