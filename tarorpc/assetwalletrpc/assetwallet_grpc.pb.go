// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package assetwalletrpc

import (
	context "context"
	tarorpc "github.com/lightninglabs/taro/tarorpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetWalletClient is the client API for AssetWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetWalletClient interface {
	//
	//FundVirtualPsbt selects inputs from the available asset commitments to fund
	//a virtual transaction matching the template.
	FundVirtualPsbt(ctx context.Context, in *FundVirtualPsbtRequest, opts ...grpc.CallOption) (*FundVirtualPsbtResponse, error)
	//
	//SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
	//commitments of the inputs and outputs.
	SignVirtualPsbt(ctx context.Context, in *SignVirtualPsbtRequest, opts ...grpc.CallOption) (*SignVirtualPsbtResponse, error)
	//
	//AnchorVirtualPsbts merges and then commits multiple virtual transactions in
	//a single BTC level anchor transaction.
	//
	//TODO(guggero): Actually implement accepting and merging multiple
	//transactions.
	AnchorVirtualPsbts(ctx context.Context, in *AnchorVirtualPsbtsRequest, opts ...grpc.CallOption) (*tarorpc.SendAssetResponse, error)
}

type assetWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetWalletClient(cc grpc.ClientConnInterface) AssetWalletClient {
	return &assetWalletClient{cc}
}

func (c *assetWalletClient) FundVirtualPsbt(ctx context.Context, in *FundVirtualPsbtRequest, opts ...grpc.CallOption) (*FundVirtualPsbtResponse, error) {
	out := new(FundVirtualPsbtResponse)
	err := c.cc.Invoke(ctx, "/assetwalletrpc.AssetWallet/FundVirtualPsbt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) SignVirtualPsbt(ctx context.Context, in *SignVirtualPsbtRequest, opts ...grpc.CallOption) (*SignVirtualPsbtResponse, error) {
	out := new(SignVirtualPsbtResponse)
	err := c.cc.Invoke(ctx, "/assetwalletrpc.AssetWallet/SignVirtualPsbt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) AnchorVirtualPsbts(ctx context.Context, in *AnchorVirtualPsbtsRequest, opts ...grpc.CallOption) (*tarorpc.SendAssetResponse, error) {
	out := new(tarorpc.SendAssetResponse)
	err := c.cc.Invoke(ctx, "/assetwalletrpc.AssetWallet/AnchorVirtualPsbts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetWalletServer is the server API for AssetWallet service.
// All implementations must embed UnimplementedAssetWalletServer
// for forward compatibility
type AssetWalletServer interface {
	//
	//FundVirtualPsbt selects inputs from the available asset commitments to fund
	//a virtual transaction matching the template.
	FundVirtualPsbt(context.Context, *FundVirtualPsbtRequest) (*FundVirtualPsbtResponse, error)
	//
	//SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
	//commitments of the inputs and outputs.
	SignVirtualPsbt(context.Context, *SignVirtualPsbtRequest) (*SignVirtualPsbtResponse, error)
	//
	//AnchorVirtualPsbts merges and then commits multiple virtual transactions in
	//a single BTC level anchor transaction.
	//
	//TODO(guggero): Actually implement accepting and merging multiple
	//transactions.
	AnchorVirtualPsbts(context.Context, *AnchorVirtualPsbtsRequest) (*tarorpc.SendAssetResponse, error)
	mustEmbedUnimplementedAssetWalletServer()
}

// UnimplementedAssetWalletServer must be embedded to have forward compatible implementations.
type UnimplementedAssetWalletServer struct {
}

func (UnimplementedAssetWalletServer) FundVirtualPsbt(context.Context, *FundVirtualPsbtRequest) (*FundVirtualPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundVirtualPsbt not implemented")
}
func (UnimplementedAssetWalletServer) SignVirtualPsbt(context.Context, *SignVirtualPsbtRequest) (*SignVirtualPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignVirtualPsbt not implemented")
}
func (UnimplementedAssetWalletServer) AnchorVirtualPsbts(context.Context, *AnchorVirtualPsbtsRequest) (*tarorpc.SendAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorVirtualPsbts not implemented")
}
func (UnimplementedAssetWalletServer) mustEmbedUnimplementedAssetWalletServer() {}

// UnsafeAssetWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetWalletServer will
// result in compilation errors.
type UnsafeAssetWalletServer interface {
	mustEmbedUnimplementedAssetWalletServer()
}

func RegisterAssetWalletServer(s grpc.ServiceRegistrar, srv AssetWalletServer) {
	s.RegisterService(&AssetWallet_ServiceDesc, srv)
}

func _AssetWallet_FundVirtualPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundVirtualPsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).FundVirtualPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetwalletrpc.AssetWallet/FundVirtualPsbt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).FundVirtualPsbt(ctx, req.(*FundVirtualPsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_SignVirtualPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignVirtualPsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).SignVirtualPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetwalletrpc.AssetWallet/SignVirtualPsbt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).SignVirtualPsbt(ctx, req.(*SignVirtualPsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_AnchorVirtualPsbts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorVirtualPsbtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).AnchorVirtualPsbts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetwalletrpc.AssetWallet/AnchorVirtualPsbts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).AnchorVirtualPsbts(ctx, req.(*AnchorVirtualPsbtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetWallet_ServiceDesc is the grpc.ServiceDesc for AssetWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assetwalletrpc.AssetWallet",
	HandlerType: (*AssetWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundVirtualPsbt",
			Handler:    _AssetWallet_FundVirtualPsbt_Handler,
		},
		{
			MethodName: "SignVirtualPsbt",
			Handler:    _AssetWallet_SignVirtualPsbt_Handler,
		},
		{
			MethodName: "AnchorVirtualPsbts",
			Handler:    _AssetWallet_AnchorVirtualPsbts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assetwalletrpc/assetwallet.proto",
}
