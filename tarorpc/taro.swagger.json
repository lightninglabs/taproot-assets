{
  "swagger": "2.0",
  "info": {
    "title": "taro.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Taro"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taro/addrs": {
      "get": {
        "summary": "tarocli: `addrs query`\nQueryTaroAddrs queries the set of Taro addresses stored in the database.",
        "operationId": "Taro_QueryAddrs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcQueryAddrResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "created_after",
            "description": "If set, then only addresses created after this Unix timestamp will be\nreturned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_before",
            "description": "If set, then only addresses created before this Unix timestamp will be\nreturned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "The max number of addresses that should be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "The offset from the addresses that should be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Taro"
        ]
      },
      "post": {
        "summary": "tarocli: `addrs new`\nNewAddr makes a new address from the set of request params.",
        "operationId": "Taro_NewAddr",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcAddr"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcNewAddrRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/addrs/decode": {
      "post": {
        "summary": "tarocli: `addrs decode`\nDecodeAddr decode a Taro address into a partial asset message that\nrepresents the asset it wants to receive.",
        "operationId": "Taro_DecodeAddr",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcAddr"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcDecodeAddrRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/addrs/receives": {
      "post": {
        "summary": "tarocli: `addrs receives`\nList all receives for incoming asset transfers for addresses that were\ncreated previously.",
        "operationId": "Taro_AddrReceives",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcAddrReceivesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcAddrReceivesRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/assets": {
      "get": {
        "summary": "tarocli: `assets list`\nListAssets lists the set of assets owned by the target daemon.",
        "operationId": "Taro_ListAssets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcListAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "with_witness",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Taro"
        ]
      },
      "post": {
        "summary": "tarocli: `assets mint`\nMintAsset will attempts to mint the set of assets (async by default to\nensure proper batching) specified in the request.",
        "operationId": "Taro_MintAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcMintAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcMintAssetRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/assets/balance": {
      "get": {
        "summary": "tarocli: `assets balance`\nListBalances lists asset balances",
        "operationId": "Taro_ListBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcListBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "asset_id",
            "description": "Group results by asset IDs.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "group_key",
            "description": "Group results by group keys.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "asset_filter",
            "description": "If the query results should grouped by asset ids, then an optional asset\nfilter may be provided to query balance of a specific asset.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "group_key_filter",
            "description": "If the query results should be grouped by group keys, then an optional\ngroup key filter may be provided to query the balance of a specific\nasset group.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/assets/groups": {
      "get": {
        "summary": "tarocli: `assets groups`\nListGroups lists the asset groups known to the target daemon, and the assets\nheld in each group.",
        "operationId": "Taro_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcListGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/assets/transfers": {
      "get": {
        "summary": "tarocli: `assets transfers`\nListTransfers lists outbound asset transfers tracked by the target daemon.",
        "operationId": "Taro_ListTransfers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcListTransfersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/assets/utxos": {
      "get": {
        "summary": "tarocli: `assets utxos`\nListUtxos lists the UTXOs managed by the target daemon, and the assets they\nhold.",
        "operationId": "Taro_ListUtxos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcListUtxosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/debuglevel": {
      "post": {
        "summary": "tarocli: `debuglevel`\nDebugLevel allows a caller to programmatically set the logging verbosity of\ntarod. The logging can be targeted according to a coarse daemon-wide logging\nlevel, or in a granular fashion to specify the logging for a target\nsub-system.",
        "operationId": "Taro_DebugLevel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcDebugLevelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcDebugLevelRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/proofs/export": {
      "post": {
        "summary": "tarocli: `proofs export`\nExportProof exports the latest raw proof file anchored at the specified\nscript_key.",
        "operationId": "Taro_ExportProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcProofFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcExportProofRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/proofs/import": {
      "post": {
        "summary": "tarocli: `proofs import`\nImportProof attempts to import a proof file into the daemon. If successful,\na new asset will be inserted on disk, spendable using the specified target\nscript key, and internal key.",
        "operationId": "Taro_ImportProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcImportProofResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcImportProofRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/proofs/verify": {
      "post": {
        "summary": "tarocli: `proofs verify`\nVerifyProof attempts to verify a given proof file that claims to be anchored\nat the specified genesis point.",
        "operationId": "Taro_VerifyProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcProofVerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcProofFile"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/send": {
      "post": {
        "summary": "tarocli: `assets send`\nSendAsset uses a passed taro address to attempt to complete an asset send.\nThe method returns information w.r.t the on chain send, as well as the\nproof file information the receiver needs to fully receive the asset.",
        "operationId": "Taro_SendAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcSendAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcSendAssetRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/send/ntfs": {
      "post": {
        "summary": "SubscribeSendAssetEventNtfns registers a subscription to the event\nnotification stream which relates to the asset sending process.",
        "operationId": "Taro_SubscribeSendAssetEventNtfns",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/tarorpcSendAssetEvent"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of tarorpcSendAssetEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcSubscribeSendAssetEventNtfnsRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    },
    "/v1/taro/stop": {
      "post": {
        "summary": "tarocli: `stop`\nStopDaemon will send a shutdown request to the interrupt handler, triggering\na graceful shutdown of the daemon.",
        "operationId": "Taro_StopDaemon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tarorpcStopResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tarorpcStopRequest"
            }
          }
        ],
        "tags": [
          "Taro"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "tarorpcAddr": {
      "type": "object",
      "properties": {
        "encoded": {
          "type": "string",
          "description": "The bech32 encoded Taro address."
        },
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The asset ID that uniquely identifies the asset."
        },
        "asset_type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of the asset stored in this Taro UTXO."
        },
        "group_key": {
          "type": "string",
          "format": "byte",
          "title": "The group key of the asset (if it exists)"
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The specific script key the asset must commit to in order to transfer\nownership to the creator of the address."
        },
        "internal_key": {
          "type": "string",
          "format": "byte",
          "description": "The internal key used for the on-chain output."
        },
        "taproot_output_key": {
          "type": "string",
          "format": "byte",
          "description": "The tweaked internal key that commits to the asset and represents the\non-chain output key the Bitcoin transaction must send to in order to\ntransfer assets described in this address."
        }
      }
    },
    "tarorpcAddrEvent": {
      "type": "object",
      "properties": {
        "creation_time_unix_seconds": {
          "type": "string",
          "format": "uint64",
          "description": "The time the event was created in unix timestamp seconds."
        },
        "addr": {
          "$ref": "#/definitions/tarorpcAddr",
          "description": "The address the event was created for."
        },
        "status": {
          "$ref": "#/definitions/tarorpcAddrEventStatus",
          "description": "The current status of the event."
        },
        "outpoint": {
          "type": "string",
          "description": "The outpoint that contains the inbound asset transfer."
        },
        "utxo_amt_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis that were transferred on chain along with the asset.\nThis amount is independent of the requested asset amount, which can be\nlooked up on the address."
        },
        "taproot_sibling": {
          "type": "string",
          "format": "byte",
          "description": "The taproot sibling hash that was used to send to the Taproot output.\nNOTE: Not yet implemented."
        },
        "confirmation_height": {
          "type": "integer",
          "format": "int64",
          "description": "The height at which the on-chain output was confirmed. If this is zero, it\nmeans the output is unconfirmed."
        },
        "has_proof": {
          "type": "boolean",
          "description": "Indicates whether a proof file can be found for the address' asset ID and\nscript key."
        }
      }
    },
    "tarorpcAddrEventStatus": {
      "type": "string",
      "enum": [
        "ADDR_EVENT_STATUS_UNKNOWN",
        "ADDR_EVENT_STATUS_TRANSACTION_DETECTED",
        "ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED",
        "ADDR_EVENT_STATUS_PROOF_RECEIVED",
        "ADDR_EVENT_STATUS_COMPLETED"
      ],
      "default": "ADDR_EVENT_STATUS_UNKNOWN"
    },
    "tarorpcAddrReceivesRequest": {
      "type": "object",
      "properties": {
        "filter_addr": {
          "type": "string",
          "description": "Filter receives by a specific address. Leave empty to get all receives."
        },
        "filter_status": {
          "$ref": "#/definitions/tarorpcAddrEventStatus",
          "description": "Filter receives by a specific status. Leave empty to get all receives."
        }
      }
    },
    "tarorpcAddrReceivesResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAddrEvent"
          },
          "description": "The events that match the filter criteria."
        }
      }
    },
    "tarorpcAnchorInfo": {
      "type": "object",
      "properties": {
        "anchor_tx": {
          "type": "string",
          "format": "byte",
          "description": "The transaction that anchors the Taro commitment where the asset resides."
        },
        "anchor_txid": {
          "type": "string",
          "description": "The txid of the above transaction."
        },
        "anchor_block_hash": {
          "type": "string",
          "format": "byte",
          "description": "The block hash the contains the anchor transaction above."
        },
        "anchor_outpoint": {
          "type": "string",
          "description": "The outpoint (txid:vout) that stores the Taro commitment."
        },
        "internal_key": {
          "type": "string",
          "format": "byte",
          "description": "The raw internal key that was used to create the anchor Taproot output key."
        }
      }
    },
    "tarorpcAsset": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the Taro asset."
        },
        "asset_genesis": {
          "$ref": "#/definitions/tarorpcGenesisInfo",
          "description": "The base genesis information of an asset. This information never changes."
        },
        "asset_type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of the asset stored in this Taro UTXO."
        },
        "lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "An optional locktime, as with Bitcoin transactions."
        },
        "relative_lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "An optional relative lock time, same as Bitcoin transactions."
        },
        "script_version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the script, only version 0 is defined at present."
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The script key of the asset, which can be spent under Taproot semantics."
        },
        "asset_group": {
          "$ref": "#/definitions/tarorpcAssetGroup",
          "description": "The information related to the key group of an asset (if it exists)."
        },
        "chain_anchor": {
          "$ref": "#/definitions/tarorpcAnchorInfo",
          "description": "Describes where in the chain the asset is currently anchored."
        },
        "prev_witnesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcPrevWitness"
          }
        }
      }
    },
    "tarorpcAssetBalance": {
      "type": "object",
      "properties": {
        "asset_genesis": {
          "$ref": "#/definitions/tarorpcGenesisInfo",
          "description": "The base genesis information of an asset. This information never changes."
        },
        "asset_type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset."
        },
        "balance": {
          "type": "string",
          "format": "int64",
          "description": "The balance of the asset owned by the target daemon."
        }
      }
    },
    "tarorpcAssetGroup": {
      "type": "object",
      "properties": {
        "raw_group_key": {
          "type": "string",
          "format": "byte",
          "description": "The raw group key which is a normal public key."
        },
        "tweaked_group_key": {
          "type": "string",
          "format": "byte",
          "description": "The tweaked group key, which is derived based on the genesis point and also\nasset type."
        },
        "asset_id_sig": {
          "type": "string",
          "format": "byte",
          "description": "A signature over the genesis point using the above key."
        }
      }
    },
    "tarorpcAssetGroupBalance": {
      "type": "object",
      "properties": {
        "group_key": {
          "type": "string",
          "format": "byte",
          "description": "The group key or nil aggregating assets that don't have a group."
        },
        "balance": {
          "type": "string",
          "format": "int64",
          "description": "The total balance of the assets in the group."
        }
      }
    },
    "tarorpcAssetHumanReadable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "byte",
          "description": "The ID of the asset."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of the asset."
        },
        "lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "An optional locktime, as with Bitcoin transactions."
        },
        "relative_lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "An optional relative locktime, as with Bitcoin transactions."
        },
        "tag": {
          "type": "string",
          "description": "The name of the asset."
        },
        "meta_data": {
          "type": "string",
          "format": "byte",
          "description": "The opaque metadata of the asset."
        },
        "type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset."
        }
      }
    },
    "tarorpcAssetOutput": {
      "type": "object",
      "properties": {
        "anchor_point": {
          "type": "string"
        },
        "asset_id": {
          "type": "string",
          "format": "byte"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "new_proof_blob": {
          "type": "string",
          "format": "byte"
        },
        "split_commit_proof": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "tarorpcAssetSpendDelta": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The asset ID that uniquely identifies the asset."
        },
        "old_script_key": {
          "type": "string",
          "format": "byte",
          "description": "The old script key that uniquely identified the spent asset on disk."
        },
        "new_script_key": {
          "type": "string",
          "format": "byte",
          "description": "The new script key. We assume BIP 86 usage when updating the script keys\non disk."
        },
        "new_amt": {
          "type": "string",
          "format": "int64",
          "description": "The new amount for the asset."
        }
      }
    },
    "tarorpcAssetTransfer": {
      "type": "object",
      "properties": {
        "transfer_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "old_anchor_point": {
          "type": "string",
          "description": "The old/current location of the Taro commitment that was spent as an\ninput."
        },
        "new_anchor_point": {
          "type": "string",
          "description": "The new location of the Taro commitment referenced by the old anchor\npoint."
        },
        "taro_root": {
          "type": "string",
          "format": "byte",
          "description": "The new Taro root that commits to the set of modified and unmodified\nassets."
        },
        "anchor_tx_hash": {
          "type": "string",
          "format": "byte",
          "description": "The new transaction that commits to the set of Taro assets found at the\nabove new anchor point."
        },
        "asset_spend_deltas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAssetSpendDelta"
          },
          "description": "Describes the set of mutated assets that now live at the new anchor tx\npoint."
        }
      }
    },
    "tarorpcAssetType": {
      "type": "string",
      "enum": [
        "NORMAL",
        "COLLECTIBLE"
      ],
      "default": "NORMAL",
      "description": " - NORMAL: Indicates that an asset is capable of being split/merged, with each of the\nunits being fungible, even across a key asset ID boundary (assuming the\nkey group is the same).\n - COLLECTIBLE: Indicates that an asset is a collectible, meaning that each of the other\nitems under the same key group are not fully fungible with each other.\nCollectibles also cannot be split or merged."
    },
    "tarorpcDebugLevelRequest": {
      "type": "object",
      "properties": {
        "show": {
          "type": "boolean",
          "description": "If true, all the valid debug sub-systems will be returned."
        },
        "level_spec": {
          "type": "string"
        }
      }
    },
    "tarorpcDebugLevelResponse": {
      "type": "object",
      "properties": {
        "sub_systems": {
          "type": "string"
        }
      }
    },
    "tarorpcDecodeAddrRequest": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string"
        }
      }
    },
    "tarorpcExecuteSendStateEvent": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Execute timestamp."
        },
        "send_state": {
          "type": "string",
          "description": "The send state that is about to be executed."
        }
      }
    },
    "tarorpcExportProofRequest": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string",
          "format": "byte"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "tarorpcGenesisInfo": {
      "type": "object",
      "properties": {
        "genesis_point": {
          "type": "string",
          "description": "The first outpoint of the transaction that created the asset (txid:vout)."
        },
        "name": {
          "type": "string",
          "description": "The name of the asset."
        },
        "meta": {
          "type": "string",
          "format": "byte",
          "description": "The opaque meta data of the asset."
        },
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The asset ID that uniquely identifies the asset."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output that carries the unique Taro commitment in the\ngenesis transaction."
        },
        "genesis_bootstrap_info": {
          "type": "string",
          "format": "byte",
          "description": "The full genesis information encoded in a portable manner so it can be\neasily copy/pasted for address creation."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the Taro commitment that created this asset."
        }
      }
    },
    "tarorpcGroupedAssets": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAssetHumanReadable"
          },
          "description": "A list of assets with the same group key."
        }
      }
    },
    "tarorpcImportProofRequest": {
      "type": "object",
      "properties": {
        "proof_file": {
          "type": "string",
          "format": "byte"
        },
        "genesis_point": {
          "type": "string"
        }
      }
    },
    "tarorpcImportProofResponse": {
      "type": "object"
    },
    "tarorpcListAssetResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAsset"
          }
        }
      }
    },
    "tarorpcListBalancesResponse": {
      "type": "object",
      "properties": {
        "asset_balances": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tarorpcAssetBalance"
          }
        },
        "asset_group_balances": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tarorpcAssetGroupBalance"
          }
        }
      }
    },
    "tarorpcListGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tarorpcGroupedAssets"
          },
          "description": "The set of assets with a group key."
        }
      }
    },
    "tarorpcListTransfersResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAssetTransfer"
          },
          "description": "The unordered list of outgoing asset transfers."
        }
      }
    },
    "tarorpcListUtxosResponse": {
      "type": "object",
      "properties": {
        "managed_utxos": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tarorpcManagedUtxo"
          },
          "description": "The set of UTXOs managed by the daemon."
        }
      }
    },
    "tarorpcManagedUtxo": {
      "type": "object",
      "properties": {
        "out_point": {
          "type": "string",
          "description": "The outpoint of the UTXO."
        },
        "amt_sat": {
          "type": "string",
          "format": "int64",
          "description": "The UTXO amount in satoshis."
        },
        "internal_key": {
          "type": "string",
          "format": "byte",
          "description": "The internal key used for the on-chain output."
        },
        "taro_root": {
          "type": "string",
          "format": "byte",
          "description": "The Taro root that commits to the set of assets at this UTXO."
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAsset"
          },
          "description": "The assets held at this UTXO."
        }
      }
    },
    "tarorpcMintAssetRequest": {
      "type": "object",
      "properties": {
        "asset_type": {
          "$ref": "#/definitions/tarorpcAssetType",
          "description": "The type of the asset to be created."
        },
        "name": {
          "type": "string",
          "description": "The name, or \"tag\" of the asset. This will affect the final asset ID."
        },
        "meta_data": {
          "type": "string",
          "format": "byte",
          "description": "An opaque blob that resents metadata related to the asset. This will affect\nthe final asset ID."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of units of the new asset that should be created. If the\nAssetType is Collectible, then this field cannot be set."
        },
        "enable_emission": {
          "type": "boolean",
          "description": "If true, then the asset will be created with a key group, which allows for\nfuture asset issuance."
        },
        "skip_batch": {
          "type": "boolean",
          "description": "If true, then a batch will be created immediately. Otherwise the asset\ncreation transaction may be batched with other pending minting requests."
        }
      }
    },
    "tarorpcMintAssetResponse": {
      "type": "object",
      "properties": {
        "batch_key": {
          "type": "string",
          "format": "byte",
          "description": "A public key serialized in compressed format that can be used to uniquely\nidentify a pending minting batch. Responses that share the same key will be\nbatched into the same minting transaction."
        }
      }
    },
    "tarorpcNewAddrRequest": {
      "type": "object",
      "properties": {
        "genesis_bootstrap_info": {
          "type": "string",
          "format": "byte"
        },
        "group_key": {
          "type": "string",
          "format": "byte"
        },
        "amt": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "tarorpcPrevInputAsset": {
      "type": "object",
      "properties": {
        "anchor_point": {
          "type": "string"
        },
        "asset_id": {
          "type": "string",
          "format": "byte"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "tarorpcPrevWitness": {
      "type": "object",
      "properties": {
        "prev_id": {
          "$ref": "#/definitions/tarorpcPrevInputAsset"
        },
        "tx_witness": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "split_commitment": {
          "$ref": "#/definitions/tarorpcSplitCommitment"
        }
      }
    },
    "tarorpcProofFile": {
      "type": "object",
      "properties": {
        "raw_proof": {
          "type": "string",
          "format": "byte"
        },
        "genesis_point": {
          "type": "string"
        }
      }
    },
    "tarorpcProofVerifyResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "tarorpcQueryAddrResponse": {
      "type": "object",
      "properties": {
        "addrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAddr"
          }
        }
      }
    },
    "tarorpcSendAssetEvent": {
      "type": "object",
      "properties": {
        "execute_send_state_event": {
          "$ref": "#/definitions/tarorpcExecuteSendStateEvent",
          "description": "An event which indicates that a send state is about to be executed."
        }
      }
    },
    "tarorpcSendAssetRequest": {
      "type": "object",
      "properties": {
        "taro_addr": {
          "type": "string"
        }
      }
    },
    "tarorpcSendAssetResponse": {
      "type": "object",
      "properties": {
        "transfer_txid": {
          "type": "string"
        },
        "anchor_output_index": {
          "type": "integer",
          "format": "int32"
        },
        "transfer_tx_bytes": {
          "type": "string",
          "format": "byte"
        },
        "taro_transfer": {
          "$ref": "#/definitions/tarorpcTaroTransfer"
        },
        "total_fee_sats": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "tarorpcSplitCommitment": {
      "type": "object",
      "properties": {
        "root_asset": {
          "$ref": "#/definitions/tarorpcAsset"
        }
      }
    },
    "tarorpcStopRequest": {
      "type": "object"
    },
    "tarorpcStopResponse": {
      "type": "object"
    },
    "tarorpcSubscribeSendAssetEventNtfnsRequest": {
      "type": "object"
    },
    "tarorpcTaroTransfer": {
      "type": "object",
      "properties": {
        "old_taro_root": {
          "type": "string",
          "format": "byte"
        },
        "new_taro_root": {
          "type": "string",
          "format": "byte"
        },
        "prev_inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcPrevInputAsset"
          }
        },
        "new_outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tarorpcAssetOutput"
          }
        }
      }
    }
  }
}
