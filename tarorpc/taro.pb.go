// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: taro.proto

package tarorpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	//
	//Indicates that an asset is capable of being split/merged, with each of the
	//units being fungible, even across a key asset ID boundary (assuming the
	//key group is the same).
	AssetType_NORMAL AssetType = 0
	//
	//Indicates that an asset is a collectible, meaning that each of the other
	//items under the same key group are not fully fungible with each other.
	//Collectibles also cannot be split or merged.
	AssetType_COLLECTIBLE AssetType = 1
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "NORMAL",
		1: "COLLECTIBLE",
	}
	AssetType_value = map[string]int32{
		"NORMAL":      0,
		"COLLECTIBLE": 1,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_taro_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_taro_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{0}
}

type AddrEventStatus int32

const (
	AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN               AddrEventStatus = 0
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_DETECTED  AddrEventStatus = 1
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED AddrEventStatus = 2
	AddrEventStatus_ADDR_EVENT_STATUS_PROOF_RECEIVED        AddrEventStatus = 3
	AddrEventStatus_ADDR_EVENT_STATUS_COMPLETED             AddrEventStatus = 4
)

// Enum value maps for AddrEventStatus.
var (
	AddrEventStatus_name = map[int32]string{
		0: "ADDR_EVENT_STATUS_UNKNOWN",
		1: "ADDR_EVENT_STATUS_TRANSACTION_DETECTED",
		2: "ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED",
		3: "ADDR_EVENT_STATUS_PROOF_RECEIVED",
		4: "ADDR_EVENT_STATUS_COMPLETED",
	}
	AddrEventStatus_value = map[string]int32{
		"ADDR_EVENT_STATUS_UNKNOWN":               0,
		"ADDR_EVENT_STATUS_TRANSACTION_DETECTED":  1,
		"ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED": 2,
		"ADDR_EVENT_STATUS_PROOF_RECEIVED":        3,
		"ADDR_EVENT_STATUS_COMPLETED":             4,
	}
)

func (x AddrEventStatus) Enum() *AddrEventStatus {
	p := new(AddrEventStatus)
	*p = x
	return p
}

func (x AddrEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddrEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_taro_proto_enumTypes[1].Descriptor()
}

func (AddrEventStatus) Type() protoreflect.EnumType {
	return &file_taro_proto_enumTypes[1]
}

func (x AddrEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddrEventStatus.Descriptor instead.
func (AddrEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{1}
}

type MintAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the asset to be created.
	AssetType AssetType `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3,enum=tarorpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	//An opaque blob that resents metadata related to the asset. This will affect
	//the final asset ID.
	MetaData []byte `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	//
	//The total amount of units of the new asset that should be created. If the
	//AssetType is Collectible, then this field cannot be set.
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//
	//If true, then the asset will be created with a key group, which allows for
	//future asset issuance.
	EnableEmission bool `protobuf:"varint,5,opt,name=enable_emission,json=enableEmission,proto3" json:"enable_emission,omitempty"`
	//
	//If true, then a batch will be created immediately. Otherwise the asset
	//creation transaction may be batched with other pending minting requests.
	SkipBatch bool `protobuf:"varint,6,opt,name=skip_batch,json=skipBatch,proto3" json:"skip_batch,omitempty"`
}

func (x *MintAssetRequest) Reset() {
	*x = MintAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetRequest) ProtoMessage() {}

func (x *MintAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetRequest.ProtoReflect.Descriptor instead.
func (*MintAssetRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{0}
}

func (x *MintAssetRequest) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *MintAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MintAssetRequest) GetMetaData() []byte {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *MintAssetRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintAssetRequest) GetEnableEmission() bool {
	if x != nil {
		return x.EnableEmission
	}
	return false
}

func (x *MintAssetRequest) GetSkipBatch() bool {
	if x != nil {
		return x.SkipBatch
	}
	return false
}

type MintAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A public key serialized in compressed format that can be used to uniquely
	//identify a pending minting batch. Responses that share the same key will be
	//batched into the same minting transaction.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
}

func (x *MintAssetResponse) Reset() {
	*x = MintAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetResponse) ProtoMessage() {}

func (x *MintAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetResponse.ProtoReflect.Descriptor instead.
func (*MintAssetResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{1}
}

func (x *MintAssetResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type ListAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithWitness bool `protobuf:"varint,1,opt,name=with_witness,json=withWitness,proto3" json:"with_witness,omitempty"`
}

func (x *ListAssetRequest) Reset() {
	*x = ListAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRequest) ProtoMessage() {}

func (x *ListAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRequest.ProtoReflect.Descriptor instead.
func (*ListAssetRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{2}
}

func (x *ListAssetRequest) GetWithWitness() bool {
	if x != nil {
		return x.WithWitness
	}
	return false
}

type AnchorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction that anchors the Taro commitment where the asset resides.
	AnchorTx []byte `protobuf:"bytes,1,opt,name=anchor_tx,json=anchorTx,proto3" json:"anchor_tx,omitempty"`
	// The txid of the above transaction.
	AnchorTxid string `protobuf:"bytes,2,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	// The block hash the contains the anchor transaction above.
	AnchorBlockHash []byte `protobuf:"bytes,3,opt,name=anchor_block_hash,json=anchorBlockHash,proto3" json:"anchor_block_hash,omitempty"`
	// The outpoint (txid:vout) that stores the Taro commitment.
	AnchorOutpoint string `protobuf:"bytes,4,opt,name=anchor_outpoint,json=anchorOutpoint,proto3" json:"anchor_outpoint,omitempty"`
	//
	//The raw internal key that was used to create the anchor Taproot output key.
	InternalKey []byte `protobuf:"bytes,5,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
}

func (x *AnchorInfo) Reset() {
	*x = AnchorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfo) ProtoMessage() {}

func (x *AnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfo.ProtoReflect.Descriptor instead.
func (*AnchorInfo) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{3}
}

func (x *AnchorInfo) GetAnchorTx() []byte {
	if x != nil {
		return x.AnchorTx
	}
	return nil
}

func (x *AnchorInfo) GetAnchorTxid() string {
	if x != nil {
		return x.AnchorTxid
	}
	return ""
}

func (x *AnchorInfo) GetAnchorBlockHash() []byte {
	if x != nil {
		return x.AnchorBlockHash
	}
	return nil
}

func (x *AnchorInfo) GetAnchorOutpoint() string {
	if x != nil {
		return x.AnchorOutpoint
	}
	return ""
}

func (x *AnchorInfo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

type GenesisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first outpoint of the transaction that created the asset (txid:vout).
	GenesisPoint string `protobuf:"bytes,1,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	// The name of the asset.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The opaque meta data of the asset.
	Meta []byte `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	//
	//The index of the output that carries the unique Taro commitment in the
	//genesis transaction.
	OutputIndex uint32 `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	//
	//The full genesis information encoded in a portable manner so it can be
	//easily copy/pasted for address creation.
	GenesisBootstrapInfo []byte `protobuf:"bytes,6,opt,name=genesis_bootstrap_info,json=genesisBootstrapInfo,proto3" json:"genesis_bootstrap_info,omitempty"`
	// The version of the Taro commitment that created this asset.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GenesisInfo) Reset() {
	*x = GenesisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisInfo) ProtoMessage() {}

func (x *GenesisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisInfo.ProtoReflect.Descriptor instead.
func (*GenesisInfo) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{4}
}

func (x *GenesisInfo) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

func (x *GenesisInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenesisInfo) GetMeta() []byte {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GenesisInfo) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *GenesisInfo) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *GenesisInfo) GetGenesisBootstrapInfo() []byte {
	if x != nil {
		return x.GenesisBootstrapInfo
	}
	return nil
}

func (x *GenesisInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type AssetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw group key which is a normal public key.
	RawGroupKey []byte `protobuf:"bytes,1,opt,name=raw_group_key,json=rawGroupKey,proto3" json:"raw_group_key,omitempty"`
	//
	//The tweaked group key, which is derived based on the genesis point and also
	//asset type.
	TweakedGroupKey []byte `protobuf:"bytes,2,opt,name=tweaked_group_key,json=tweakedGroupKey,proto3" json:"tweaked_group_key,omitempty"`
	// A signature over the genesis point using the above key.
	AssetIdSig []byte `protobuf:"bytes,3,opt,name=asset_id_sig,json=assetIdSig,proto3" json:"asset_id_sig,omitempty"`
}

func (x *AssetGroup) Reset() {
	*x = AssetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroup) ProtoMessage() {}

func (x *AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroup.ProtoReflect.Descriptor instead.
func (*AssetGroup) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{5}
}

func (x *AssetGroup) GetRawGroupKey() []byte {
	if x != nil {
		return x.RawGroupKey
	}
	return nil
}

func (x *AssetGroup) GetTweakedGroupKey() []byte {
	if x != nil {
		return x.TweakedGroupKey
	}
	return nil
}

func (x *AssetGroup) GetAssetIdSig() []byte {
	if x != nil {
		return x.AssetIdSig
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the Taro asset.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,2,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=tarorpc.AssetType" json:"asset_type,omitempty"`
	// The total amount of the asset stored in this Taro UTXO.
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative lock time, same as Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,6,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The version of the script, only version 0 is defined at present.
	ScriptVersion int32 `protobuf:"varint,7,opt,name=script_version,json=scriptVersion,proto3" json:"script_version,omitempty"`
	// The script key of the asset, which can be spent under Taproot semantics.
	ScriptKey []byte `protobuf:"bytes,9,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The information related to the key group of an asset (if it exists).
	AssetGroup *AssetGroup `protobuf:"bytes,10,opt,name=asset_group,json=assetGroup,proto3" json:"asset_group,omitempty"`
	// Describes where in the chain the asset is currently anchored.
	ChainAnchor   *AnchorInfo    `protobuf:"bytes,11,opt,name=chain_anchor,json=chainAnchor,proto3" json:"chain_anchor,omitempty"`
	PrevWitnesses []*PrevWitness `protobuf:"bytes,12,rep,name=prev_witnesses,json=prevWitnesses,proto3" json:"prev_witnesses,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{6}
}

func (x *Asset) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Asset) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *Asset) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *Asset) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Asset) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Asset) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *Asset) GetScriptVersion() int32 {
	if x != nil {
		return x.ScriptVersion
	}
	return 0
}

func (x *Asset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Asset) GetAssetGroup() *AssetGroup {
	if x != nil {
		return x.AssetGroup
	}
	return nil
}

func (x *Asset) GetChainAnchor() *AnchorInfo {
	if x != nil {
		return x.ChainAnchor
	}
	return nil
}

func (x *Asset) GetPrevWitnesses() []*PrevWitness {
	if x != nil {
		return x.PrevWitnesses
	}
	return nil
}

type PrevWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevId          *PrevInputAsset  `protobuf:"bytes,1,opt,name=prev_id,json=prevId,proto3" json:"prev_id,omitempty"`
	TxWitness       [][]byte         `protobuf:"bytes,2,rep,name=tx_witness,json=txWitness,proto3" json:"tx_witness,omitempty"`
	SplitCommitment *SplitCommitment `protobuf:"bytes,3,opt,name=split_commitment,json=splitCommitment,proto3" json:"split_commitment,omitempty"`
}

func (x *PrevWitness) Reset() {
	*x = PrevWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevWitness) ProtoMessage() {}

func (x *PrevWitness) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevWitness.ProtoReflect.Descriptor instead.
func (*PrevWitness) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{7}
}

func (x *PrevWitness) GetPrevId() *PrevInputAsset {
	if x != nil {
		return x.PrevId
	}
	return nil
}

func (x *PrevWitness) GetTxWitness() [][]byte {
	if x != nil {
		return x.TxWitness
	}
	return nil
}

func (x *PrevWitness) GetSplitCommitment() *SplitCommitment {
	if x != nil {
		return x.SplitCommitment
	}
	return nil
}

type SplitCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootAsset *Asset `protobuf:"bytes,1,opt,name=root_asset,json=rootAsset,proto3" json:"root_asset,omitempty"`
}

func (x *SplitCommitment) Reset() {
	*x = SplitCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCommitment) ProtoMessage() {}

func (x *SplitCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCommitment.ProtoReflect.Descriptor instead.
func (*SplitCommitment) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{8}
}

func (x *SplitCommitment) GetRootAsset() *Asset {
	if x != nil {
		return x.RootAsset
	}
	return nil
}

type ListAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ListAssetResponse) Reset() {
	*x = ListAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse) ProtoMessage() {}

func (x *ListAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse.ProtoReflect.Descriptor instead.
func (*ListAssetResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{9}
}

func (x *ListAssetResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUtxosRequest) Reset() {
	*x = ListUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosRequest) ProtoMessage() {}

func (x *ListUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosRequest.ProtoReflect.Descriptor instead.
func (*ListUtxosRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{10}
}

type ManagedUtxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the UTXO.
	OutPoint string `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The UTXO amount in satoshis.
	AmtSat int64 `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,3,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taro root that commits to the set of assets at this UTXO.
	TaroRoot []byte `protobuf:"bytes,4,opt,name=taro_root,json=taroRoot,proto3" json:"taro_root,omitempty"`
	// The assets held at this UTXO.
	Assets []*Asset `protobuf:"bytes,5,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ManagedUtxo) Reset() {
	*x = ManagedUtxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedUtxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedUtxo) ProtoMessage() {}

func (x *ManagedUtxo) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedUtxo.ProtoReflect.Descriptor instead.
func (*ManagedUtxo) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{11}
}

func (x *ManagedUtxo) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

func (x *ManagedUtxo) GetAmtSat() int64 {
	if x != nil {
		return x.AmtSat
	}
	return 0
}

func (x *ManagedUtxo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *ManagedUtxo) GetTaroRoot() []byte {
	if x != nil {
		return x.TaroRoot
	}
	return nil
}

func (x *ManagedUtxo) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of UTXOs managed by the daemon.
	ManagedUtxos map[string]*ManagedUtxo `protobuf:"bytes,1,rep,name=managed_utxos,json=managedUtxos,proto3" json:"managed_utxos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListUtxosResponse) Reset() {
	*x = ListUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosResponse) ProtoMessage() {}

func (x *ListUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosResponse.ProtoReflect.Descriptor instead.
func (*ListUtxosResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{12}
}

func (x *ListUtxosResponse) GetManagedUtxos() map[string]*ManagedUtxo {
	if x != nil {
		return x.ManagedUtxos
	}
	return nil
}

type ListGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{13}
}

type AssetHumanReadable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The amount of the asset.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative locktime, as with Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,4,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The name of the asset.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// The opaque metadata of the asset.
	MetaData []byte `protobuf:"bytes,6,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	// The type of the asset.
	Type AssetType `protobuf:"varint,7,opt,name=type,proto3,enum=tarorpc.AssetType" json:"type,omitempty"`
}

func (x *AssetHumanReadable) Reset() {
	*x = AssetHumanReadable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetHumanReadable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHumanReadable) ProtoMessage() {}

func (x *AssetHumanReadable) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHumanReadable.ProtoReflect.Descriptor instead.
func (*AssetHumanReadable) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{14}
}

func (x *AssetHumanReadable) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetHumanReadable) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetHumanReadable) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AssetHumanReadable) GetMetaData() []byte {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *AssetHumanReadable) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_NORMAL
}

type GroupedAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of assets with the same group key.
	Assets []*AssetHumanReadable `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *GroupedAssets) Reset() {
	*x = GroupedAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedAssets) ProtoMessage() {}

func (x *GroupedAssets) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedAssets.ProtoReflect.Descriptor instead.
func (*GroupedAssets) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{15}
}

func (x *GroupedAssets) GetAssets() []*AssetHumanReadable {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of assets with a group key.
	Groups map[string]*GroupedAssets `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{16}
}

func (x *ListGroupsResponse) GetGroups() map[string]*GroupedAssets {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GroupBy:
	//	*ListBalancesRequest_AssetId
	//	*ListBalancesRequest_GroupKey
	GroupBy isListBalancesRequest_GroupBy `protobuf_oneof:"group_by"`
	// If the query results should grouped by asset ids, then an optional asset
	// filter may be provided to query balance of a specific asset.
	AssetFilter []byte `protobuf:"bytes,3,opt,name=asset_filter,json=assetFilter,proto3" json:"asset_filter,omitempty"`
	// If the query results should be grouped by group keys, then an optional
	// group key filter may be provided to query the balance of a specific
	// asset group.
	GroupKeyFilter []byte `protobuf:"bytes,4,opt,name=group_key_filter,json=groupKeyFilter,proto3" json:"group_key_filter,omitempty"`
}

func (x *ListBalancesRequest) Reset() {
	*x = ListBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesRequest) ProtoMessage() {}

func (x *ListBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListBalancesRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{17}
}

func (m *ListBalancesRequest) GetGroupBy() isListBalancesRequest_GroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (x *ListBalancesRequest) GetAssetId() bool {
	if x, ok := x.GetGroupBy().(*ListBalancesRequest_AssetId); ok {
		return x.AssetId
	}
	return false
}

func (x *ListBalancesRequest) GetGroupKey() bool {
	if x, ok := x.GetGroupBy().(*ListBalancesRequest_GroupKey); ok {
		return x.GroupKey
	}
	return false
}

func (x *ListBalancesRequest) GetAssetFilter() []byte {
	if x != nil {
		return x.AssetFilter
	}
	return nil
}

func (x *ListBalancesRequest) GetGroupKeyFilter() []byte {
	if x != nil {
		return x.GroupKeyFilter
	}
	return nil
}

type isListBalancesRequest_GroupBy interface {
	isListBalancesRequest_GroupBy()
}

type ListBalancesRequest_AssetId struct {
	// Group results by asset IDs.
	AssetId bool `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ListBalancesRequest_GroupKey struct {
	// Group results by group keys.
	GroupKey bool `protobuf:"varint,2,opt,name=group_key,json=groupKey,proto3,oneof"`
}

func (*ListBalancesRequest_AssetId) isListBalancesRequest_GroupBy() {}

func (*ListBalancesRequest_GroupKey) isListBalancesRequest_GroupBy() {}

type AssetBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,1,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=tarorpc.AssetType" json:"asset_type,omitempty"`
	// The balance of the asset owned by the target daemon.
	Balance int64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AssetBalance) Reset() {
	*x = AssetBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBalance) ProtoMessage() {}

func (x *AssetBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBalance.ProtoReflect.Descriptor instead.
func (*AssetBalance) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{18}
}

func (x *AssetBalance) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *AssetBalance) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *AssetBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AssetGroupBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group key or nil aggregating assets that don't have a group.
	GroupKey []byte `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The total balance of the assets in the group.
	Balance int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AssetGroupBalance) Reset() {
	*x = AssetGroupBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetGroupBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupBalance) ProtoMessage() {}

func (x *AssetGroupBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupBalance.ProtoReflect.Descriptor instead.
func (*AssetGroupBalance) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{19}
}

func (x *AssetGroupBalance) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *AssetGroupBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type ListBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetBalances      map[string]*AssetBalance      `protobuf:"bytes,1,rep,name=asset_balances,json=assetBalances,proto3" json:"asset_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AssetGroupBalances map[string]*AssetGroupBalance `protobuf:"bytes,2,rep,name=asset_group_balances,json=assetGroupBalances,proto3" json:"asset_group_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListBalancesResponse) Reset() {
	*x = ListBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesResponse) ProtoMessage() {}

func (x *ListBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListBalancesResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{20}
}

func (x *ListBalancesResponse) GetAssetBalances() map[string]*AssetBalance {
	if x != nil {
		return x.AssetBalances
	}
	return nil
}

func (x *ListBalancesResponse) GetAssetGroupBalances() map[string]*AssetGroupBalance {
	if x != nil {
		return x.AssetGroupBalances
	}
	return nil
}

type ListTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{21}
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unordered list of outgoing asset transfers.
	Transfers []*AssetTransfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{22}
}

func (x *ListTransfersResponse) GetTransfers() []*AssetTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type AssetTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferTimestamp int64 `protobuf:"varint,1,opt,name=transfer_timestamp,json=transferTimestamp,proto3" json:"transfer_timestamp,omitempty"`
	// The old/current location of the Taro commitment that was spent as an
	// input.
	OldAnchorPoint string `protobuf:"bytes,2,opt,name=old_anchor_point,json=oldAnchorPoint,proto3" json:"old_anchor_point,omitempty"`
	// The new location of the Taro commitment referenced by the old anchor
	// point.
	NewAnchorPoint string `protobuf:"bytes,3,opt,name=new_anchor_point,json=newAnchorPoint,proto3" json:"new_anchor_point,omitempty"`
	// The new Taro root that commits to the set of modified and unmodified
	// assets.
	TaroRoot []byte `protobuf:"bytes,4,opt,name=taro_root,json=taroRoot,proto3" json:"taro_root,omitempty"`
	// The new transaction that commits to the set of Taro assets found at the
	// above new anchor point.
	AnchorTxHash []byte `protobuf:"bytes,5,opt,name=anchor_tx_hash,json=anchorTxHash,proto3" json:"anchor_tx_hash,omitempty"`
	// Describes the set of mutated assets that now live at the new anchor tx
	// point.
	AssetSpendDeltas []*AssetSpendDelta `protobuf:"bytes,6,rep,name=asset_spend_deltas,json=assetSpendDeltas,proto3" json:"asset_spend_deltas,omitempty"`
}

func (x *AssetTransfer) Reset() {
	*x = AssetTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTransfer) ProtoMessage() {}

func (x *AssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTransfer.ProtoReflect.Descriptor instead.
func (*AssetTransfer) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{23}
}

func (x *AssetTransfer) GetTransferTimestamp() int64 {
	if x != nil {
		return x.TransferTimestamp
	}
	return 0
}

func (x *AssetTransfer) GetOldAnchorPoint() string {
	if x != nil {
		return x.OldAnchorPoint
	}
	return ""
}

func (x *AssetTransfer) GetNewAnchorPoint() string {
	if x != nil {
		return x.NewAnchorPoint
	}
	return ""
}

func (x *AssetTransfer) GetTaroRoot() []byte {
	if x != nil {
		return x.TaroRoot
	}
	return nil
}

func (x *AssetTransfer) GetAnchorTxHash() []byte {
	if x != nil {
		return x.AnchorTxHash
	}
	return nil
}

func (x *AssetTransfer) GetAssetSpendDeltas() []*AssetSpendDelta {
	if x != nil {
		return x.AssetSpendDeltas
	}
	return nil
}

type AssetSpendDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The old script key that uniquely identified the spent asset on disk.
	OldScriptKey []byte `protobuf:"bytes,2,opt,name=old_script_key,json=oldScriptKey,proto3" json:"old_script_key,omitempty"`
	// The new script key. We assume BIP 86 usage when updating the script keys
	// on disk.
	NewScriptKey []byte `protobuf:"bytes,3,opt,name=new_script_key,json=newScriptKey,proto3" json:"new_script_key,omitempty"`
	// The new amount for the asset.
	NewAmt int64 `protobuf:"varint,4,opt,name=new_amt,json=newAmt,proto3" json:"new_amt,omitempty"`
}

func (x *AssetSpendDelta) Reset() {
	*x = AssetSpendDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSpendDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSpendDelta) ProtoMessage() {}

func (x *AssetSpendDelta) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSpendDelta.ProtoReflect.Descriptor instead.
func (*AssetSpendDelta) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{24}
}

func (x *AssetSpendDelta) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetSpendDelta) GetOldScriptKey() []byte {
	if x != nil {
		return x.OldScriptKey
	}
	return nil
}

func (x *AssetSpendDelta) GetNewScriptKey() []byte {
	if x != nil {
		return x.NewScriptKey
	}
	return nil
}

func (x *AssetSpendDelta) GetNewAmt() int64 {
	if x != nil {
		return x.NewAmt
	}
	return 0
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{25}
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{26}
}

type DebugLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, all the valid debug sub-systems will be returned.
	Show      bool   `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	LevelSpec string `protobuf:"bytes,2,opt,name=level_spec,json=levelSpec,proto3" json:"level_spec,omitempty"`
}

func (x *DebugLevelRequest) Reset() {
	*x = DebugLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelRequest) ProtoMessage() {}

func (x *DebugLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelRequest.ProtoReflect.Descriptor instead.
func (*DebugLevelRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{27}
}

func (x *DebugLevelRequest) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *DebugLevelRequest) GetLevelSpec() string {
	if x != nil {
		return x.LevelSpec
	}
	return ""
}

type DebugLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubSystems string `protobuf:"bytes,1,opt,name=sub_systems,json=subSystems,proto3" json:"sub_systems,omitempty"`
}

func (x *DebugLevelResponse) Reset() {
	*x = DebugLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelResponse) ProtoMessage() {}

func (x *DebugLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelResponse.ProtoReflect.Descriptor instead.
func (*DebugLevelResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{28}
}

func (x *DebugLevelResponse) GetSubSystems() string {
	if x != nil {
		return x.SubSystems
	}
	return ""
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bech32 encoded Taro address.
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=tarorpc.AssetType" json:"asset_type,omitempty"`
	// The total amount of the asset stored in this Taro UTXO.
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The group key of the asset (if it exists)
	GroupKey []byte `protobuf:"bytes,5,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	//
	//The specific script key the asset must commit to in order to transfer
	//ownership to the creator of the address.
	ScriptKey []byte `protobuf:"bytes,6,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,7,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	//
	//The tweaked internal key that commits to the asset and represents the
	//on-chain output key the Bitcoin transaction must send to in order to
	//transfer assets described in this address.
	TaprootOutputKey []byte `protobuf:"bytes,8,opt,name=taproot_output_key,json=taprootOutputKey,proto3" json:"taproot_output_key,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{29}
}

func (x *Addr) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *Addr) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Addr) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *Addr) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Addr) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *Addr) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Addr) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *Addr) GetTaprootOutputKey() []byte {
	if x != nil {
		return x.TaprootOutputKey
	}
	return nil
}

type QueryAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//If set, then only addresses created after this Unix timestamp will be
	//returned.
	CreatedAfter int64 `protobuf:"varint,1,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	//
	//If set, then only addresses created before this Unix timestamp will be
	//returned.
	CreatedBefore int64 `protobuf:"varint,2,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	// The max number of addresses that should be returned.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The offset from the addresses that should be returned.
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *QueryAddrRequest) Reset() {
	*x = QueryAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrRequest) ProtoMessage() {}

func (x *QueryAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrRequest.ProtoReflect.Descriptor instead.
func (*QueryAddrRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{30}
}

func (x *QueryAddrRequest) GetCreatedAfter() int64 {
	if x != nil {
		return x.CreatedAfter
	}
	return 0
}

func (x *QueryAddrRequest) GetCreatedBefore() int64 {
	if x != nil {
		return x.CreatedBefore
	}
	return 0
}

func (x *QueryAddrRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryAddrRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type QueryAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []*Addr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *QueryAddrResponse) Reset() {
	*x = QueryAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrResponse) ProtoMessage() {}

func (x *QueryAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrResponse.ProtoReflect.Descriptor instead.
func (*QueryAddrResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{31}
}

func (x *QueryAddrResponse) GetAddrs() []*Addr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type NewAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisBootstrapInfo []byte `protobuf:"bytes,1,opt,name=genesis_bootstrap_info,json=genesisBootstrapInfo,proto3" json:"genesis_bootstrap_info,omitempty"`
	GroupKey             []byte `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	Amt                  int64  `protobuf:"varint,3,opt,name=amt,proto3" json:"amt,omitempty"`
}

func (x *NewAddrRequest) Reset() {
	*x = NewAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAddrRequest) ProtoMessage() {}

func (x *NewAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAddrRequest.ProtoReflect.Descriptor instead.
func (*NewAddrRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{32}
}

func (x *NewAddrRequest) GetGenesisBootstrapInfo() []byte {
	if x != nil {
		return x.GenesisBootstrapInfo
	}
	return nil
}

func (x *NewAddrRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *NewAddrRequest) GetAmt() int64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

type DecodeAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *DecodeAddrRequest) Reset() {
	*x = DecodeAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeAddrRequest) ProtoMessage() {}

func (x *DecodeAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeAddrRequest.ProtoReflect.Descriptor instead.
func (*DecodeAddrRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{33}
}

func (x *DecodeAddrRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type ProofFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawProof     []byte `protobuf:"bytes,1,opt,name=raw_proof,json=rawProof,proto3" json:"raw_proof,omitempty"`
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
}

func (x *ProofFile) Reset() {
	*x = ProofFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofFile) ProtoMessage() {}

func (x *ProofFile) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofFile.ProtoReflect.Descriptor instead.
func (*ProofFile) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{34}
}

func (x *ProofFile) GetRawProof() []byte {
	if x != nil {
		return x.RawProof
	}
	return nil
}

func (x *ProofFile) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type ProofVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ProofVerifyResponse) Reset() {
	*x = ProofVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofVerifyResponse) ProtoMessage() {}

func (x *ProofVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofVerifyResponse.ProtoReflect.Descriptor instead.
func (*ProofVerifyResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{35}
}

func (x *ProofVerifyResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ExportProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey []byte `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
}

func (x *ExportProofRequest) Reset() {
	*x = ExportProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProofRequest) ProtoMessage() {}

func (x *ExportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProofRequest.ProtoReflect.Descriptor instead.
func (*ExportProofRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{36}
}

func (x *ExportProofRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ExportProofRequest) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type ImportProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofFile    []byte `protobuf:"bytes,1,opt,name=proof_file,json=proofFile,proto3" json:"proof_file,omitempty"`
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
}

func (x *ImportProofRequest) Reset() {
	*x = ImportProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofRequest) ProtoMessage() {}

func (x *ImportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofRequest.ProtoReflect.Descriptor instead.
func (*ImportProofRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{37}
}

func (x *ImportProofRequest) GetProofFile() []byte {
	if x != nil {
		return x.ProofFile
	}
	return nil
}

func (x *ImportProofRequest) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type ImportProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportProofResponse) Reset() {
	*x = ImportProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofResponse) ProtoMessage() {}

func (x *ImportProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofResponse.ProtoReflect.Descriptor instead.
func (*ImportProofResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{38}
}

type AddrEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the event was created in unix timestamp seconds.
	CreationTimeUnixSeconds uint64 `protobuf:"varint,1,opt,name=creation_time_unix_seconds,json=creationTimeUnixSeconds,proto3" json:"creation_time_unix_seconds,omitempty"`
	// The address the event was created for.
	Addr *Addr `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// The current status of the event.
	Status AddrEventStatus `protobuf:"varint,3,opt,name=status,proto3,enum=tarorpc.AddrEventStatus" json:"status,omitempty"`
	// The outpoint that contains the inbound asset transfer.
	Outpoint string `protobuf:"bytes,4,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//The amount in satoshis that were transferred on chain along with the asset.
	//This amount is independent of the requested asset amount, which can be
	//looked up on the address.
	UtxoAmtSat uint64 `protobuf:"varint,5,opt,name=utxo_amt_sat,json=utxoAmtSat,proto3" json:"utxo_amt_sat,omitempty"`
	//
	//The taproot sibling hash that was used to send to the Taproot output.
	//NOTE: Not yet implemented.
	TaprootSibling []byte `protobuf:"bytes,6,opt,name=taproot_sibling,json=taprootSibling,proto3" json:"taproot_sibling,omitempty"`
	//
	//The height at which the on-chain output was confirmed. If this is zero, it
	//means the output is unconfirmed.
	ConfirmationHeight uint32 `protobuf:"varint,7,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
	//
	//Indicates whether a proof file can be found for the address' asset ID and
	//script key.
	HasProof bool `protobuf:"varint,8,opt,name=has_proof,json=hasProof,proto3" json:"has_proof,omitempty"`
}

func (x *AddrEvent) Reset() {
	*x = AddrEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrEvent) ProtoMessage() {}

func (x *AddrEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrEvent.ProtoReflect.Descriptor instead.
func (*AddrEvent) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{39}
}

func (x *AddrEvent) GetCreationTimeUnixSeconds() uint64 {
	if x != nil {
		return x.CreationTimeUnixSeconds
	}
	return 0
}

func (x *AddrEvent) GetAddr() *Addr {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *AddrEvent) GetStatus() AddrEventStatus {
	if x != nil {
		return x.Status
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

func (x *AddrEvent) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *AddrEvent) GetUtxoAmtSat() uint64 {
	if x != nil {
		return x.UtxoAmtSat
	}
	return 0
}

func (x *AddrEvent) GetTaprootSibling() []byte {
	if x != nil {
		return x.TaprootSibling
	}
	return nil
}

func (x *AddrEvent) GetConfirmationHeight() uint32 {
	if x != nil {
		return x.ConfirmationHeight
	}
	return 0
}

func (x *AddrEvent) GetHasProof() bool {
	if x != nil {
		return x.HasProof
	}
	return false
}

type AddrReceivesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter receives by a specific address. Leave empty to get all receives.
	FilterAddr string `protobuf:"bytes,1,opt,name=filter_addr,json=filterAddr,proto3" json:"filter_addr,omitempty"`
	// Filter receives by a specific status. Leave empty to get all receives.
	FilterStatus AddrEventStatus `protobuf:"varint,2,opt,name=filter_status,json=filterStatus,proto3,enum=tarorpc.AddrEventStatus" json:"filter_status,omitempty"`
}

func (x *AddrReceivesRequest) Reset() {
	*x = AddrReceivesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrReceivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesRequest) ProtoMessage() {}

func (x *AddrReceivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesRequest.ProtoReflect.Descriptor instead.
func (*AddrReceivesRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{40}
}

func (x *AddrReceivesRequest) GetFilterAddr() string {
	if x != nil {
		return x.FilterAddr
	}
	return ""
}

func (x *AddrReceivesRequest) GetFilterStatus() AddrEventStatus {
	if x != nil {
		return x.FilterStatus
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

type AddrReceivesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The events that match the filter criteria.
	Events []*AddrEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AddrReceivesResponse) Reset() {
	*x = AddrReceivesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrReceivesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesResponse) ProtoMessage() {}

func (x *AddrReceivesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesResponse.ProtoReflect.Descriptor instead.
func (*AddrReceivesResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{41}
}

func (x *AddrReceivesResponse) GetEvents() []*AddrEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SendAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaroAddr string `protobuf:"bytes,1,opt,name=taro_addr,json=taroAddr,proto3" json:"taro_addr,omitempty"`
}

func (x *SendAssetRequest) Reset() {
	*x = SendAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetRequest) ProtoMessage() {}

func (x *SendAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetRequest.ProtoReflect.Descriptor instead.
func (*SendAssetRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{42}
}

func (x *SendAssetRequest) GetTaroAddr() string {
	if x != nil {
		return x.TaroAddr
	}
	return ""
}

type PrevInputAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorPoint string `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	AssetId     []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey   []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Amount      int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PrevInputAsset) Reset() {
	*x = PrevInputAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevInputAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevInputAsset) ProtoMessage() {}

func (x *PrevInputAsset) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevInputAsset.ProtoReflect.Descriptor instead.
func (*PrevInputAsset) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{43}
}

func (x *PrevInputAsset) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *PrevInputAsset) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *PrevInputAsset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *PrevInputAsset) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type AssetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorPoint      string `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	AssetId          []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey        []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Amount           int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	NewProofBlob     []byte `protobuf:"bytes,5,opt,name=new_proof_blob,json=newProofBlob,proto3" json:"new_proof_blob,omitempty"`
	SplitCommitProof []byte `protobuf:"bytes,6,opt,name=split_commit_proof,json=splitCommitProof,proto3" json:"split_commit_proof,omitempty"`
}

func (x *AssetOutput) Reset() {
	*x = AssetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetOutput) ProtoMessage() {}

func (x *AssetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetOutput.ProtoReflect.Descriptor instead.
func (*AssetOutput) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{44}
}

func (x *AssetOutput) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *AssetOutput) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetOutput) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *AssetOutput) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetOutput) GetNewProofBlob() []byte {
	if x != nil {
		return x.NewProofBlob
	}
	return nil
}

func (x *AssetOutput) GetSplitCommitProof() []byte {
	if x != nil {
		return x.SplitCommitProof
	}
	return nil
}

type TaroTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldTaroRoot []byte            `protobuf:"bytes,1,opt,name=old_taro_root,json=oldTaroRoot,proto3" json:"old_taro_root,omitempty"`
	NewTaroRoot []byte            `protobuf:"bytes,2,opt,name=new_taro_root,json=newTaroRoot,proto3" json:"new_taro_root,omitempty"`
	PrevInputs  []*PrevInputAsset `protobuf:"bytes,3,rep,name=prev_inputs,json=prevInputs,proto3" json:"prev_inputs,omitempty"`
	NewOutputs  []*AssetOutput    `protobuf:"bytes,4,rep,name=new_outputs,json=newOutputs,proto3" json:"new_outputs,omitempty"`
}

func (x *TaroTransfer) Reset() {
	*x = TaroTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaroTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaroTransfer) ProtoMessage() {}

func (x *TaroTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaroTransfer.ProtoReflect.Descriptor instead.
func (*TaroTransfer) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{45}
}

func (x *TaroTransfer) GetOldTaroRoot() []byte {
	if x != nil {
		return x.OldTaroRoot
	}
	return nil
}

func (x *TaroTransfer) GetNewTaroRoot() []byte {
	if x != nil {
		return x.NewTaroRoot
	}
	return nil
}

func (x *TaroTransfer) GetPrevInputs() []*PrevInputAsset {
	if x != nil {
		return x.PrevInputs
	}
	return nil
}

func (x *TaroTransfer) GetNewOutputs() []*AssetOutput {
	if x != nil {
		return x.NewOutputs
	}
	return nil
}

type SendAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferTxid      string        `protobuf:"bytes,1,opt,name=transfer_txid,json=transferTxid,proto3" json:"transfer_txid,omitempty"`
	AnchorOutputIndex int32         `protobuf:"varint,2,opt,name=anchor_output_index,json=anchorOutputIndex,proto3" json:"anchor_output_index,omitempty"`
	TransferTxBytes   []byte        `protobuf:"bytes,3,opt,name=transfer_tx_bytes,json=transferTxBytes,proto3" json:"transfer_tx_bytes,omitempty"`
	TaroTransfer      *TaroTransfer `protobuf:"bytes,4,opt,name=taro_transfer,json=taroTransfer,proto3" json:"taro_transfer,omitempty"`
	TotalFeeSats      int64         `protobuf:"varint,5,opt,name=total_fee_sats,json=totalFeeSats,proto3" json:"total_fee_sats,omitempty"`
}

func (x *SendAssetResponse) Reset() {
	*x = SendAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetResponse) ProtoMessage() {}

func (x *SendAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetResponse.ProtoReflect.Descriptor instead.
func (*SendAssetResponse) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{46}
}

func (x *SendAssetResponse) GetTransferTxid() string {
	if x != nil {
		return x.TransferTxid
	}
	return ""
}

func (x *SendAssetResponse) GetAnchorOutputIndex() int32 {
	if x != nil {
		return x.AnchorOutputIndex
	}
	return 0
}

func (x *SendAssetResponse) GetTransferTxBytes() []byte {
	if x != nil {
		return x.TransferTxBytes
	}
	return nil
}

func (x *SendAssetResponse) GetTaroTransfer() *TaroTransfer {
	if x != nil {
		return x.TaroTransfer
	}
	return nil
}

func (x *SendAssetResponse) GetTotalFeeSats() int64 {
	if x != nil {
		return x.TotalFeeSats
	}
	return 0
}

type SubscribeSendAssetEventNtfnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSendAssetEventNtfnsRequest) Reset() {
	*x = SubscribeSendAssetEventNtfnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSendAssetEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSendAssetEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeSendAssetEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSendAssetEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSendAssetEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{47}
}

type SendAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*SendAssetEvent_ExecuteSendStateEvent
	Event isSendAssetEvent_Event `protobuf_oneof:"event"`
}

func (x *SendAssetEvent) Reset() {
	*x = SendAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetEvent) ProtoMessage() {}

func (x *SendAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetEvent.ProtoReflect.Descriptor instead.
func (*SendAssetEvent) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{48}
}

func (m *SendAssetEvent) GetEvent() isSendAssetEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SendAssetEvent) GetExecuteSendStateEvent() *ExecuteSendStateEvent {
	if x, ok := x.GetEvent().(*SendAssetEvent_ExecuteSendStateEvent); ok {
		return x.ExecuteSendStateEvent
	}
	return nil
}

type isSendAssetEvent_Event interface {
	isSendAssetEvent_Event()
}

type SendAssetEvent_ExecuteSendStateEvent struct {
	// An event which indicates that a send state is about to be executed.
	ExecuteSendStateEvent *ExecuteSendStateEvent `protobuf:"bytes,1,opt,name=execute_send_state_event,json=executeSendStateEvent,proto3,oneof"`
}

func (*SendAssetEvent_ExecuteSendStateEvent) isSendAssetEvent_Event() {}

type ExecuteSendStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execute timestamp.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The send state that is about to be executed.
	SendState string `protobuf:"bytes,2,opt,name=send_state,json=sendState,proto3" json:"send_state,omitempty"`
}

func (x *ExecuteSendStateEvent) Reset() {
	*x = ExecuteSendStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taro_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSendStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSendStateEvent) ProtoMessage() {}

func (x *ExecuteSendStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taro_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSendStateEvent.ProtoReflect.Descriptor instead.
func (*ExecuteSendStateEvent) Descriptor() ([]byte, []int) {
	return file_taro_proto_rawDescGZIP(), []int{49}
}

func (x *ExecuteSendStateEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecuteSendStateEvent) GetSendState() string {
	if x != nil {
		return x.SendState
	}
	return ""
}

var File_taro_proto protoreflect.FileDescriptor

var file_taro_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x30,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x22, 0x35, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x54, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x54, 0x78, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x22, 0xe8, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x77, 0x65,
	0x61, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x53, 0x69, 0x67, 0x22, 0xe3, 0x03, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa3, 0x01,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x43,
	0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x72,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x72,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x74, 0x53, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x72, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x1a, 0x55, 0x0a,
	0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x4a, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x94, 0x03,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x61, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x72, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x41, 0x6d, 0x74, 0x22,
	0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46,
	0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x22, 0x35, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x02,
	0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x38, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x61, 0x6d, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x4d, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61,
	0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x61, 0x6d,
	0x74, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x74, 0x78,
	0x6f, 0x41, 0x6d, 0x74, 0x53, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x75,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xc7, 0x01, 0x0a, 0x0c,
	0x54, 0x61, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x6f, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x72, 0x6f, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x72, 0x6f,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x78, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x53, 0x61, 0x74, 0x73, 0x22, 0x25,
	0x0a, 0x23, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2a, 0x28, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0xd0, 0x01, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xaf,
	0x09, 0x0a, 0x04, 0x54, 0x61, 0x72, 0x6f, 0x12, 0x42, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x19, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74,
	0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x72,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x74,
	0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61,
	0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01,
	0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x72,
	0x6f, 0x2f, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_taro_proto_rawDescOnce sync.Once
	file_taro_proto_rawDescData = file_taro_proto_rawDesc
)

func file_taro_proto_rawDescGZIP() []byte {
	file_taro_proto_rawDescOnce.Do(func() {
		file_taro_proto_rawDescData = protoimpl.X.CompressGZIP(file_taro_proto_rawDescData)
	})
	return file_taro_proto_rawDescData
}

var file_taro_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_taro_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_taro_proto_goTypes = []interface{}{
	(AssetType)(0),                              // 0: tarorpc.AssetType
	(AddrEventStatus)(0),                        // 1: tarorpc.AddrEventStatus
	(*MintAssetRequest)(nil),                    // 2: tarorpc.MintAssetRequest
	(*MintAssetResponse)(nil),                   // 3: tarorpc.MintAssetResponse
	(*ListAssetRequest)(nil),                    // 4: tarorpc.ListAssetRequest
	(*AnchorInfo)(nil),                          // 5: tarorpc.AnchorInfo
	(*GenesisInfo)(nil),                         // 6: tarorpc.GenesisInfo
	(*AssetGroup)(nil),                          // 7: tarorpc.AssetGroup
	(*Asset)(nil),                               // 8: tarorpc.Asset
	(*PrevWitness)(nil),                         // 9: tarorpc.PrevWitness
	(*SplitCommitment)(nil),                     // 10: tarorpc.SplitCommitment
	(*ListAssetResponse)(nil),                   // 11: tarorpc.ListAssetResponse
	(*ListUtxosRequest)(nil),                    // 12: tarorpc.ListUtxosRequest
	(*ManagedUtxo)(nil),                         // 13: tarorpc.ManagedUtxo
	(*ListUtxosResponse)(nil),                   // 14: tarorpc.ListUtxosResponse
	(*ListGroupsRequest)(nil),                   // 15: tarorpc.ListGroupsRequest
	(*AssetHumanReadable)(nil),                  // 16: tarorpc.AssetHumanReadable
	(*GroupedAssets)(nil),                       // 17: tarorpc.GroupedAssets
	(*ListGroupsResponse)(nil),                  // 18: tarorpc.ListGroupsResponse
	(*ListBalancesRequest)(nil),                 // 19: tarorpc.ListBalancesRequest
	(*AssetBalance)(nil),                        // 20: tarorpc.AssetBalance
	(*AssetGroupBalance)(nil),                   // 21: tarorpc.AssetGroupBalance
	(*ListBalancesResponse)(nil),                // 22: tarorpc.ListBalancesResponse
	(*ListTransfersRequest)(nil),                // 23: tarorpc.ListTransfersRequest
	(*ListTransfersResponse)(nil),               // 24: tarorpc.ListTransfersResponse
	(*AssetTransfer)(nil),                       // 25: tarorpc.AssetTransfer
	(*AssetSpendDelta)(nil),                     // 26: tarorpc.AssetSpendDelta
	(*StopRequest)(nil),                         // 27: tarorpc.StopRequest
	(*StopResponse)(nil),                        // 28: tarorpc.StopResponse
	(*DebugLevelRequest)(nil),                   // 29: tarorpc.DebugLevelRequest
	(*DebugLevelResponse)(nil),                  // 30: tarorpc.DebugLevelResponse
	(*Addr)(nil),                                // 31: tarorpc.Addr
	(*QueryAddrRequest)(nil),                    // 32: tarorpc.QueryAddrRequest
	(*QueryAddrResponse)(nil),                   // 33: tarorpc.QueryAddrResponse
	(*NewAddrRequest)(nil),                      // 34: tarorpc.NewAddrRequest
	(*DecodeAddrRequest)(nil),                   // 35: tarorpc.DecodeAddrRequest
	(*ProofFile)(nil),                           // 36: tarorpc.ProofFile
	(*ProofVerifyResponse)(nil),                 // 37: tarorpc.ProofVerifyResponse
	(*ExportProofRequest)(nil),                  // 38: tarorpc.ExportProofRequest
	(*ImportProofRequest)(nil),                  // 39: tarorpc.ImportProofRequest
	(*ImportProofResponse)(nil),                 // 40: tarorpc.ImportProofResponse
	(*AddrEvent)(nil),                           // 41: tarorpc.AddrEvent
	(*AddrReceivesRequest)(nil),                 // 42: tarorpc.AddrReceivesRequest
	(*AddrReceivesResponse)(nil),                // 43: tarorpc.AddrReceivesResponse
	(*SendAssetRequest)(nil),                    // 44: tarorpc.SendAssetRequest
	(*PrevInputAsset)(nil),                      // 45: tarorpc.PrevInputAsset
	(*AssetOutput)(nil),                         // 46: tarorpc.AssetOutput
	(*TaroTransfer)(nil),                        // 47: tarorpc.TaroTransfer
	(*SendAssetResponse)(nil),                   // 48: tarorpc.SendAssetResponse
	(*SubscribeSendAssetEventNtfnsRequest)(nil), // 49: tarorpc.SubscribeSendAssetEventNtfnsRequest
	(*SendAssetEvent)(nil),                      // 50: tarorpc.SendAssetEvent
	(*ExecuteSendStateEvent)(nil),               // 51: tarorpc.ExecuteSendStateEvent
	nil,                                         // 52: tarorpc.ListUtxosResponse.ManagedUtxosEntry
	nil,                                         // 53: tarorpc.ListGroupsResponse.GroupsEntry
	nil,                                         // 54: tarorpc.ListBalancesResponse.AssetBalancesEntry
	nil,                                         // 55: tarorpc.ListBalancesResponse.AssetGroupBalancesEntry
}
var file_taro_proto_depIdxs = []int32{
	0,  // 0: tarorpc.MintAssetRequest.asset_type:type_name -> tarorpc.AssetType
	6,  // 1: tarorpc.Asset.asset_genesis:type_name -> tarorpc.GenesisInfo
	0,  // 2: tarorpc.Asset.asset_type:type_name -> tarorpc.AssetType
	7,  // 3: tarorpc.Asset.asset_group:type_name -> tarorpc.AssetGroup
	5,  // 4: tarorpc.Asset.chain_anchor:type_name -> tarorpc.AnchorInfo
	9,  // 5: tarorpc.Asset.prev_witnesses:type_name -> tarorpc.PrevWitness
	45, // 6: tarorpc.PrevWitness.prev_id:type_name -> tarorpc.PrevInputAsset
	10, // 7: tarorpc.PrevWitness.split_commitment:type_name -> tarorpc.SplitCommitment
	8,  // 8: tarorpc.SplitCommitment.root_asset:type_name -> tarorpc.Asset
	8,  // 9: tarorpc.ListAssetResponse.assets:type_name -> tarorpc.Asset
	8,  // 10: tarorpc.ManagedUtxo.assets:type_name -> tarorpc.Asset
	52, // 11: tarorpc.ListUtxosResponse.managed_utxos:type_name -> tarorpc.ListUtxosResponse.ManagedUtxosEntry
	0,  // 12: tarorpc.AssetHumanReadable.type:type_name -> tarorpc.AssetType
	16, // 13: tarorpc.GroupedAssets.assets:type_name -> tarorpc.AssetHumanReadable
	53, // 14: tarorpc.ListGroupsResponse.groups:type_name -> tarorpc.ListGroupsResponse.GroupsEntry
	6,  // 15: tarorpc.AssetBalance.asset_genesis:type_name -> tarorpc.GenesisInfo
	0,  // 16: tarorpc.AssetBalance.asset_type:type_name -> tarorpc.AssetType
	54, // 17: tarorpc.ListBalancesResponse.asset_balances:type_name -> tarorpc.ListBalancesResponse.AssetBalancesEntry
	55, // 18: tarorpc.ListBalancesResponse.asset_group_balances:type_name -> tarorpc.ListBalancesResponse.AssetGroupBalancesEntry
	25, // 19: tarorpc.ListTransfersResponse.transfers:type_name -> tarorpc.AssetTransfer
	26, // 20: tarorpc.AssetTransfer.asset_spend_deltas:type_name -> tarorpc.AssetSpendDelta
	0,  // 21: tarorpc.Addr.asset_type:type_name -> tarorpc.AssetType
	31, // 22: tarorpc.QueryAddrResponse.addrs:type_name -> tarorpc.Addr
	31, // 23: tarorpc.AddrEvent.addr:type_name -> tarorpc.Addr
	1,  // 24: tarorpc.AddrEvent.status:type_name -> tarorpc.AddrEventStatus
	1,  // 25: tarorpc.AddrReceivesRequest.filter_status:type_name -> tarorpc.AddrEventStatus
	41, // 26: tarorpc.AddrReceivesResponse.events:type_name -> tarorpc.AddrEvent
	45, // 27: tarorpc.TaroTransfer.prev_inputs:type_name -> tarorpc.PrevInputAsset
	46, // 28: tarorpc.TaroTransfer.new_outputs:type_name -> tarorpc.AssetOutput
	47, // 29: tarorpc.SendAssetResponse.taro_transfer:type_name -> tarorpc.TaroTransfer
	51, // 30: tarorpc.SendAssetEvent.execute_send_state_event:type_name -> tarorpc.ExecuteSendStateEvent
	13, // 31: tarorpc.ListUtxosResponse.ManagedUtxosEntry.value:type_name -> tarorpc.ManagedUtxo
	17, // 32: tarorpc.ListGroupsResponse.GroupsEntry.value:type_name -> tarorpc.GroupedAssets
	20, // 33: tarorpc.ListBalancesResponse.AssetBalancesEntry.value:type_name -> tarorpc.AssetBalance
	21, // 34: tarorpc.ListBalancesResponse.AssetGroupBalancesEntry.value:type_name -> tarorpc.AssetGroupBalance
	2,  // 35: tarorpc.Taro.MintAsset:input_type -> tarorpc.MintAssetRequest
	4,  // 36: tarorpc.Taro.ListAssets:input_type -> tarorpc.ListAssetRequest
	12, // 37: tarorpc.Taro.ListUtxos:input_type -> tarorpc.ListUtxosRequest
	15, // 38: tarorpc.Taro.ListGroups:input_type -> tarorpc.ListGroupsRequest
	19, // 39: tarorpc.Taro.ListBalances:input_type -> tarorpc.ListBalancesRequest
	23, // 40: tarorpc.Taro.ListTransfers:input_type -> tarorpc.ListTransfersRequest
	27, // 41: tarorpc.Taro.StopDaemon:input_type -> tarorpc.StopRequest
	29, // 42: tarorpc.Taro.DebugLevel:input_type -> tarorpc.DebugLevelRequest
	32, // 43: tarorpc.Taro.QueryAddrs:input_type -> tarorpc.QueryAddrRequest
	34, // 44: tarorpc.Taro.NewAddr:input_type -> tarorpc.NewAddrRequest
	35, // 45: tarorpc.Taro.DecodeAddr:input_type -> tarorpc.DecodeAddrRequest
	42, // 46: tarorpc.Taro.AddrReceives:input_type -> tarorpc.AddrReceivesRequest
	36, // 47: tarorpc.Taro.VerifyProof:input_type -> tarorpc.ProofFile
	38, // 48: tarorpc.Taro.ExportProof:input_type -> tarorpc.ExportProofRequest
	39, // 49: tarorpc.Taro.ImportProof:input_type -> tarorpc.ImportProofRequest
	44, // 50: tarorpc.Taro.SendAsset:input_type -> tarorpc.SendAssetRequest
	49, // 51: tarorpc.Taro.SubscribeSendAssetEventNtfns:input_type -> tarorpc.SubscribeSendAssetEventNtfnsRequest
	3,  // 52: tarorpc.Taro.MintAsset:output_type -> tarorpc.MintAssetResponse
	11, // 53: tarorpc.Taro.ListAssets:output_type -> tarorpc.ListAssetResponse
	14, // 54: tarorpc.Taro.ListUtxos:output_type -> tarorpc.ListUtxosResponse
	18, // 55: tarorpc.Taro.ListGroups:output_type -> tarorpc.ListGroupsResponse
	22, // 56: tarorpc.Taro.ListBalances:output_type -> tarorpc.ListBalancesResponse
	24, // 57: tarorpc.Taro.ListTransfers:output_type -> tarorpc.ListTransfersResponse
	28, // 58: tarorpc.Taro.StopDaemon:output_type -> tarorpc.StopResponse
	30, // 59: tarorpc.Taro.DebugLevel:output_type -> tarorpc.DebugLevelResponse
	33, // 60: tarorpc.Taro.QueryAddrs:output_type -> tarorpc.QueryAddrResponse
	31, // 61: tarorpc.Taro.NewAddr:output_type -> tarorpc.Addr
	31, // 62: tarorpc.Taro.DecodeAddr:output_type -> tarorpc.Addr
	43, // 63: tarorpc.Taro.AddrReceives:output_type -> tarorpc.AddrReceivesResponse
	37, // 64: tarorpc.Taro.VerifyProof:output_type -> tarorpc.ProofVerifyResponse
	36, // 65: tarorpc.Taro.ExportProof:output_type -> tarorpc.ProofFile
	40, // 66: tarorpc.Taro.ImportProof:output_type -> tarorpc.ImportProofResponse
	48, // 67: tarorpc.Taro.SendAsset:output_type -> tarorpc.SendAssetResponse
	50, // 68: tarorpc.Taro.SubscribeSendAssetEventNtfns:output_type -> tarorpc.SendAssetEvent
	52, // [52:69] is the sub-list for method output_type
	35, // [35:52] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_taro_proto_init() }
func file_taro_proto_init() {
	if File_taro_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_taro_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedUtxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetHumanReadable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupedAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetGroupBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSpendDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrReceivesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrReceivesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevInputAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaroTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSendAssetEventNtfnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taro_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSendStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taro_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ListBalancesRequest_AssetId)(nil),
		(*ListBalancesRequest_GroupKey)(nil),
	}
	file_taro_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*SendAssetEvent_ExecuteSendStateEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taro_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taro_proto_goTypes,
		DependencyIndexes: file_taro_proto_depIdxs,
		EnumInfos:         file_taro_proto_enumTypes,
		MessageInfos:      file_taro_proto_msgTypes,
	}.Build()
	File_taro_proto = out.File
	file_taro_proto_rawDesc = nil
	file_taro_proto_goTypes = nil
	file_taro_proto_depIdxs = nil
}
