// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: assets.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const allAssets = `-- name: AllAssets :many
SELECT asset_id, genesis_id, version, script_key_id, asset_group_sig_id, script_version, amount, lock_time, relative_lock_time, split_commitment_root_hash, split_commitment_root_value, anchor_utxo_id 
FROM assets
`

func (q *Queries) AllAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, allAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.AssetID,
			&i.GenesisID,
			&i.Version,
			&i.ScriptKeyID,
			&i.AssetGroupSigID,
			&i.ScriptVersion,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.SplitCommitmentRootHash,
			&i.SplitCommitmentRootValue,
			&i.AnchorUtxoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allInternalKeys = `-- name: AllInternalKeys :many
SELECT key_id, raw_key, key_family, key_index 
FROM internal_keys
`

func (q *Queries) AllInternalKeys(ctx context.Context) ([]InternalKey, error) {
	rows, err := q.db.QueryContext(ctx, allInternalKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InternalKey
	for rows.Next() {
		var i InternalKey
		if err := rows.Scan(
			&i.KeyID,
			&i.RawKey,
			&i.KeyFamily,
			&i.KeyIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allMintingBatches = `-- name: AllMintingBatches :many
SELECT batch_id, batch_state, minting_tx_psbt, change_output_index, genesis_id, height_hint, creation_time_unix, key_id, raw_key, key_family, key_index 
FROM asset_minting_batches
JOIN internal_keys 
ON asset_minting_batches.batch_id = internal_keys.key_id
`

type AllMintingBatchesRow struct {
	BatchID           int32
	BatchState        int16
	MintingTxPsbt     []byte
	ChangeOutputIndex sql.NullInt32
	GenesisID         sql.NullInt32
	HeightHint        int32
	CreationTimeUnix  time.Time
	KeyID             int32
	RawKey            []byte
	KeyFamily         int32
	KeyIndex          int32
}

func (q *Queries) AllMintingBatches(ctx context.Context) ([]AllMintingBatchesRow, error) {
	rows, err := q.db.QueryContext(ctx, allMintingBatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllMintingBatchesRow
	for rows.Next() {
		var i AllMintingBatchesRow
		if err := rows.Scan(
			&i.BatchID,
			&i.BatchState,
			&i.MintingTxPsbt,
			&i.ChangeOutputIndex,
			&i.GenesisID,
			&i.HeightHint,
			&i.CreationTimeUnix,
			&i.KeyID,
			&i.RawKey,
			&i.KeyFamily,
			&i.KeyIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const anchorGenesisPoint = `-- name: AnchorGenesisPoint :exec
WITH target_point(genesis_id) AS (
    SELECT genesis_id
    FROM genesis_points
    WHERE genesis_points.prev_out = $1
)
UPDATE genesis_points
SET anchor_tx_id = $2
WHERE genesis_id in (SELECT genesis_id FROM target_point)
`

type AnchorGenesisPointParams struct {
	PrevOut    []byte
	AnchorTxID sql.NullInt32
}

func (q *Queries) AnchorGenesisPoint(ctx context.Context, arg AnchorGenesisPointParams) error {
	_, err := q.db.ExecContext(ctx, anchorGenesisPoint, arg.PrevOut, arg.AnchorTxID)
	return err
}

const anchorPendingAssets = `-- name: AnchorPendingAssets :exec
WITH assets_to_update AS (
    SELECT script_key_id
    FROM assets 
    JOIN genesis_assets 
        ON assets.genesis_id = genesis_assets.gen_asset_id
    JOIN genesis_points
        ON genesis_points.genesis_id = genesis_assets.genesis_point_id
    WHERE prev_out = $1
)
UPDATE assets
SET anchor_utxo_id = $2
WHERE script_key_id in (SELECT script_key_id FROM assets_to_update)
`

type AnchorPendingAssetsParams struct {
	PrevOut      []byte
	AnchorUtxoID sql.NullInt32
}

func (q *Queries) AnchorPendingAssets(ctx context.Context, arg AnchorPendingAssetsParams) error {
	_, err := q.db.ExecContext(ctx, anchorPendingAssets, arg.PrevOut, arg.AnchorUtxoID)
	return err
}

const assetsByGenesisPoint = `-- name: AssetsByGenesisPoint :many
SELECT assets.asset_id, assets.genesis_id, version, script_key_id, asset_group_sig_id, script_version, amount, lock_time, relative_lock_time, split_commitment_root_hash, split_commitment_root_value, anchor_utxo_id, gen_asset_id, genesis_assets.asset_id, asset_tag, meta_data, output_index, asset_type, genesis_point_id, genesis_points.genesis_id, prev_out, anchor_tx_id
FROM assets 
JOIN genesis_assets 
    ON assets.genesis_id = genesis_assets.gen_asset_id
JOIN genesis_points
    ON genesis_points.genesis_id = genesis_assets.genesis_point_id
WHERE prev_out = $1
`

type AssetsByGenesisPointRow struct {
	AssetID                  int32
	GenesisID                int32
	Version                  int32
	ScriptKeyID              int32
	AssetGroupSigID          sql.NullInt32
	ScriptVersion            int32
	Amount                   int64
	LockTime                 sql.NullInt32
	RelativeLockTime         sql.NullInt32
	SplitCommitmentRootHash  []byte
	SplitCommitmentRootValue sql.NullInt64
	AnchorUtxoID             sql.NullInt32
	GenAssetID               int32
	AssetID_2                []byte
	AssetTag                 string
	MetaData                 []byte
	OutputIndex              int32
	AssetType                int16
	GenesisPointID           int32
	GenesisID_2              int32
	PrevOut                  []byte
	AnchorTxID               sql.NullInt32
}

func (q *Queries) AssetsByGenesisPoint(ctx context.Context, prevOut []byte) ([]AssetsByGenesisPointRow, error) {
	rows, err := q.db.QueryContext(ctx, assetsByGenesisPoint, prevOut)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssetsByGenesisPointRow
	for rows.Next() {
		var i AssetsByGenesisPointRow
		if err := rows.Scan(
			&i.AssetID,
			&i.GenesisID,
			&i.Version,
			&i.ScriptKeyID,
			&i.AssetGroupSigID,
			&i.ScriptVersion,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.SplitCommitmentRootHash,
			&i.SplitCommitmentRootValue,
			&i.AnchorUtxoID,
			&i.GenAssetID,
			&i.AssetID_2,
			&i.AssetTag,
			&i.MetaData,
			&i.OutputIndex,
			&i.AssetType,
			&i.GenesisPointID,
			&i.GenesisID_2,
			&i.PrevOut,
			&i.AnchorTxID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const assetsInBatch = `-- name: AssetsInBatch :many
SELECT
    gen_asset_id, asset_id, asset_tag, meta_data, output_index, asset_type,
    genesis_points.prev_out prev_out
FROM genesis_assets
JOIN genesis_points
    ON genesis_assets.genesis_point_id = genesis_points.genesis_id
JOIN asset_minting_batches batches
    ON genesis_points.genesis_id = batches.genesis_id
JOIN internal_keys keys
    ON keys.key_id = batches.batch_id
WHERE keys.raw_key = $1
`

type AssetsInBatchRow struct {
	GenAssetID  int32
	AssetID     []byte
	AssetTag    string
	MetaData    []byte
	OutputIndex int32
	AssetType   int16
	PrevOut     []byte
}

func (q *Queries) AssetsInBatch(ctx context.Context, rawKey []byte) ([]AssetsInBatchRow, error) {
	rows, err := q.db.QueryContext(ctx, assetsInBatch, rawKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssetsInBatchRow
	for rows.Next() {
		var i AssetsInBatchRow
		if err := rows.Scan(
			&i.GenAssetID,
			&i.AssetID,
			&i.AssetTag,
			&i.MetaData,
			&i.OutputIndex,
			&i.AssetType,
			&i.PrevOut,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bindMintingBatchWithTx = `-- name: BindMintingBatchWithTx :exec
WITH target_batch AS (
    SELECT batch_id
    FROM asset_minting_batches batches
    JOIN internal_keys keys
        ON batches.batch_id = keys.key_id
    WHERE keys.raw_key = $1
)
UPDATE asset_minting_batches 
SET minting_tx_psbt = $2, change_output_index = $3, genesis_id = $4
WHERE batch_id IN (SELECT batch_id FROM target_batch)
`

type BindMintingBatchWithTxParams struct {
	RawKey            []byte
	MintingTxPsbt     []byte
	ChangeOutputIndex sql.NullInt32
	GenesisID         sql.NullInt32
}

func (q *Queries) BindMintingBatchWithTx(ctx context.Context, arg BindMintingBatchWithTxParams) error {
	_, err := q.db.ExecContext(ctx, bindMintingBatchWithTx,
		arg.RawKey,
		arg.MintingTxPsbt,
		arg.ChangeOutputIndex,
		arg.GenesisID,
	)
	return err
}

const confirmChainAnchorTx = `-- name: ConfirmChainAnchorTx :exec
WITH target_txn(txn_id) AS (
    SELECT chain_txns.txn_id
    FROM chain_txns
    JOIN managed_utxos utxos
        ON utxos.txn_id = chain_txns.txn_id
    WHERE utxos.outpoint = $1
)
UPDATE chain_txns
SET block_height = $2, block_hash = $3, tx_index = $4
WHERE txn_id in (SELECT txn_id FROM target_txn)
`

type ConfirmChainAnchorTxParams struct {
	Outpoint    []byte
	BlockHeight sql.NullInt32
	BlockHash   []byte
	TxIndex     sql.NullInt32
}

func (q *Queries) ConfirmChainAnchorTx(ctx context.Context, arg ConfirmChainAnchorTxParams) error {
	_, err := q.db.ExecContext(ctx, confirmChainAnchorTx,
		arg.Outpoint,
		arg.BlockHeight,
		arg.BlockHash,
		arg.TxIndex,
	)
	return err
}

const confirmChainTx = `-- name: ConfirmChainTx :exec
WITH target_txn(txn_id) AS (
    SELECT anchor_tx_id
    FROM genesis_points points
    JOIN asset_minting_batches batches
        ON batches.genesis_id = points.genesis_id
    JOIN internal_keys keys
        ON batches.batch_id = keys.key_id
    WHERE keys.raw_key = $1
)
UPDATE chain_txns
SET block_height = $2, block_hash = $3, tx_index = $4
WHERE txn_id in (SELECT txn_id FROM target_txn)
`

type ConfirmChainTxParams struct {
	RawKey      []byte
	BlockHeight sql.NullInt32
	BlockHash   []byte
	TxIndex     sql.NullInt32
}

func (q *Queries) ConfirmChainTx(ctx context.Context, arg ConfirmChainTxParams) error {
	_, err := q.db.ExecContext(ctx, confirmChainTx,
		arg.RawKey,
		arg.BlockHeight,
		arg.BlockHash,
		arg.TxIndex,
	)
	return err
}

const deleteManagedUTXO = `-- name: DeleteManagedUTXO :exec
DELETE FROM managed_utxos
WHERE outpoint = $1
`

func (q *Queries) DeleteManagedUTXO(ctx context.Context, outpoint []byte) error {
	_, err := q.db.ExecContext(ctx, deleteManagedUTXO, outpoint)
	return err
}

const fetchAssetProof = `-- name: FetchAssetProof :one
WITH asset_info AS (
    SELECT assets.asset_id, script_keys.tweaked_script_key
    FROM assets
    JOIN script_keys
        ON assets.script_key_id = script_keys.script_key_id
    WHERE script_keys.tweaked_script_key = $1
)
SELECT asset_info.tweaked_script_key AS script_key, asset_proofs.proof_file,
       asset_info.asset_id as asset_id, asset_proofs.proof_id as proof_id
FROM asset_proofs
JOIN asset_info
    ON asset_info.asset_id = asset_proofs.asset_id
`

type FetchAssetProofRow struct {
	ScriptKey []byte
	ProofFile []byte
	AssetID   int32
	ProofID   int32
}

func (q *Queries) FetchAssetProof(ctx context.Context, tweakedScriptKey []byte) (FetchAssetProofRow, error) {
	row := q.db.QueryRowContext(ctx, fetchAssetProof, tweakedScriptKey)
	var i FetchAssetProofRow
	err := row.Scan(
		&i.ScriptKey,
		&i.ProofFile,
		&i.AssetID,
		&i.ProofID,
	)
	return i, err
}

const fetchAssetProofs = `-- name: FetchAssetProofs :many
WITH asset_info AS (
    SELECT assets.asset_id, script_keys.tweaked_script_key
    FROM assets
    JOIN script_keys
        ON assets.script_key_id = script_keys.script_key_id
)
SELECT asset_info.tweaked_script_key AS script_key, asset_proofs.proof_file
FROM asset_proofs
JOIN asset_info
    ON asset_info.asset_id = asset_proofs.asset_id
`

type FetchAssetProofsRow struct {
	ScriptKey []byte
	ProofFile []byte
}

func (q *Queries) FetchAssetProofs(ctx context.Context) ([]FetchAssetProofsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAssetProofs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchAssetProofsRow
	for rows.Next() {
		var i FetchAssetProofsRow
		if err := rows.Scan(&i.ScriptKey, &i.ProofFile); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchAssetWitnesses = `-- name: FetchAssetWitnesses :many
SELECT 
    assets.asset_id, prev_out_point, prev_asset_id, prev_script_key, 
    witness_stack, split_commitment_proof
FROM asset_witnesses
JOIN assets
    ON asset_witnesses.asset_id = assets.asset_id
WHERE (
    (assets.asset_id = $1) OR ($1 IS NULL)
)
`

type FetchAssetWitnessesRow struct {
	AssetID              int32
	PrevOutPoint         []byte
	PrevAssetID          []byte
	PrevScriptKey        []byte
	WitnessStack         []byte
	SplitCommitmentProof []byte
}

func (q *Queries) FetchAssetWitnesses(ctx context.Context, assetID sql.NullInt32) ([]FetchAssetWitnessesRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAssetWitnesses, assetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchAssetWitnessesRow
	for rows.Next() {
		var i FetchAssetWitnessesRow
		if err := rows.Scan(
			&i.AssetID,
			&i.PrevOutPoint,
			&i.PrevAssetID,
			&i.PrevScriptKey,
			&i.WitnessStack,
			&i.SplitCommitmentProof,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchAssetsByAnchorTx = `-- name: FetchAssetsByAnchorTx :many
SELECT asset_id, genesis_id, version, script_key_id, asset_group_sig_id, script_version, amount, lock_time, relative_lock_time, split_commitment_root_hash, split_commitment_root_value, anchor_utxo_id
FROM assets
WHERE anchor_utxo_id = $1
`

func (q *Queries) FetchAssetsByAnchorTx(ctx context.Context, anchorUtxoID sql.NullInt32) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, fetchAssetsByAnchorTx, anchorUtxoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.AssetID,
			&i.GenesisID,
			&i.Version,
			&i.ScriptKeyID,
			&i.AssetGroupSigID,
			&i.ScriptVersion,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.SplitCommitmentRootHash,
			&i.SplitCommitmentRootValue,
			&i.AnchorUtxoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchAssetsForBatch = `-- name: FetchAssetsForBatch :many
WITH genesis_info AS (
    -- This CTE is used to fetch the base asset information from disk based on
    -- the raw key of the batch that will ultimately create this set of assets.
    -- To do so, we'll need to traverse a few tables to join the set of assets
    -- with the genesis points, then with the batches that reference this
    -- points, to the internal key that reference the batch, then restricted
    -- for internal keys that match our main batch key.
    SELECT
        gen_asset_id, asset_id, asset_tag, meta_data, output_index, asset_type,
        genesis_points.prev_out prev_out
    FROM genesis_assets
    JOIN genesis_points
        ON genesis_assets.genesis_point_id = genesis_points.genesis_id
    JOIN asset_minting_batches batches
        ON genesis_points.genesis_id = batches.genesis_id
    JOIN internal_keys keys
        ON keys.key_id = batches.batch_id
    WHERE keys.raw_key = $1
), key_group_info AS (
    -- This CTE is used to perform a series of joins that allow us to extract
    -- the group key information, as well as the group sigs for the series of
    -- assets we care about. We obtain only the assets found in the batch
    -- above, with the WHERE query at the bottom.
    SELECT 
        sig_id, gen_asset_id, genesis_sig, tweaked_group_key, raw_key, key_index, key_family
    FROM asset_group_sigs sigs
    JOIN asset_groups groups
        ON sigs.group_key_id = groups.group_id
    JOIN internal_keys keys
        ON keys.key_id = groups.internal_key_id
    -- TODO(roasbeef): or can join do this below?
    WHERE sigs.gen_asset_id IN (SELECT gen_asset_id FROM genesis_info)
)
SELECT 
    version, script_keys.tweak, script_keys.tweaked_script_key, 
    internal_keys.raw_key AS script_key_raw, internal_keys.key_family AS script_key_fam,
    internal_keys.key_index AS script_key_index, key_group_info.genesis_sig, 
    key_group_info.tweaked_group_key, key_group_info.raw_key AS group_key_raw,
    key_group_info.key_family AS group_key_family, key_group_info.key_index AS group_key_index,
    script_version, amount, lock_time, relative_lock_time, 
    genesis_info.asset_id, genesis_info.asset_tag, genesis_info.meta_data, 
    genesis_info.output_index AS genesis_output_index, genesis_info.asset_type,
    genesis_info.prev_out AS genesis_prev_out
FROM assets
JOIN genesis_info
    ON assets.genesis_id = genesis_info.gen_asset_id
LEFT JOIN key_group_info
    ON assets.genesis_id = key_group_info.gen_asset_id
JOIN script_keys
    on assets.script_key_id = script_keys.script_key_id
JOIN internal_keys
    ON script_keys.internal_key_id = internal_keys.key_id
`

type FetchAssetsForBatchRow struct {
	Version            int32
	Tweak              []byte
	TweakedScriptKey   []byte
	ScriptKeyRaw       []byte
	ScriptKeyFam       int32
	ScriptKeyIndex     int32
	GenesisSig         []byte
	TweakedGroupKey    []byte
	GroupKeyRaw        []byte
	GroupKeyFamily     sql.NullInt32
	GroupKeyIndex      sql.NullInt32
	ScriptVersion      int32
	Amount             int64
	LockTime           sql.NullInt32
	RelativeLockTime   sql.NullInt32
	AssetID            []byte
	AssetTag           string
	MetaData           []byte
	GenesisOutputIndex int32
	AssetType          int16
	GenesisPrevOut     []byte
}

// We use a LEFT JOIN here as not every asset has a group key, so this'll
// generate rows that have NULL values for the faily key fields if an asset
// doesn't have a group key. See the comment in fetchAssetSprouts for a work
// around that needs to be used with this query until a sqlc bug is fixed.
func (q *Queries) FetchAssetsForBatch(ctx context.Context, rawKey []byte) ([]FetchAssetsForBatchRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAssetsForBatch, rawKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchAssetsForBatchRow
	for rows.Next() {
		var i FetchAssetsForBatchRow
		if err := rows.Scan(
			&i.Version,
			&i.Tweak,
			&i.TweakedScriptKey,
			&i.ScriptKeyRaw,
			&i.ScriptKeyFam,
			&i.ScriptKeyIndex,
			&i.GenesisSig,
			&i.TweakedGroupKey,
			&i.GroupKeyRaw,
			&i.GroupKeyFamily,
			&i.GroupKeyIndex,
			&i.ScriptVersion,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.AssetID,
			&i.AssetTag,
			&i.MetaData,
			&i.GenesisOutputIndex,
			&i.AssetType,
			&i.GenesisPrevOut,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchChainTx = `-- name: FetchChainTx :one
SELECT txn_id, txid, chain_fees, raw_tx, block_height, block_hash, tx_index
FROM chain_txns
WHERE txid = $1
`

func (q *Queries) FetchChainTx(ctx context.Context, txid []byte) (ChainTxn, error) {
	row := q.db.QueryRowContext(ctx, fetchChainTx, txid)
	var i ChainTxn
	err := row.Scan(
		&i.TxnID,
		&i.Txid,
		&i.ChainFees,
		&i.RawTx,
		&i.BlockHeight,
		&i.BlockHash,
		&i.TxIndex,
	)
	return i, err
}

const fetchGenesisByID = `-- name: FetchGenesisByID :one
SELECT
    asset_id, asset_tag, meta_data, output_index, asset_type,
    genesis_points.prev_out prev_out
FROM genesis_assets
JOIN genesis_points
  ON genesis_assets.genesis_point_id = genesis_points.genesis_id
WHERE gen_asset_id = $1
`

type FetchGenesisByIDRow struct {
	AssetID     []byte
	AssetTag    string
	MetaData    []byte
	OutputIndex int32
	AssetType   int16
	PrevOut     []byte
}

func (q *Queries) FetchGenesisByID(ctx context.Context, genAssetID int32) (FetchGenesisByIDRow, error) {
	row := q.db.QueryRowContext(ctx, fetchGenesisByID, genAssetID)
	var i FetchGenesisByIDRow
	err := row.Scan(
		&i.AssetID,
		&i.AssetTag,
		&i.MetaData,
		&i.OutputIndex,
		&i.AssetType,
		&i.PrevOut,
	)
	return i, err
}

const fetchGenesisID = `-- name: FetchGenesisID :one
WITH target_point(genesis_id) AS (
    SELECT genesis_id
    FROM genesis_points
    WHERE genesis_points.prev_out = $6
)
SELECT gen_asset_id
FROM genesis_assets
WHERE (
    genesis_assets.genesis_point_id IN (SELECT genesis_id FROM target_point) AND
    genesis_assets.asset_id = $1 AND
    genesis_assets.asset_tag = $2 AND
    genesis_assets.meta_data = $3 AND
    genesis_assets.output_index = $4 AND
    genesis_assets.asset_type = $5
)
`

type FetchGenesisIDParams struct {
	AssetID     []byte
	AssetTag    string
	MetaData    []byte
	OutputIndex int32
	AssetType   int16
	PrevOut     []byte
}

func (q *Queries) FetchGenesisID(ctx context.Context, arg FetchGenesisIDParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, fetchGenesisID,
		arg.AssetID,
		arg.AssetTag,
		arg.MetaData,
		arg.OutputIndex,
		arg.AssetType,
		arg.PrevOut,
	)
	var gen_asset_id int32
	err := row.Scan(&gen_asset_id)
	return gen_asset_id, err
}

const fetchGenesisPointByAnchorTx = `-- name: FetchGenesisPointByAnchorTx :one
SELECT genesis_id, prev_out, anchor_tx_id 
FROM genesis_points
WHERE anchor_tx_id = $1
`

func (q *Queries) FetchGenesisPointByAnchorTx(ctx context.Context, anchorTxID sql.NullInt32) (GenesisPoint, error) {
	row := q.db.QueryRowContext(ctx, fetchGenesisPointByAnchorTx, anchorTxID)
	var i GenesisPoint
	err := row.Scan(&i.GenesisID, &i.PrevOut, &i.AnchorTxID)
	return i, err
}

const fetchGroupByGenesis = `-- name: FetchGroupByGenesis :one
SELECT
    key_group_info_view.tweaked_group_key AS tweaked_group_key,
    key_group_info_view.raw_key AS raw_key,
    key_group_info_view.key_index AS key_index,
    key_group_info_view.key_family AS key_family
FROM key_group_info_view
WHERE (
    key_group_info_view.gen_asset_id = $1
)
`

type FetchGroupByGenesisRow struct {
	TweakedGroupKey []byte
	RawKey          []byte
	KeyIndex        int32
	KeyFamily       int32
}

func (q *Queries) FetchGroupByGenesis(ctx context.Context, genesisID int32) (FetchGroupByGenesisRow, error) {
	row := q.db.QueryRowContext(ctx, fetchGroupByGenesis, genesisID)
	var i FetchGroupByGenesisRow
	err := row.Scan(
		&i.TweakedGroupKey,
		&i.RawKey,
		&i.KeyIndex,
		&i.KeyFamily,
	)
	return i, err
}

const fetchGroupByGroupKey = `-- name: FetchGroupByGroupKey :one
SELECT 
    key_group_info_view.gen_asset_id AS gen_asset_id,
    key_group_info_view.raw_key AS raw_key,
    key_group_info_view.key_index AS key_index,
    key_group_info_view.key_family AS key_family
FROM key_group_info_view
WHERE (
    key_group_info_view.tweaked_group_key = $1
)
ORDER BY key_group_info_view.sig_id
LIMIT 1
`

type FetchGroupByGroupKeyRow struct {
	GenAssetID int32
	RawKey     []byte
	KeyIndex   int32
	KeyFamily  int32
}

// Sort and limit to return the genesis ID for initial genesis of the group.
func (q *Queries) FetchGroupByGroupKey(ctx context.Context, groupKey []byte) (FetchGroupByGroupKeyRow, error) {
	row := q.db.QueryRowContext(ctx, fetchGroupByGroupKey, groupKey)
	var i FetchGroupByGroupKeyRow
	err := row.Scan(
		&i.GenAssetID,
		&i.RawKey,
		&i.KeyIndex,
		&i.KeyFamily,
	)
	return i, err
}

const fetchGroupedAssets = `-- name: FetchGroupedAssets :many
SELECT
    assets.asset_id AS asset_primary_key, amount, lock_time, relative_lock_time, 
    genesis_info_view.asset_id AS asset_id,
    genesis_info_view.asset_tag,
    genesis_info_view.meta_data, 
    genesis_info_view.asset_type,
    key_group_info_view.tweaked_group_key
FROM assets
JOIN genesis_info_view
    ON assets.genesis_id = genesis_info_view.gen_asset_id
JOIN key_group_info_view
    ON assets.genesis_id = key_group_info_view.gen_asset_id
`

type FetchGroupedAssetsRow struct {
	AssetPrimaryKey  int32
	Amount           int64
	LockTime         sql.NullInt32
	RelativeLockTime sql.NullInt32
	AssetID          []byte
	AssetTag         string
	MetaData         []byte
	AssetType        int16
	TweakedGroupKey  []byte
}

func (q *Queries) FetchGroupedAssets(ctx context.Context) ([]FetchGroupedAssetsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchGroupedAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchGroupedAssetsRow
	for rows.Next() {
		var i FetchGroupedAssetsRow
		if err := rows.Scan(
			&i.AssetPrimaryKey,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.AssetID,
			&i.AssetTag,
			&i.MetaData,
			&i.AssetType,
			&i.TweakedGroupKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchManagedUTXO = `-- name: FetchManagedUTXO :one
SELECT utxo_id, outpoint, amt_sats, internal_key_id, tapscript_sibling, taro_root, txn_id, key_id, raw_key, key_family, key_index
FROM managed_utxos utxos
JOIN internal_keys keys
    ON utxos.internal_key_id = keys.key_id
WHERE (
    (txn_id = $1 OR $1 IS NULL) AND
    (utxos.outpoint = $2 OR $2 IS NULL)
)
`

type FetchManagedUTXOParams struct {
	TxnID    sql.NullInt32
	Outpoint []byte
}

type FetchManagedUTXORow struct {
	UtxoID           int32
	Outpoint         []byte
	AmtSats          int64
	InternalKeyID    int32
	TapscriptSibling []byte
	TaroRoot         []byte
	TxnID            int32
	KeyID            int32
	RawKey           []byte
	KeyFamily        int32
	KeyIndex         int32
}

func (q *Queries) FetchManagedUTXO(ctx context.Context, arg FetchManagedUTXOParams) (FetchManagedUTXORow, error) {
	row := q.db.QueryRowContext(ctx, fetchManagedUTXO, arg.TxnID, arg.Outpoint)
	var i FetchManagedUTXORow
	err := row.Scan(
		&i.UtxoID,
		&i.Outpoint,
		&i.AmtSats,
		&i.InternalKeyID,
		&i.TapscriptSibling,
		&i.TaroRoot,
		&i.TxnID,
		&i.KeyID,
		&i.RawKey,
		&i.KeyFamily,
		&i.KeyIndex,
	)
	return i, err
}

const fetchManagedUTXOs = `-- name: FetchManagedUTXOs :many
SELECT utxo_id, outpoint, amt_sats, internal_key_id, tapscript_sibling, taro_root, txn_id, key_id, raw_key, key_family, key_index
FROM managed_utxos utxos
JOIN internal_keys keys
    ON utxos.internal_key_id = keys.key_id
`

type FetchManagedUTXOsRow struct {
	UtxoID           int32
	Outpoint         []byte
	AmtSats          int64
	InternalKeyID    int32
	TapscriptSibling []byte
	TaroRoot         []byte
	TxnID            int32
	KeyID            int32
	RawKey           []byte
	KeyFamily        int32
	KeyIndex         int32
}

func (q *Queries) FetchManagedUTXOs(ctx context.Context) ([]FetchManagedUTXOsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchManagedUTXOs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchManagedUTXOsRow
	for rows.Next() {
		var i FetchManagedUTXOsRow
		if err := rows.Scan(
			&i.UtxoID,
			&i.Outpoint,
			&i.AmtSats,
			&i.InternalKeyID,
			&i.TapscriptSibling,
			&i.TaroRoot,
			&i.TxnID,
			&i.KeyID,
			&i.RawKey,
			&i.KeyFamily,
			&i.KeyIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchMintingBatchesByInverseState = `-- name: FetchMintingBatchesByInverseState :many
SELECT batch_id, batch_state, minting_tx_psbt, change_output_index, genesis_id, height_hint, creation_time_unix, key_id, raw_key, key_family, key_index
FROM asset_minting_batches batches
JOIN internal_keys keys
    ON batches.batch_id = keys.key_id
WHERE batches.batch_state != $1
`

type FetchMintingBatchesByInverseStateRow struct {
	BatchID           int32
	BatchState        int16
	MintingTxPsbt     []byte
	ChangeOutputIndex sql.NullInt32
	GenesisID         sql.NullInt32
	HeightHint        int32
	CreationTimeUnix  time.Time
	KeyID             int32
	RawKey            []byte
	KeyFamily         int32
	KeyIndex          int32
}

func (q *Queries) FetchMintingBatchesByInverseState(ctx context.Context, batchState int16) ([]FetchMintingBatchesByInverseStateRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchMintingBatchesByInverseState, batchState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchMintingBatchesByInverseStateRow
	for rows.Next() {
		var i FetchMintingBatchesByInverseStateRow
		if err := rows.Scan(
			&i.BatchID,
			&i.BatchState,
			&i.MintingTxPsbt,
			&i.ChangeOutputIndex,
			&i.GenesisID,
			&i.HeightHint,
			&i.CreationTimeUnix,
			&i.KeyID,
			&i.RawKey,
			&i.KeyFamily,
			&i.KeyIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchScriptKeyIDByTweakedKey = `-- name: FetchScriptKeyIDByTweakedKey :one
SELECT script_key_id
FROM script_keys
WHERE tweaked_script_key = $1
`

func (q *Queries) FetchScriptKeyIDByTweakedKey(ctx context.Context, tweakedScriptKey []byte) (int32, error) {
	row := q.db.QueryRowContext(ctx, fetchScriptKeyIDByTweakedKey, tweakedScriptKey)
	var script_key_id int32
	err := row.Scan(&script_key_id)
	return script_key_id, err
}

const fetchSeedlingsForBatch = `-- name: FetchSeedlingsForBatch :many
WITH target_batch(batch_id) AS (
    SELECT batch_id
    FROM asset_minting_batches batches
    JOIN internal_keys keys
        ON batches.batch_id = keys.key_id
    WHERE keys.raw_key = $1
)
SELECT seedling_id, asset_name, asset_type, asset_supply, asset_meta,
    emission_enabled, batch_id, group_genesis_id
FROM asset_seedlings 
WHERE asset_seedlings.batch_id in (SELECT batch_id FROM target_batch)
`

func (q *Queries) FetchSeedlingsForBatch(ctx context.Context, rawKey []byte) ([]AssetSeedling, error) {
	rows, err := q.db.QueryContext(ctx, fetchSeedlingsForBatch, rawKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssetSeedling
	for rows.Next() {
		var i AssetSeedling
		if err := rows.Scan(
			&i.SeedlingID,
			&i.AssetName,
			&i.AssetType,
			&i.AssetSupply,
			&i.AssetMeta,
			&i.EmissionEnabled,
			&i.BatchID,
			&i.GroupGenesisID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const genesisAssets = `-- name: GenesisAssets :many
SELECT gen_asset_id, asset_id, asset_tag, meta_data, output_index, asset_type, genesis_point_id 
FROM genesis_assets
`

func (q *Queries) GenesisAssets(ctx context.Context) ([]GenesisAsset, error) {
	rows, err := q.db.QueryContext(ctx, genesisAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GenesisAsset
	for rows.Next() {
		var i GenesisAsset
		if err := rows.Scan(
			&i.GenAssetID,
			&i.AssetID,
			&i.AssetTag,
			&i.MetaData,
			&i.OutputIndex,
			&i.AssetType,
			&i.GenesisPointID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const genesisPoints = `-- name: GenesisPoints :many
SELECT genesis_id, prev_out, anchor_tx_id 
FROM genesis_points
`

func (q *Queries) GenesisPoints(ctx context.Context) ([]GenesisPoint, error) {
	rows, err := q.db.QueryContext(ctx, genesisPoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GenesisPoint
	for rows.Next() {
		var i GenesisPoint
		if err := rows.Scan(&i.GenesisID, &i.PrevOut, &i.AnchorTxID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAssetSeedling = `-- name: InsertAssetSeedling :exec
INSERT INTO asset_seedlings (
    asset_name, asset_type, asset_supply, asset_meta,
    emission_enabled, batch_id, group_genesis_id
) VALUES (
   $1, $2, $3, $4, $5, $6, $7
)
`

type InsertAssetSeedlingParams struct {
	AssetName       string
	AssetType       int16
	AssetSupply     int64
	AssetMeta       []byte
	EmissionEnabled bool
	BatchID         int32
	GroupGenesisID  sql.NullInt32
}

func (q *Queries) InsertAssetSeedling(ctx context.Context, arg InsertAssetSeedlingParams) error {
	_, err := q.db.ExecContext(ctx, insertAssetSeedling,
		arg.AssetName,
		arg.AssetType,
		arg.AssetSupply,
		arg.AssetMeta,
		arg.EmissionEnabled,
		arg.BatchID,
		arg.GroupGenesisID,
	)
	return err
}

const insertAssetSeedlingIntoBatch = `-- name: InsertAssetSeedlingIntoBatch :exec
WITH target_key_id AS (
    -- We use this CTE to fetch the key_id of the internal key that's
    -- associated with a given batch. This can only return one value in
    -- practice since raw_key is a unique field. We then use this value below
    -- to insert the seedling and point to the proper batch_id, which is a
    -- foreign key that references the key_id of the internal key.
    SELECT key_id 
    FROM internal_keys keys
    WHERE keys.raw_key = $1
)
INSERT INTO asset_seedlings(
    asset_name, asset_type, asset_supply, asset_meta,
    emission_enabled, batch_id, group_genesis_id
) VALUES (
    $2, $3, $4, $5, $6,
    (SELECT key_id FROM target_key_id), $7
)
`

type InsertAssetSeedlingIntoBatchParams struct {
	RawKey          []byte
	AssetName       string
	AssetType       int16
	AssetSupply     int64
	AssetMeta       []byte
	EmissionEnabled bool
	GroupGenesisID  sql.NullInt32
}

func (q *Queries) InsertAssetSeedlingIntoBatch(ctx context.Context, arg InsertAssetSeedlingIntoBatchParams) error {
	_, err := q.db.ExecContext(ctx, insertAssetSeedlingIntoBatch,
		arg.RawKey,
		arg.AssetName,
		arg.AssetType,
		arg.AssetSupply,
		arg.AssetMeta,
		arg.EmissionEnabled,
		arg.GroupGenesisID,
	)
	return err
}

const insertAssetWitness = `-- name: InsertAssetWitness :exec
INSERT INTO asset_witnesses (
    asset_id, prev_out_point, prev_asset_id, prev_script_key, witness_stack,
    split_commitment_proof
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type InsertAssetWitnessParams struct {
	AssetID              int32
	PrevOutPoint         []byte
	PrevAssetID          []byte
	PrevScriptKey        []byte
	WitnessStack         []byte
	SplitCommitmentProof []byte
}

func (q *Queries) InsertAssetWitness(ctx context.Context, arg InsertAssetWitnessParams) error {
	_, err := q.db.ExecContext(ctx, insertAssetWitness,
		arg.AssetID,
		arg.PrevOutPoint,
		arg.PrevAssetID,
		arg.PrevScriptKey,
		arg.WitnessStack,
		arg.SplitCommitmentProof,
	)
	return err
}

const insertNewAsset = `-- name: InsertNewAsset :one
INSERT INTO assets (
    genesis_id, version, script_key_id, asset_group_sig_id, script_version, 
    amount, lock_time, relative_lock_time, anchor_utxo_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING asset_id
`

type InsertNewAssetParams struct {
	GenesisID        int32
	Version          int32
	ScriptKeyID      int32
	AssetGroupSigID  sql.NullInt32
	ScriptVersion    int32
	Amount           int64
	LockTime         sql.NullInt32
	RelativeLockTime sql.NullInt32
	AnchorUtxoID     sql.NullInt32
}

func (q *Queries) InsertNewAsset(ctx context.Context, arg InsertNewAssetParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertNewAsset,
		arg.GenesisID,
		arg.Version,
		arg.ScriptKeyID,
		arg.AssetGroupSigID,
		arg.ScriptVersion,
		arg.Amount,
		arg.LockTime,
		arg.RelativeLockTime,
		arg.AnchorUtxoID,
	)
	var asset_id int32
	err := row.Scan(&asset_id)
	return asset_id, err
}

const newMintingBatch = `-- name: NewMintingBatch :exec
INSERT INTO asset_minting_batches (
    batch_state, batch_id, height_hint, creation_time_unix
) VALUES (0, $1, $2, $3)
`

type NewMintingBatchParams struct {
	BatchID          int32
	HeightHint       int32
	CreationTimeUnix time.Time
}

func (q *Queries) NewMintingBatch(ctx context.Context, arg NewMintingBatchParams) error {
	_, err := q.db.ExecContext(ctx, newMintingBatch, arg.BatchID, arg.HeightHint, arg.CreationTimeUnix)
	return err
}

const queryAssetBalancesByAsset = `-- name: QueryAssetBalancesByAsset :many
SELECT
    genesis_info_view.asset_id, version, SUM(amount) balance,
    genesis_info_view.asset_tag, genesis_info_view.meta_data,
    genesis_info_view.asset_type, genesis_info_view.output_index,
    genesis_info_view.prev_out AS genesis_point
FROM assets
JOIN genesis_info_view
    ON assets.genesis_id = genesis_info_view.gen_asset_id AND
      (genesis_info_view.asset_id = $1 OR
        $1 IS NULL)
LEFT JOIN key_group_info_view
    ON assets.genesis_id = key_group_info_view.gen_asset_id
GROUP BY assets.genesis_id, genesis_info_view.asset_id,
         version, genesis_info_view.asset_tag, genesis_info_view.meta_data,
         genesis_info_view.asset_type, genesis_info_view.output_index,
         genesis_info_view.prev_out
`

type QueryAssetBalancesByAssetRow struct {
	AssetID      []byte
	Version      int32
	Balance      int64
	AssetTag     string
	MetaData     []byte
	AssetType    int16
	OutputIndex  int32
	GenesisPoint []byte
}

// We use a LEFT JOIN here as not every asset has a group key, so this'll
// generate rows that have NULL values for the group key fields if an asset
// doesn't have a group key. See the comment in fetchAssetSprouts for a work
// around that needs to be used with this query until a sqlc bug is fixed.
func (q *Queries) QueryAssetBalancesByAsset(ctx context.Context, assetIDFilter []byte) ([]QueryAssetBalancesByAssetRow, error) {
	rows, err := q.db.QueryContext(ctx, queryAssetBalancesByAsset, assetIDFilter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryAssetBalancesByAssetRow
	for rows.Next() {
		var i QueryAssetBalancesByAssetRow
		if err := rows.Scan(
			&i.AssetID,
			&i.Version,
			&i.Balance,
			&i.AssetTag,
			&i.MetaData,
			&i.AssetType,
			&i.OutputIndex,
			&i.GenesisPoint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryAssetBalancesByGroup = `-- name: QueryAssetBalancesByGroup :many
SELECT
    key_group_info_view.tweaked_group_key, SUM(amount) balance
FROM assets
JOIN key_group_info_view
    ON assets.genesis_id = key_group_info_view.gen_asset_id AND
      (key_group_info_view.tweaked_group_key = $1 OR
        $1 IS NULL)
GROUP BY key_group_info_view.tweaked_group_key
`

type QueryAssetBalancesByGroupRow struct {
	TweakedGroupKey []byte
	Balance         int64
}

func (q *Queries) QueryAssetBalancesByGroup(ctx context.Context, keyGroupFilter []byte) ([]QueryAssetBalancesByGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, queryAssetBalancesByGroup, keyGroupFilter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryAssetBalancesByGroupRow
	for rows.Next() {
		var i QueryAssetBalancesByGroupRow
		if err := rows.Scan(&i.TweakedGroupKey, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryAssets = `-- name: QueryAssets :many
SELECT
    assets.asset_id AS asset_primary_key, assets.genesis_id, version,
    script_keys.tweak AS script_key_tweak, 
    script_keys.tweaked_script_key, 
    internal_keys.raw_key AS script_key_raw,
    internal_keys.key_family AS script_key_fam,
    internal_keys.key_index AS script_key_index,
    key_group_info_view.genesis_sig, 
    key_group_info_view.tweaked_group_key,
    key_group_info_view.raw_key AS group_key_raw,
    key_group_info_view.key_family AS group_key_family,
    key_group_info_view.key_index AS group_key_index,
    script_version, amount, lock_time, relative_lock_time, 
    genesis_info_view.asset_id AS asset_id,
    genesis_info_view.asset_tag,
    genesis_info_view.meta_data, 
    genesis_info_view.output_index AS genesis_output_index,
    genesis_info_view.asset_type,
    genesis_info_view.prev_out AS genesis_prev_out,
    txns.raw_tx AS anchor_tx,
    txns.txid AS anchor_txid,
    txns.block_hash AS anchor_block_hash,
    utxos.outpoint AS anchor_outpoint,
    utxo_internal_keys.raw_key AS anchor_internal_key,
    split_commitment_root_hash, split_commitment_root_value
FROM assets
JOIN genesis_info_view
    ON assets.genesis_id = genesis_info_view.gen_asset_id AND
      (genesis_info_view.asset_id = $1 OR
        $1 IS NULL)
LEFT JOIN key_group_info_view
    ON assets.genesis_id = key_group_info_view.gen_asset_id
JOIN script_keys
    ON assets.script_key_id = script_keys.script_key_id AND
      (script_keys.tweaked_script_key = $2 OR
       $2 IS NULL)
JOIN internal_keys
    ON script_keys.internal_key_id = internal_keys.key_id
JOIN managed_utxos utxos
    ON assets.anchor_utxo_id = utxos.utxo_id AND
      (utxos.outpoint = $3 OR
       $3 IS NULL)
JOIN internal_keys utxo_internal_keys
    ON utxos.internal_key_id = utxo_internal_keys.key_id
JOIN chain_txns txns
    ON utxos.txn_id = txns.txn_id
WHERE (
    assets.amount >= COALESCE($4, assets.amount) AND
    (key_group_info_view.tweaked_group_key = $5 OR
      $5 IS NULL)
)
`

type QueryAssetsParams struct {
	AssetIDFilter    []byte
	TweakedScriptKey []byte
	AnchorPoint      []byte
	MinAmt           sql.NullInt64
	KeyGroupFilter   []byte
}

type QueryAssetsRow struct {
	AssetPrimaryKey          int32
	GenesisID                int32
	Version                  int32
	ScriptKeyTweak           []byte
	TweakedScriptKey         []byte
	ScriptKeyRaw             []byte
	ScriptKeyFam             int32
	ScriptKeyIndex           int32
	GenesisSig               []byte
	TweakedGroupKey          []byte
	GroupKeyRaw              []byte
	GroupKeyFamily           sql.NullInt32
	GroupKeyIndex            sql.NullInt32
	ScriptVersion            int32
	Amount                   int64
	LockTime                 sql.NullInt32
	RelativeLockTime         sql.NullInt32
	AssetID                  []byte
	AssetTag                 string
	MetaData                 []byte
	GenesisOutputIndex       int32
	AssetType                int16
	GenesisPrevOut           []byte
	AnchorTx                 []byte
	AnchorTxid               []byte
	AnchorBlockHash          []byte
	AnchorOutpoint           []byte
	AnchorInternalKey        []byte
	SplitCommitmentRootHash  []byte
	SplitCommitmentRootValue sql.NullInt64
}

// We use a LEFT JOIN here as not every asset has a group key, so this'll
// generate rows that have NULL values for the group key fields if an asset
// doesn't have a group key. See the comment in fetchAssetSprouts for a work
// around that needs to be used with this query until a sqlc bug is fixed.
// This clause is used to select specific assets for a asset ID, general
// channel balances, and also coin selection. We use the sqlc.narg feature to
// make the entire statement evaluate to true, if none of these extra args are
// specified.
func (q *Queries) QueryAssets(ctx context.Context, arg QueryAssetsParams) ([]QueryAssetsRow, error) {
	rows, err := q.db.QueryContext(ctx, queryAssets,
		arg.AssetIDFilter,
		arg.TweakedScriptKey,
		arg.AnchorPoint,
		arg.MinAmt,
		arg.KeyGroupFilter,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryAssetsRow
	for rows.Next() {
		var i QueryAssetsRow
		if err := rows.Scan(
			&i.AssetPrimaryKey,
			&i.GenesisID,
			&i.Version,
			&i.ScriptKeyTweak,
			&i.TweakedScriptKey,
			&i.ScriptKeyRaw,
			&i.ScriptKeyFam,
			&i.ScriptKeyIndex,
			&i.GenesisSig,
			&i.TweakedGroupKey,
			&i.GroupKeyRaw,
			&i.GroupKeyFamily,
			&i.GroupKeyIndex,
			&i.ScriptVersion,
			&i.Amount,
			&i.LockTime,
			&i.RelativeLockTime,
			&i.AssetID,
			&i.AssetTag,
			&i.MetaData,
			&i.GenesisOutputIndex,
			&i.AssetType,
			&i.GenesisPrevOut,
			&i.AnchorTx,
			&i.AnchorTxid,
			&i.AnchorBlockHash,
			&i.AnchorOutpoint,
			&i.AnchorInternalKey,
			&i.SplitCommitmentRootHash,
			&i.SplitCommitmentRootValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBatchGenesisTx = `-- name: UpdateBatchGenesisTx :exec
WITH target_batch AS (
    SELECT batch_id
    FROM asset_minting_batches batches
    JOIN internal_keys keys
        ON batches.batch_id = keys.key_id
    WHERE keys.raw_key = $1
)
UPDATE asset_minting_batches
SET minting_tx_psbt = $2
WHERE batch_id in (SELECT batch_id FROM target_batch)
`

type UpdateBatchGenesisTxParams struct {
	RawKey        []byte
	MintingTxPsbt []byte
}

func (q *Queries) UpdateBatchGenesisTx(ctx context.Context, arg UpdateBatchGenesisTxParams) error {
	_, err := q.db.ExecContext(ctx, updateBatchGenesisTx, arg.RawKey, arg.MintingTxPsbt)
	return err
}

const updateMintingBatchState = `-- name: UpdateMintingBatchState :exec
WITH target_batch AS (
    -- This CTE is used to fetch the ID of a batch, based on the serialized
    -- internal key associated with the batch. This internal key is as the
    -- actual Taproot internal key to ultimately mint the batch. This pattern
    -- is used in several other queries.
    SELECT batch_id
    FROM asset_minting_batches batches
    JOIN internal_keys keys
        ON batches.batch_id = keys.key_id
    WHERE keys.raw_key = $1
)
UPDATE asset_minting_batches 
SET batch_state = $2
WHERE batch_id in (SELECT batch_id FROM target_batch)
`

type UpdateMintingBatchStateParams struct {
	RawKey     []byte
	BatchState int16
}

func (q *Queries) UpdateMintingBatchState(ctx context.Context, arg UpdateMintingBatchStateParams) error {
	_, err := q.db.ExecContext(ctx, updateMintingBatchState, arg.RawKey, arg.BatchState)
	return err
}

const upsertAssetGroupKey = `-- name: UpsertAssetGroupKey :one
INSERT INTO asset_groups (
    tweaked_group_key, internal_key_id, genesis_point_id 
) VALUES (
    $1, $2, $3
) ON CONFLICT (tweaked_group_key)
    -- This is not a NOP, update the genesis point ID in case it wasn't set
    -- before.
    DO UPDATE SET genesis_point_id = EXCLUDED.genesis_point_id
RETURNING group_id
`

type UpsertAssetGroupKeyParams struct {
	TweakedGroupKey []byte
	InternalKeyID   int32
	GenesisPointID  int32
}

func (q *Queries) UpsertAssetGroupKey(ctx context.Context, arg UpsertAssetGroupKeyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertAssetGroupKey, arg.TweakedGroupKey, arg.InternalKeyID, arg.GenesisPointID)
	var group_id int32
	err := row.Scan(&group_id)
	return group_id, err
}

const upsertAssetGroupSig = `-- name: UpsertAssetGroupSig :one
INSERT INTO asset_group_sigs (
    genesis_sig, gen_asset_id, group_key_id
) VALUES (
    $1, $2, $3
) ON CONFLICT (gen_asset_id)
    DO UPDATE SET gen_asset_id = EXCLUDED.gen_asset_id
RETURNING sig_id
`

type UpsertAssetGroupSigParams struct {
	GenesisSig []byte
	GenAssetID int32
	GroupKeyID int32
}

func (q *Queries) UpsertAssetGroupSig(ctx context.Context, arg UpsertAssetGroupSigParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertAssetGroupSig, arg.GenesisSig, arg.GenAssetID, arg.GroupKeyID)
	var sig_id int32
	err := row.Scan(&sig_id)
	return sig_id, err
}

const upsertAssetProof = `-- name: UpsertAssetProof :exec
WITH target_asset(asset_id) AS (
    SELECT asset_id
    FROM assets
    JOIN script_keys 
        ON assets.script_key_id = script_keys.script_key_id
    WHERE script_keys.tweaked_script_key = $1
    -- TODO(guggero): Fix this by disallowing multiple assets with the same
    -- script key!
    LIMIT 1
)
INSERT INTO asset_proofs (
    asset_id, proof_file
) VALUES (
    (SELECT asset_id FROM target_asset), $2
) ON CONFLICT (asset_id)
    -- This is not a NOP, update the proof file in case it wasn't set before.
    DO UPDATE SET proof_file = EXCLUDED.proof_file
`

type UpsertAssetProofParams struct {
	TweakedScriptKey []byte
	ProofFile        []byte
}

func (q *Queries) UpsertAssetProof(ctx context.Context, arg UpsertAssetProofParams) error {
	_, err := q.db.ExecContext(ctx, upsertAssetProof, arg.TweakedScriptKey, arg.ProofFile)
	return err
}

const upsertChainTx = `-- name: UpsertChainTx :one
INSERT INTO chain_txns (
    txid, raw_tx, chain_fees, block_height, block_hash, tx_index
) VALUES (
    $1, $2, $3, $4, $5,
    $6
) ON CONFLICT (txid)
    -- Not a NOP but instead update any nullable fields that aren't null in the
    -- args.
    DO UPDATE SET block_height = COALESCE(EXCLUDED.block_height, chain_txns.block_height),
                  block_hash = COALESCE(EXCLUDED.block_hash, chain_txns.block_hash),
                  tx_index = COALESCE(EXCLUDED.tx_index, chain_txns.tx_index)
RETURNING txn_id
`

type UpsertChainTxParams struct {
	Txid        []byte
	RawTx       []byte
	ChainFees   int64
	BlockHeight sql.NullInt32
	BlockHash   []byte
	TxIndex     sql.NullInt32
}

func (q *Queries) UpsertChainTx(ctx context.Context, arg UpsertChainTxParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertChainTx,
		arg.Txid,
		arg.RawTx,
		arg.ChainFees,
		arg.BlockHeight,
		arg.BlockHash,
		arg.TxIndex,
	)
	var txn_id int32
	err := row.Scan(&txn_id)
	return txn_id, err
}

const upsertGenesisAsset = `-- name: UpsertGenesisAsset :one
INSERT INTO genesis_assets (
    asset_id, asset_tag, meta_data, output_index, asset_type, genesis_point_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (asset_tag)
    -- This is a NOP, asset_tag is the unique field that caused the conflict.
    DO UPDATE SET asset_tag = EXCLUDED.asset_tag
RETURNING gen_asset_id
`

type UpsertGenesisAssetParams struct {
	AssetID        []byte
	AssetTag       string
	MetaData       []byte
	OutputIndex    int32
	AssetType      int16
	GenesisPointID int32
}

func (q *Queries) UpsertGenesisAsset(ctx context.Context, arg UpsertGenesisAssetParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertGenesisAsset,
		arg.AssetID,
		arg.AssetTag,
		arg.MetaData,
		arg.OutputIndex,
		arg.AssetType,
		arg.GenesisPointID,
	)
	var gen_asset_id int32
	err := row.Scan(&gen_asset_id)
	return gen_asset_id, err
}

const upsertGenesisPoint = `-- name: UpsertGenesisPoint :one
INSERT INTO genesis_points(
    prev_out
) VALUES (
    $1
) ON CONFLICT (prev_out)
    -- This is a NOP, prev_out is the unique field that caused the conflict.
    DO UPDATE SET prev_out = EXCLUDED.prev_out
RETURNING genesis_id
`

func (q *Queries) UpsertGenesisPoint(ctx context.Context, prevOut []byte) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertGenesisPoint, prevOut)
	var genesis_id int32
	err := row.Scan(&genesis_id)
	return genesis_id, err
}

const upsertInternalKey = `-- name: UpsertInternalKey :one
INSERT INTO internal_keys (
    raw_key,  key_family, key_index
) VALUES (
    $1, $2, $3
) ON CONFLICT (raw_key)
    -- This is a NOP, raw_key is the unique field that caused the conflict.
    DO UPDATE SET raw_key = EXCLUDED.raw_key
RETURNING key_id
`

type UpsertInternalKeyParams struct {
	RawKey    []byte
	KeyFamily int32
	KeyIndex  int32
}

func (q *Queries) UpsertInternalKey(ctx context.Context, arg UpsertInternalKeyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertInternalKey, arg.RawKey, arg.KeyFamily, arg.KeyIndex)
	var key_id int32
	err := row.Scan(&key_id)
	return key_id, err
}

const upsertManagedUTXO = `-- name: UpsertManagedUTXO :one
WITH target_key(key_id) AS (
    SELECT key_id
    FROM internal_keys
    WHERE raw_key = $1
)
INSERT INTO managed_utxos (
    outpoint, amt_sats, internal_key_id, tapscript_sibling, taro_root, txn_id
) VALUES (
    $2, $3, (SELECT key_id FROM target_key), $4, $5, $6
) ON CONFLICT (outpoint)
   -- Not a NOP but instead update any nullable fields that aren't null in the
   -- args.
   DO UPDATE SET tapscript_sibling = COALESCE(EXCLUDED.tapscript_sibling, managed_utxos.tapscript_sibling)
RETURNING utxo_id
`

type UpsertManagedUTXOParams struct {
	RawKey           []byte
	Outpoint         []byte
	AmtSats          int64
	TapscriptSibling []byte
	TaroRoot         []byte
	TxnID            int32
}

func (q *Queries) UpsertManagedUTXO(ctx context.Context, arg UpsertManagedUTXOParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertManagedUTXO,
		arg.RawKey,
		arg.Outpoint,
		arg.AmtSats,
		arg.TapscriptSibling,
		arg.TaroRoot,
		arg.TxnID,
	)
	var utxo_id int32
	err := row.Scan(&utxo_id)
	return utxo_id, err
}

const upsertScriptKey = `-- name: UpsertScriptKey :one
INSERT INTO script_keys (
    internal_key_id, tweaked_script_key, tweak
) VALUES (
    $1, $2, $3
)  ON CONFLICT (tweaked_script_key)
    -- As a NOP, we just set the script key to the one that triggered the
    -- conflict.
    DO UPDATE SET tweaked_script_key = EXCLUDED.tweaked_script_key
RETURNING script_key_id
`

type UpsertScriptKeyParams struct {
	InternalKeyID    int32
	TweakedScriptKey []byte
	Tweak            []byte
}

func (q *Queries) UpsertScriptKey(ctx context.Context, arg UpsertScriptKeyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertScriptKey, arg.InternalKeyID, arg.TweakedScriptKey, arg.Tweak)
	var script_key_id int32
	err := row.Scan(&script_key_id)
	return script_key_id, err
}
