// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: addrs.sql

package sqlite

import (
	"context"
	"time"
)

const fetchAddrs = `-- name: FetchAddrs :many
SELECT 
    version, asset_id, fam_key, amount, asset_type, creation_time,
    script_keys.raw_key as raw_script_key, 
    script_keys.key_family AS script_key_family,
    script_keys.key_index AS script_key_index,
    taproot_keys.raw_key AS raw_taproot_key, 
    taproot_keys.key_family AS taproot_key_family,
    taproot_keys.key_index AS taproot_key_index
FROM addrs
JOIN internal_keys script_keys
    ON addrs.script_key_id = script_keys.key_id
JOIN internal_keys taproot_keys
    ON addrs.taproot_key_id = taproot_keys.key_id
WHERE creation_time >= $1
    AND creation_time <= $2
ORDER BY addrs.creation_time
LIMIT $4 OFFSET $3
`

type FetchAddrsParams struct {
	CreatedAfter  time.Time
	CreatedBefore time.Time
	NumOffset     int32
	NumLimit      int32
}

type FetchAddrsRow struct {
	Version          int16
	AssetID          []byte
	FamKey           []byte
	Amount           int64
	AssetType        int16
	CreationTime     time.Time
	RawScriptKey     []byte
	ScriptKeyFamily  int32
	ScriptKeyIndex   int32
	RawTaprootKey    []byte
	TaprootKeyFamily int32
	TaprootKeyIndex  int32
}

func (q *Queries) FetchAddrs(ctx context.Context, arg FetchAddrsParams) ([]FetchAddrsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAddrs,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.NumOffset,
		arg.NumLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchAddrsRow
	for rows.Next() {
		var i FetchAddrsRow
		if err := rows.Scan(
			&i.Version,
			&i.AssetID,
			&i.FamKey,
			&i.Amount,
			&i.AssetType,
			&i.CreationTime,
			&i.RawScriptKey,
			&i.ScriptKeyFamily,
			&i.ScriptKeyIndex,
			&i.RawTaprootKey,
			&i.TaprootKeyFamily,
			&i.TaprootKeyIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAddr = `-- name: InsertAddr :one
INSERT INTO addrs (
    version, asset_id, fam_key, script_key_id, taproot_key_id, amount, 
    asset_type, creation_time
) VALUES (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id
`

type InsertAddrParams struct {
	Version      int16
	AssetID      []byte
	FamKey       []byte
	ScriptKeyID  int32
	TaprootKeyID int32
	Amount       int64
	AssetType    int16
	CreationTime time.Time
}

func (q *Queries) InsertAddr(ctx context.Context, arg InsertAddrParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertAddr,
		arg.Version,
		arg.AssetID,
		arg.FamKey,
		arg.ScriptKeyID,
		arg.TaprootKeyID,
		arg.Amount,
		arg.AssetType,
		arg.CreationTime,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
