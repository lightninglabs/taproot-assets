// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: supply_syncer.sql

package sqlc

import (
	"context"
)

const FetchSupplySyncerLog = `-- name: FetchSupplySyncerLog :one
SELECT group_key, latest_sync_block_height
FROM supply_syncer_log
WHERE group_key = $1
`

type FetchSupplySyncerLogRow struct {
	GroupKey              []byte
	LatestSyncBlockHeight int32
}

func (q *Queries) FetchSupplySyncerLog(ctx context.Context, groupKey []byte) (FetchSupplySyncerLogRow, error) {
	row := q.db.QueryRowContext(ctx, FetchSupplySyncerLog, groupKey)
	var i FetchSupplySyncerLogRow
	err := row.Scan(&i.GroupKey, &i.LatestSyncBlockHeight)
	return i, err
}

const UpsertSupplySyncerLog = `-- name: UpsertSupplySyncerLog :exec
INSERT INTO supply_syncer_log (group_key, latest_sync_block_height)
VALUES ($1, $2)
ON CONFLICT (group_key)
    DO UPDATE SET latest_sync_block_height = EXCLUDED.latest_sync_block_height
`

type UpsertSupplySyncerLogParams struct {
	GroupKey              []byte
	LatestSyncBlockHeight int32
}

func (q *Queries) UpsertSupplySyncerLog(ctx context.Context, arg UpsertSupplySyncerLogParams) error {
	_, err := q.db.ExecContext(ctx, UpsertSupplySyncerLog, arg.GroupKey, arg.LatestSyncBlockHeight)
	return err
}
