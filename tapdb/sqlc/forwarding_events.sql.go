// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: forwarding_events.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const InsertForwardingEvent = `-- name: InsertForwardingEvent :exec
INSERT INTO forwarding_events (
    timestamp,
    incoming_htlc_id,
    outgoing_htlc_id,
    asset_id,
    amount_in_msat,
    amount_out_msat,
    rate_coefficient,
    rate_scale,
    fee_msat,
    incoming_channel_id,
    outgoing_channel_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
`

type InsertForwardingEventParams struct {
	Timestamp         time.Time
	IncomingHtlcID    int64
	OutgoingHtlcID    int64
	AssetID           []byte
	AmountInMsat      int64
	AmountOutMsat     int64
	RateCoefficient   []byte
	RateScale         int32
	FeeMsat           int64
	IncomingChannelID int64
	OutgoingChannelID int64
}

func (q *Queries) InsertForwardingEvent(ctx context.Context, arg InsertForwardingEventParams) error {
	_, err := q.db.ExecContext(ctx, InsertForwardingEvent,
		arg.Timestamp,
		arg.IncomingHtlcID,
		arg.OutgoingHtlcID,
		arg.AssetID,
		arg.AmountInMsat,
		arg.AmountOutMsat,
		arg.RateCoefficient,
		arg.RateScale,
		arg.FeeMsat,
		arg.IncomingChannelID,
		arg.OutgoingChannelID,
	)
	return err
}

const QueryForwardingEvents = `-- name: QueryForwardingEvents :many
SELECT
    id,
    timestamp,
    incoming_htlc_id,
    outgoing_htlc_id,
    asset_id,
    amount_in_msat,
    amount_out_msat,
    rate_coefficient,
    rate_scale,
    fee_msat,
    incoming_channel_id,
    outgoing_channel_id
FROM forwarding_events
WHERE
    ($1::TIMESTAMP IS NULL OR timestamp >= $1)
    AND
    ($2::TIMESTAMP IS NULL OR timestamp <= $2)
    AND
    ($3::BLOB IS NULL OR asset_id = $3)
ORDER BY
    CASE WHEN $4 = 0 THEN timestamp END ASC,
    CASE WHEN $4 = 1 THEN timestamp END DESC
LIMIT $6
OFFSET $5
`

type QueryForwardingEventsParams struct {
	StartTime     sql.NullTime
	EndTime       sql.NullTime
	AssetID       []byte
	SortDirection interface{}
	NumOffset     int32
	NumLimit      int32
}

func (q *Queries) QueryForwardingEvents(ctx context.Context, arg QueryForwardingEventsParams) ([]ForwardingEvent, error) {
	rows, err := q.db.QueryContext(ctx, QueryForwardingEvents,
		arg.StartTime,
		arg.EndTime,
		arg.AssetID,
		arg.SortDirection,
		arg.NumOffset,
		arg.NumLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ForwardingEvent
	for rows.Next() {
		var i ForwardingEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.IncomingHtlcID,
			&i.OutgoingHtlcID,
			&i.AssetID,
			&i.AmountInMsat,
			&i.AmountOutMsat,
			&i.RateCoefficient,
			&i.RateScale,
			&i.FeeMsat,
			&i.IncomingChannelID,
			&i.OutgoingChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
