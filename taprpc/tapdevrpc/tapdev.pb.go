// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: tapdevrpc/tapdev.proto

package tapdevrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProofTransferType is the type of proof transfer attempt. The transfer is
// either a proof delivery to the transfer counterparty or receiving a proof
// from the transfer counterparty. Note that the transfer counterparty is
// usually the proof courier service.
type ProofTransferType int32

const (
	// This value indicates that the proof transfer attempt is a delivery to the
	// transfer counterparty.
	ProofTransferType_PROOF_TRANSFER_TYPE_SEND ProofTransferType = 0
	// This value indicates that the proof transfer attempt is a receive from
	// the transfer counterparty.
	ProofTransferType_PROOF_TRANSFER_TYPE_RECEIVE ProofTransferType = 1
)

// Enum value maps for ProofTransferType.
var (
	ProofTransferType_name = map[int32]string{
		0: "PROOF_TRANSFER_TYPE_SEND",
		1: "PROOF_TRANSFER_TYPE_RECEIVE",
	}
	ProofTransferType_value = map[string]int32{
		"PROOF_TRANSFER_TYPE_SEND":    0,
		"PROOF_TRANSFER_TYPE_RECEIVE": 1,
	}
)

func (x ProofTransferType) Enum() *ProofTransferType {
	p := new(ProofTransferType)
	*p = x
	return p
}

func (x ProofTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_tapdevrpc_tapdev_proto_enumTypes[0].Descriptor()
}

func (ProofTransferType) Type() protoreflect.EnumType {
	return &file_tapdevrpc_tapdev_proto_enumTypes[0]
}

func (x ProofTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofTransferType.Descriptor instead.
func (ProofTransferType) EnumDescriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{0}
}

type ImportProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofFile    []byte `protobuf:"bytes,1,opt,name=proof_file,json=proofFile,proto3" json:"proof_file,omitempty"`
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
}

func (x *ImportProofRequest) Reset() {
	*x = ImportProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofRequest) ProtoMessage() {}

func (x *ImportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofRequest.ProtoReflect.Descriptor instead.
func (*ImportProofRequest) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{0}
}

func (x *ImportProofRequest) GetProofFile() []byte {
	if x != nil {
		return x.ProofFile
	}
	return nil
}

func (x *ImportProofRequest) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type ImportProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportProofResponse) Reset() {
	*x = ImportProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofResponse) ProtoMessage() {}

func (x *ImportProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofResponse.ProtoReflect.Descriptor instead.
func (*ImportProofResponse) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{1}
}

type SubscribeSendAssetEventNtfnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSendAssetEventNtfnsRequest) Reset() {
	*x = SubscribeSendAssetEventNtfnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSendAssetEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSendAssetEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeSendAssetEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSendAssetEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSendAssetEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{2}
}

type SendAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*SendAssetEvent_ExecuteSendStateEvent
	//	*SendAssetEvent_ProofTransferBackoffWaitEvent
	Event isSendAssetEvent_Event `protobuf_oneof:"event"`
}

func (x *SendAssetEvent) Reset() {
	*x = SendAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetEvent) ProtoMessage() {}

func (x *SendAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetEvent.ProtoReflect.Descriptor instead.
func (*SendAssetEvent) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{3}
}

func (m *SendAssetEvent) GetEvent() isSendAssetEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SendAssetEvent) GetExecuteSendStateEvent() *ExecuteSendStateEvent {
	if x, ok := x.GetEvent().(*SendAssetEvent_ExecuteSendStateEvent); ok {
		return x.ExecuteSendStateEvent
	}
	return nil
}

func (x *SendAssetEvent) GetProofTransferBackoffWaitEvent() *ProofTransferBackoffWaitEvent {
	if x, ok := x.GetEvent().(*SendAssetEvent_ProofTransferBackoffWaitEvent); ok {
		return x.ProofTransferBackoffWaitEvent
	}
	return nil
}

type isSendAssetEvent_Event interface {
	isSendAssetEvent_Event()
}

type SendAssetEvent_ExecuteSendStateEvent struct {
	// An event which indicates that a send state is about to be executed.
	ExecuteSendStateEvent *ExecuteSendStateEvent `protobuf:"bytes,1,opt,name=execute_send_state_event,json=executeSendStateEvent,proto3,oneof"`
}

type SendAssetEvent_ProofTransferBackoffWaitEvent struct {
	// An event which indicates that the proof transfer backoff wait period
	// will start imminently.
	ProofTransferBackoffWaitEvent *ProofTransferBackoffWaitEvent `protobuf:"bytes,2,opt,name=proof_transfer_backoff_wait_event,json=proofTransferBackoffWaitEvent,proto3,oneof"`
}

func (*SendAssetEvent_ExecuteSendStateEvent) isSendAssetEvent_Event() {}

func (*SendAssetEvent_ProofTransferBackoffWaitEvent) isSendAssetEvent_Event() {}

type ExecuteSendStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execute timestamp (microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The send state that is about to be executed.
	SendState string `protobuf:"bytes,2,opt,name=send_state,json=sendState,proto3" json:"send_state,omitempty"`
}

func (x *ExecuteSendStateEvent) Reset() {
	*x = ExecuteSendStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSendStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSendStateEvent) ProtoMessage() {}

func (x *ExecuteSendStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSendStateEvent.ProtoReflect.Descriptor instead.
func (*ExecuteSendStateEvent) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteSendStateEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecuteSendStateEvent) GetSendState() string {
	if x != nil {
		return x.SendState
	}
	return ""
}

type ProofTransferBackoffWaitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transfer attempt timestamp (microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Backoff is the active backoff wait duration.
	Backoff int64 `protobuf:"varint,2,opt,name=backoff,proto3" json:"backoff,omitempty"`
	// Tries counter is the number of tries we've made so far during the
	// course of the current backoff procedure to deliver the proof to the
	// receiver.
	TriesCounter int64 `protobuf:"varint,3,opt,name=tries_counter,json=triesCounter,proto3" json:"tries_counter,omitempty"`
	// The type of proof transfer attempt.
	TransferType ProofTransferType `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3,enum=tapdevrpc.ProofTransferType" json:"transfer_type,omitempty"`
}

func (x *ProofTransferBackoffWaitEvent) Reset() {
	*x = ProofTransferBackoffWaitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofTransferBackoffWaitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofTransferBackoffWaitEvent) ProtoMessage() {}

func (x *ProofTransferBackoffWaitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofTransferBackoffWaitEvent.ProtoReflect.Descriptor instead.
func (*ProofTransferBackoffWaitEvent) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{5}
}

func (x *ProofTransferBackoffWaitEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProofTransferBackoffWaitEvent) GetBackoff() int64 {
	if x != nil {
		return x.Backoff
	}
	return 0
}

func (x *ProofTransferBackoffWaitEvent) GetTriesCounter() int64 {
	if x != nil {
		return x.TriesCounter
	}
	return 0
}

func (x *ProofTransferBackoffWaitEvent) GetTransferType() ProofTransferType {
	if x != nil {
		return x.TransferType
	}
	return ProofTransferType_PROOF_TRANSFER_TYPE_SEND
}

type SubscribeReceiveAssetEventNtfnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeReceiveAssetEventNtfnsRequest) Reset() {
	*x = SubscribeReceiveAssetEventNtfnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReceiveAssetEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReceiveAssetEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeReceiveAssetEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReceiveAssetEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeReceiveAssetEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{6}
}

type AssetReceiveCompleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event creation timestamp.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The address that received the asset.
	Address *taprpc.Addr `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The outpoint of the transaction that was used to receive the asset.
	Outpoint string `protobuf:"bytes,3,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
}

func (x *AssetReceiveCompleteEvent) Reset() {
	*x = AssetReceiveCompleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReceiveCompleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReceiveCompleteEvent) ProtoMessage() {}

func (x *AssetReceiveCompleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReceiveCompleteEvent.ProtoReflect.Descriptor instead.
func (*AssetReceiveCompleteEvent) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{7}
}

func (x *AssetReceiveCompleteEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AssetReceiveCompleteEvent) GetAddress() *taprpc.Addr {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AssetReceiveCompleteEvent) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

type ReceiveAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*ReceiveAssetEvent_ProofTransferBackoffWaitEvent
	//	*ReceiveAssetEvent_AssetReceiveCompleteEvent
	Event isReceiveAssetEvent_Event `protobuf_oneof:"event"`
}

func (x *ReceiveAssetEvent) Reset() {
	*x = ReceiveAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tapdevrpc_tapdev_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveAssetEvent) ProtoMessage() {}

func (x *ReceiveAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tapdevrpc_tapdev_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveAssetEvent.ProtoReflect.Descriptor instead.
func (*ReceiveAssetEvent) Descriptor() ([]byte, []int) {
	return file_tapdevrpc_tapdev_proto_rawDescGZIP(), []int{8}
}

func (m *ReceiveAssetEvent) GetEvent() isReceiveAssetEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ReceiveAssetEvent) GetProofTransferBackoffWaitEvent() *ProofTransferBackoffWaitEvent {
	if x, ok := x.GetEvent().(*ReceiveAssetEvent_ProofTransferBackoffWaitEvent); ok {
		return x.ProofTransferBackoffWaitEvent
	}
	return nil
}

func (x *ReceiveAssetEvent) GetAssetReceiveCompleteEvent() *AssetReceiveCompleteEvent {
	if x, ok := x.GetEvent().(*ReceiveAssetEvent_AssetReceiveCompleteEvent); ok {
		return x.AssetReceiveCompleteEvent
	}
	return nil
}

type isReceiveAssetEvent_Event interface {
	isReceiveAssetEvent_Event()
}

type ReceiveAssetEvent_ProofTransferBackoffWaitEvent struct {
	// An event which indicates that the proof transfer backoff wait period
	// will start imminently.
	ProofTransferBackoffWaitEvent *ProofTransferBackoffWaitEvent `protobuf:"bytes,1,opt,name=proof_transfer_backoff_wait_event,json=proofTransferBackoffWaitEvent,proto3,oneof"`
}

type ReceiveAssetEvent_AssetReceiveCompleteEvent struct {
	// An event which indicates that an asset receive process has finished.
	AssetReceiveCompleteEvent *AssetReceiveCompleteEvent `protobuf:"bytes,2,opt,name=asset_receive_complete_event,json=assetReceiveCompleteEvent,proto3,oneof"`
}

func (*ReceiveAssetEvent_ProofTransferBackoffWaitEvent) isReceiveAssetEvent_Event() {}

func (*ReceiveAssetEvent_AssetReceiveCompleteEvent) isReceiveAssetEvent_Event() {}

var File_tapdevrpc_tapdev_proto protoreflect.FileDescriptor

var file_tapdevrpc_tapdev_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x61, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76,
	0x72, 0x70, 0x63, 0x1a, 0x13, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xec, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x74, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x57, 0x61, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x57, 0x61, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x54, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x57, 0x61,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x7d, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xfb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x1c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x52,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x32, 0xb9, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x70, 0x44, 0x65, 0x76, 0x12, 0x4c, 0x0a,
	0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x74,
	0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x61,
	0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2f, 0x74, 0x61, 0x70, 0x64, 0x65, 0x76, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tapdevrpc_tapdev_proto_rawDescOnce sync.Once
	file_tapdevrpc_tapdev_proto_rawDescData = file_tapdevrpc_tapdev_proto_rawDesc
)

func file_tapdevrpc_tapdev_proto_rawDescGZIP() []byte {
	file_tapdevrpc_tapdev_proto_rawDescOnce.Do(func() {
		file_tapdevrpc_tapdev_proto_rawDescData = protoimpl.X.CompressGZIP(file_tapdevrpc_tapdev_proto_rawDescData)
	})
	return file_tapdevrpc_tapdev_proto_rawDescData
}

var file_tapdevrpc_tapdev_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tapdevrpc_tapdev_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tapdevrpc_tapdev_proto_goTypes = []interface{}{
	(ProofTransferType)(0),                         // 0: tapdevrpc.ProofTransferType
	(*ImportProofRequest)(nil),                     // 1: tapdevrpc.ImportProofRequest
	(*ImportProofResponse)(nil),                    // 2: tapdevrpc.ImportProofResponse
	(*SubscribeSendAssetEventNtfnsRequest)(nil),    // 3: tapdevrpc.SubscribeSendAssetEventNtfnsRequest
	(*SendAssetEvent)(nil),                         // 4: tapdevrpc.SendAssetEvent
	(*ExecuteSendStateEvent)(nil),                  // 5: tapdevrpc.ExecuteSendStateEvent
	(*ProofTransferBackoffWaitEvent)(nil),          // 6: tapdevrpc.ProofTransferBackoffWaitEvent
	(*SubscribeReceiveAssetEventNtfnsRequest)(nil), // 7: tapdevrpc.SubscribeReceiveAssetEventNtfnsRequest
	(*AssetReceiveCompleteEvent)(nil),              // 8: tapdevrpc.AssetReceiveCompleteEvent
	(*ReceiveAssetEvent)(nil),                      // 9: tapdevrpc.ReceiveAssetEvent
	(*taprpc.Addr)(nil),                            // 10: taprpc.Addr
}
var file_tapdevrpc_tapdev_proto_depIdxs = []int32{
	5,  // 0: tapdevrpc.SendAssetEvent.execute_send_state_event:type_name -> tapdevrpc.ExecuteSendStateEvent
	6,  // 1: tapdevrpc.SendAssetEvent.proof_transfer_backoff_wait_event:type_name -> tapdevrpc.ProofTransferBackoffWaitEvent
	0,  // 2: tapdevrpc.ProofTransferBackoffWaitEvent.transfer_type:type_name -> tapdevrpc.ProofTransferType
	10, // 3: tapdevrpc.AssetReceiveCompleteEvent.address:type_name -> taprpc.Addr
	6,  // 4: tapdevrpc.ReceiveAssetEvent.proof_transfer_backoff_wait_event:type_name -> tapdevrpc.ProofTransferBackoffWaitEvent
	8,  // 5: tapdevrpc.ReceiveAssetEvent.asset_receive_complete_event:type_name -> tapdevrpc.AssetReceiveCompleteEvent
	1,  // 6: tapdevrpc.TapDev.ImportProof:input_type -> tapdevrpc.ImportProofRequest
	3,  // 7: tapdevrpc.TapDev.SubscribeSendAssetEventNtfns:input_type -> tapdevrpc.SubscribeSendAssetEventNtfnsRequest
	7,  // 8: tapdevrpc.TapDev.SubscribeReceiveAssetEventNtfns:input_type -> tapdevrpc.SubscribeReceiveAssetEventNtfnsRequest
	2,  // 9: tapdevrpc.TapDev.ImportProof:output_type -> tapdevrpc.ImportProofResponse
	4,  // 10: tapdevrpc.TapDev.SubscribeSendAssetEventNtfns:output_type -> tapdevrpc.SendAssetEvent
	9,  // 11: tapdevrpc.TapDev.SubscribeReceiveAssetEventNtfns:output_type -> tapdevrpc.ReceiveAssetEvent
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_tapdevrpc_tapdev_proto_init() }
func file_tapdevrpc_tapdev_proto_init() {
	if File_tapdevrpc_tapdev_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tapdevrpc_tapdev_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSendAssetEventNtfnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSendStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofTransferBackoffWaitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReceiveAssetEventNtfnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReceiveCompleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tapdevrpc_tapdev_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tapdevrpc_tapdev_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SendAssetEvent_ExecuteSendStateEvent)(nil),
		(*SendAssetEvent_ProofTransferBackoffWaitEvent)(nil),
	}
	file_tapdevrpc_tapdev_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ReceiveAssetEvent_ProofTransferBackoffWaitEvent)(nil),
		(*ReceiveAssetEvent_AssetReceiveCompleteEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tapdevrpc_tapdev_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tapdevrpc_tapdev_proto_goTypes,
		DependencyIndexes: file_tapdevrpc_tapdev_proto_depIdxs,
		EnumInfos:         file_tapdevrpc_tapdev_proto_enumTypes,
		MessageInfos:      file_tapdevrpc_tapdev_proto_msgTypes,
	}.Build()
	File_tapdevrpc_tapdev_proto = out.File
	file_tapdevrpc_tapdev_proto_rawDesc = nil
	file_tapdevrpc_tapdev_proto_goTypes = nil
	file_tapdevrpc_tapdev_proto_depIdxs = nil
}
