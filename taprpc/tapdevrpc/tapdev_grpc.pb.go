// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: tapdevrpc/tapdev.proto

package tapdevrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TapDev_ImportProof_FullMethodName                     = "/tapdevrpc.TapDev/ImportProof"
	TapDev_SubscribeSendAssetEventNtfns_FullMethodName    = "/tapdevrpc.TapDev/SubscribeSendAssetEventNtfns"
	TapDev_SubscribeReceiveAssetEventNtfns_FullMethodName = "/tapdevrpc.TapDev/SubscribeReceiveAssetEventNtfns"
)

// TapDevClient is the client API for TapDev service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapDevClient interface {
	// Deprecated: Do not use.
	// tapcli: `dev importproof`
	// Deprecated, use the new taprpc.RegisterTransfer RPC instead! ImportProof
	// attempts to import a proof file into the daemon. If successful,
	// a new asset will be inserted on disk, spendable using the specified target
	// script key, and internal key.
	// NOTE: This RPC will be removed with the next major release.
	ImportProof(ctx context.Context, in *ImportProofRequest, opts ...grpc.CallOption) (*ImportProofResponse, error)
	// SubscribeSendAssetEventNtfns registers a subscription to the event
	// notification stream which relates to the asset sending process.
	SubscribeSendAssetEventNtfns(ctx context.Context, in *SubscribeSendAssetEventNtfnsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendAssetEvent], error)
	// SubscribeReceiveAssetEventNtfns registers a subscription to the event
	// notification stream which relates to the asset receive process.
	SubscribeReceiveAssetEventNtfns(ctx context.Context, in *SubscribeReceiveAssetEventNtfnsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveAssetEvent], error)
}

type tapDevClient struct {
	cc grpc.ClientConnInterface
}

func NewTapDevClient(cc grpc.ClientConnInterface) TapDevClient {
	return &tapDevClient{cc}
}

// Deprecated: Do not use.
func (c *tapDevClient) ImportProof(ctx context.Context, in *ImportProofRequest, opts ...grpc.CallOption) (*ImportProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportProofResponse)
	err := c.cc.Invoke(ctx, TapDev_ImportProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapDevClient) SubscribeSendAssetEventNtfns(ctx context.Context, in *SubscribeSendAssetEventNtfnsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendAssetEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TapDev_ServiceDesc.Streams[0], TapDev_SubscribeSendAssetEventNtfns_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeSendAssetEventNtfnsRequest, SendAssetEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TapDev_SubscribeSendAssetEventNtfnsClient = grpc.ServerStreamingClient[SendAssetEvent]

func (c *tapDevClient) SubscribeReceiveAssetEventNtfns(ctx context.Context, in *SubscribeReceiveAssetEventNtfnsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveAssetEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TapDev_ServiceDesc.Streams[1], TapDev_SubscribeReceiveAssetEventNtfns_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeReceiveAssetEventNtfnsRequest, ReceiveAssetEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TapDev_SubscribeReceiveAssetEventNtfnsClient = grpc.ServerStreamingClient[ReceiveAssetEvent]

// TapDevServer is the server API for TapDev service.
// All implementations must embed UnimplementedTapDevServer
// for forward compatibility.
type TapDevServer interface {
	// Deprecated: Do not use.
	// tapcli: `dev importproof`
	// Deprecated, use the new taprpc.RegisterTransfer RPC instead! ImportProof
	// attempts to import a proof file into the daemon. If successful,
	// a new asset will be inserted on disk, spendable using the specified target
	// script key, and internal key.
	// NOTE: This RPC will be removed with the next major release.
	ImportProof(context.Context, *ImportProofRequest) (*ImportProofResponse, error)
	// SubscribeSendAssetEventNtfns registers a subscription to the event
	// notification stream which relates to the asset sending process.
	SubscribeSendAssetEventNtfns(*SubscribeSendAssetEventNtfnsRequest, grpc.ServerStreamingServer[SendAssetEvent]) error
	// SubscribeReceiveAssetEventNtfns registers a subscription to the event
	// notification stream which relates to the asset receive process.
	SubscribeReceiveAssetEventNtfns(*SubscribeReceiveAssetEventNtfnsRequest, grpc.ServerStreamingServer[ReceiveAssetEvent]) error
	mustEmbedUnimplementedTapDevServer()
}

// UnimplementedTapDevServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTapDevServer struct{}

func (UnimplementedTapDevServer) ImportProof(context.Context, *ImportProofRequest) (*ImportProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProof not implemented")
}
func (UnimplementedTapDevServer) SubscribeSendAssetEventNtfns(*SubscribeSendAssetEventNtfnsRequest, grpc.ServerStreamingServer[SendAssetEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSendAssetEventNtfns not implemented")
}
func (UnimplementedTapDevServer) SubscribeReceiveAssetEventNtfns(*SubscribeReceiveAssetEventNtfnsRequest, grpc.ServerStreamingServer[ReceiveAssetEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeReceiveAssetEventNtfns not implemented")
}
func (UnimplementedTapDevServer) mustEmbedUnimplementedTapDevServer() {}
func (UnimplementedTapDevServer) testEmbeddedByValue()                {}

// UnsafeTapDevServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapDevServer will
// result in compilation errors.
type UnsafeTapDevServer interface {
	mustEmbedUnimplementedTapDevServer()
}

func RegisterTapDevServer(s grpc.ServiceRegistrar, srv TapDevServer) {
	// If the following call pancis, it indicates UnimplementedTapDevServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TapDev_ServiceDesc, srv)
}

func _TapDev_ImportProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapDevServer).ImportProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TapDev_ImportProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapDevServer).ImportProof(ctx, req.(*ImportProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapDev_SubscribeSendAssetEventNtfns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSendAssetEventNtfnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapDevServer).SubscribeSendAssetEventNtfns(m, &grpc.GenericServerStream[SubscribeSendAssetEventNtfnsRequest, SendAssetEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TapDev_SubscribeSendAssetEventNtfnsServer = grpc.ServerStreamingServer[SendAssetEvent]

func _TapDev_SubscribeReceiveAssetEventNtfns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReceiveAssetEventNtfnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapDevServer).SubscribeReceiveAssetEventNtfns(m, &grpc.GenericServerStream[SubscribeReceiveAssetEventNtfnsRequest, ReceiveAssetEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TapDev_SubscribeReceiveAssetEventNtfnsServer = grpc.ServerStreamingServer[ReceiveAssetEvent]

// TapDev_ServiceDesc is the grpc.ServiceDesc for TapDev service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TapDev_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapdevrpc.TapDev",
	HandlerType: (*TapDevServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportProof",
			Handler:    _TapDev_ImportProof_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSendAssetEventNtfns",
			Handler:       _TapDev_SubscribeSendAssetEventNtfns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeReceiveAssetEventNtfns",
			Handler:       _TapDev_SubscribeReceiveAssetEventNtfns_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tapdevrpc/tapdev.proto",
}
