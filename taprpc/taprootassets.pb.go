// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: taprootassets.proto

package taprpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	// Indicates that an asset is capable of being split/merged, with each of the
	// units being fungible, even across a key asset ID boundary (assuming the
	// key group is the same).
	AssetType_NORMAL AssetType = 0
	// Indicates that an asset is a collectible, meaning that each of the other
	// items under the same key group are not fully fungible with each other.
	// Collectibles also cannot be split or merged.
	AssetType_COLLECTIBLE AssetType = 1
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "NORMAL",
		1: "COLLECTIBLE",
	}
	AssetType_value = map[string]int32{
		"NORMAL":      0,
		"COLLECTIBLE": 1,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{0}
}

type AssetMetaType int32

const (
	// Opaque is used for asset meta blobs that have no true structure and instead
	// should be interpreted as opaque blobs.
	AssetMetaType_MTEA_TYPE_OPAQUE AssetMetaType = 0
)

// Enum value maps for AssetMetaType.
var (
	AssetMetaType_name = map[int32]string{
		0: "MTEA_TYPE_OPAQUE",
	}
	AssetMetaType_value = map[string]int32{
		"MTEA_TYPE_OPAQUE": 0,
	}
)

func (x AssetMetaType) Enum() *AssetMetaType {
	p := new(AssetMetaType)
	*p = x
	return p
}

func (x AssetMetaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetMetaType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[1].Descriptor()
}

func (AssetMetaType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[1]
}

func (x AssetMetaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetMetaType.Descriptor instead.
func (AssetMetaType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{1}
}

type OutputType int32

const (
	// OUTPUT_TYPE_SIMPLE is a plain full-value or split output that is not a
	// split root and does not carry passive assets. In case of a split, the
	// asset of this output has a split commitment.
	OutputType_OUTPUT_TYPE_SIMPLE OutputType = 0
	// OUTPUT_TYPE_SPLIT_ROOT is a split root output that carries the change
	// from a split or a tombstone from a non-interactive full value send
	// output. In either case, the asset of this output has a tx witness.
	OutputType_OUTPUT_TYPE_SPLIT_ROOT OutputType = 1
	// OUTPUT_TYPE_PASSIVE_ASSETS_ONLY indicates that this output only carries
	// passive assets and therefore the asset in this output is nil. The passive
	// assets themselves are signed in their own virtual transactions and
	// are not present in this packet.
	OutputType_OUTPUT_TYPE_PASSIVE_ASSETS_ONLY OutputType = 2
	// OUTPUT_TYPE_PASSIVE_SPLIT_ROOT is a split root output that carries the
	// change from a split or a tombstone from a non-interactive full value send
	// output, as well as passive assets.
	OutputType_OUTPUT_TYPE_PASSIVE_SPLIT_ROOT OutputType = 3
)

// Enum value maps for OutputType.
var (
	OutputType_name = map[int32]string{
		0: "OUTPUT_TYPE_SIMPLE",
		1: "OUTPUT_TYPE_SPLIT_ROOT",
		2: "OUTPUT_TYPE_PASSIVE_ASSETS_ONLY",
		3: "OUTPUT_TYPE_PASSIVE_SPLIT_ROOT",
	}
	OutputType_value = map[string]int32{
		"OUTPUT_TYPE_SIMPLE":              0,
		"OUTPUT_TYPE_SPLIT_ROOT":          1,
		"OUTPUT_TYPE_PASSIVE_ASSETS_ONLY": 2,
		"OUTPUT_TYPE_PASSIVE_SPLIT_ROOT":  3,
	}
)

func (x OutputType) Enum() *OutputType {
	p := new(OutputType)
	*p = x
	return p
}

func (x OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[2].Descriptor()
}

func (OutputType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[2]
}

func (x OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputType.Descriptor instead.
func (OutputType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{2}
}

type AddrEventStatus int32

const (
	AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN               AddrEventStatus = 0
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_DETECTED  AddrEventStatus = 1
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED AddrEventStatus = 2
	AddrEventStatus_ADDR_EVENT_STATUS_PROOF_RECEIVED        AddrEventStatus = 3
	AddrEventStatus_ADDR_EVENT_STATUS_COMPLETED             AddrEventStatus = 4
)

// Enum value maps for AddrEventStatus.
var (
	AddrEventStatus_name = map[int32]string{
		0: "ADDR_EVENT_STATUS_UNKNOWN",
		1: "ADDR_EVENT_STATUS_TRANSACTION_DETECTED",
		2: "ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED",
		3: "ADDR_EVENT_STATUS_PROOF_RECEIVED",
		4: "ADDR_EVENT_STATUS_COMPLETED",
	}
	AddrEventStatus_value = map[string]int32{
		"ADDR_EVENT_STATUS_UNKNOWN":               0,
		"ADDR_EVENT_STATUS_TRANSACTION_DETECTED":  1,
		"ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED": 2,
		"ADDR_EVENT_STATUS_PROOF_RECEIVED":        3,
		"ADDR_EVENT_STATUS_COMPLETED":             4,
	}
)

func (x AddrEventStatus) Enum() *AddrEventStatus {
	p := new(AddrEventStatus)
	*p = x
	return p
}

func (x AddrEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddrEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[3].Descriptor()
}

func (AddrEventStatus) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[3]
}

func (x AddrEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddrEventStatus.Descriptor instead.
func (AddrEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{3}
}

type AssetMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw data of the asset meta data. Based on the type below, this may be
	// structured data such as a text file or PDF.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The type of the asset meta data.
	Type AssetMetaType `protobuf:"varint,2,opt,name=type,proto3,enum=taprpc.AssetMetaType" json:"type,omitempty"`
	// The hash of the meta. This is the hash of the TLV serialization of the meta
	// itself.
	MetaHash []byte `protobuf:"bytes,3,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
}

func (x *AssetMeta) Reset() {
	*x = AssetMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetMeta) ProtoMessage() {}

func (x *AssetMeta) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetMeta.ProtoReflect.Descriptor instead.
func (*AssetMeta) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{0}
}

func (x *AssetMeta) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AssetMeta) GetType() AssetMetaType {
	if x != nil {
		return x.Type
	}
	return AssetMetaType_MTEA_TYPE_OPAQUE
}

func (x *AssetMeta) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

type ListAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithWitness  bool `protobuf:"varint,1,opt,name=with_witness,json=withWitness,proto3" json:"with_witness,omitempty"`
	IncludeSpent bool `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
}

func (x *ListAssetRequest) Reset() {
	*x = ListAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRequest) ProtoMessage() {}

func (x *ListAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRequest.ProtoReflect.Descriptor instead.
func (*ListAssetRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{1}
}

func (x *ListAssetRequest) GetWithWitness() bool {
	if x != nil {
		return x.WithWitness
	}
	return false
}

func (x *ListAssetRequest) GetIncludeSpent() bool {
	if x != nil {
		return x.IncludeSpent
	}
	return false
}

type AnchorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction that anchors the Taproot Asset commitment where the asset
	//
	//	resides.
	AnchorTx []byte `protobuf:"bytes,1,opt,name=anchor_tx,json=anchorTx,proto3" json:"anchor_tx,omitempty"`
	// The txid of the above transaction.
	AnchorTxid string `protobuf:"bytes,2,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	// The block hash the contains the anchor transaction above.
	AnchorBlockHash []byte `protobuf:"bytes,3,opt,name=anchor_block_hash,json=anchorBlockHash,proto3" json:"anchor_block_hash,omitempty"`
	// The outpoint (txid:vout) that stores the Taproot Asset commitment.
	AnchorOutpoint string `protobuf:"bytes,4,opt,name=anchor_outpoint,json=anchorOutpoint,proto3" json:"anchor_outpoint,omitempty"`
	// The raw internal key that was used to create the anchor Taproot output key.
	InternalKey []byte `protobuf:"bytes,5,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taproot merkle root hash of the anchor output the asset was committed
	// to. If there is no Tapscript sibling, this is equal to the Taproot Asset
	// root commitment hash.
	MerkleRoot []byte `protobuf:"bytes,6,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The serialized preimage of a Tapscript sibling, if there was one. If this
	// is empty, then the merkle_root hash is equal to the Taproot root hash of the
	// anchor output.
	TapscriptSibling []byte `protobuf:"bytes,7,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
}

func (x *AnchorInfo) Reset() {
	*x = AnchorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfo) ProtoMessage() {}

func (x *AnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfo.ProtoReflect.Descriptor instead.
func (*AnchorInfo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{2}
}

func (x *AnchorInfo) GetAnchorTx() []byte {
	if x != nil {
		return x.AnchorTx
	}
	return nil
}

func (x *AnchorInfo) GetAnchorTxid() string {
	if x != nil {
		return x.AnchorTxid
	}
	return ""
}

func (x *AnchorInfo) GetAnchorBlockHash() []byte {
	if x != nil {
		return x.AnchorBlockHash
	}
	return nil
}

func (x *AnchorInfo) GetAnchorOutpoint() string {
	if x != nil {
		return x.AnchorOutpoint
	}
	return ""
}

func (x *AnchorInfo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *AnchorInfo) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *AnchorInfo) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

type GenesisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first outpoint of the transaction that created the asset (txid:vout).
	GenesisPoint string `protobuf:"bytes,1,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	// The name of the asset.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The hash of the meta data for this genesis asset.
	MetaHash []byte `protobuf:"bytes,3,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The index of the output that carries the unique Taproot Asset commitment in
	// the genesis transaction.
	OutputIndex uint32 `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// The version of the Taproot Asset commitment that created this asset.
	Version int32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GenesisInfo) Reset() {
	*x = GenesisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisInfo) ProtoMessage() {}

func (x *GenesisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisInfo.ProtoReflect.Descriptor instead.
func (*GenesisInfo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{3}
}

func (x *GenesisInfo) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

func (x *GenesisInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenesisInfo) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

func (x *GenesisInfo) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *GenesisInfo) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *GenesisInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type AssetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw group key which is a normal public key.
	RawGroupKey []byte `protobuf:"bytes,1,opt,name=raw_group_key,json=rawGroupKey,proto3" json:"raw_group_key,omitempty"`
	// The tweaked group key, which is derived based on the genesis point and also
	// asset type.
	TweakedGroupKey []byte `protobuf:"bytes,2,opt,name=tweaked_group_key,json=tweakedGroupKey,proto3" json:"tweaked_group_key,omitempty"`
	// A signature over the genesis point using the above key.
	AssetIdSig []byte `protobuf:"bytes,3,opt,name=asset_id_sig,json=assetIdSig,proto3" json:"asset_id_sig,omitempty"`
}

func (x *AssetGroup) Reset() {
	*x = AssetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroup) ProtoMessage() {}

func (x *AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroup.ProtoReflect.Descriptor instead.
func (*AssetGroup) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{4}
}

func (x *AssetGroup) GetRawGroupKey() []byte {
	if x != nil {
		return x.RawGroupKey
	}
	return nil
}

func (x *AssetGroup) GetTweakedGroupKey() []byte {
	if x != nil {
		return x.TweakedGroupKey
	}
	return nil
}

func (x *AssetGroup) GetAssetIdSig() []byte {
	if x != nil {
		return x.AssetIdSig
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the Taproot Asset.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,2,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The total amount of the asset stored in this Taproot Asset UTXO.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative lock time, same as Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,6,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The version of the script, only version 0 is defined at present.
	ScriptVersion int32 `protobuf:"varint,7,opt,name=script_version,json=scriptVersion,proto3" json:"script_version,omitempty"`
	// The script key of the asset, which can be spent under Taproot semantics.
	ScriptKey []byte `protobuf:"bytes,9,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// Indicates whether the script key is known to the wallet of the lnd node
	// connected to the Taproot Asset daemon.
	ScriptKeyIsLocal bool `protobuf:"varint,10,opt,name=script_key_is_local,json=scriptKeyIsLocal,proto3" json:"script_key_is_local,omitempty"`
	// The information related to the key group of an asset (if it exists).
	AssetGroup *AssetGroup `protobuf:"bytes,11,opt,name=asset_group,json=assetGroup,proto3" json:"asset_group,omitempty"`
	// Describes where in the chain the asset is currently anchored.
	ChainAnchor   *AnchorInfo    `protobuf:"bytes,12,opt,name=chain_anchor,json=chainAnchor,proto3" json:"chain_anchor,omitempty"`
	PrevWitnesses []*PrevWitness `protobuf:"bytes,13,rep,name=prev_witnesses,json=prevWitnesses,proto3" json:"prev_witnesses,omitempty"`
	// Indicates whether the asset has been spent.
	IsSpent bool `protobuf:"varint,14,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{5}
}

func (x *Asset) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Asset) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *Asset) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *Asset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Asset) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Asset) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *Asset) GetScriptVersion() int32 {
	if x != nil {
		return x.ScriptVersion
	}
	return 0
}

func (x *Asset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Asset) GetScriptKeyIsLocal() bool {
	if x != nil {
		return x.ScriptKeyIsLocal
	}
	return false
}

func (x *Asset) GetAssetGroup() *AssetGroup {
	if x != nil {
		return x.AssetGroup
	}
	return nil
}

func (x *Asset) GetChainAnchor() *AnchorInfo {
	if x != nil {
		return x.ChainAnchor
	}
	return nil
}

func (x *Asset) GetPrevWitnesses() []*PrevWitness {
	if x != nil {
		return x.PrevWitnesses
	}
	return nil
}

func (x *Asset) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

type PrevWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevId          *PrevInputAsset  `protobuf:"bytes,1,opt,name=prev_id,json=prevId,proto3" json:"prev_id,omitempty"`
	TxWitness       [][]byte         `protobuf:"bytes,2,rep,name=tx_witness,json=txWitness,proto3" json:"tx_witness,omitempty"`
	SplitCommitment *SplitCommitment `protobuf:"bytes,3,opt,name=split_commitment,json=splitCommitment,proto3" json:"split_commitment,omitempty"`
}

func (x *PrevWitness) Reset() {
	*x = PrevWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevWitness) ProtoMessage() {}

func (x *PrevWitness) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevWitness.ProtoReflect.Descriptor instead.
func (*PrevWitness) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{6}
}

func (x *PrevWitness) GetPrevId() *PrevInputAsset {
	if x != nil {
		return x.PrevId
	}
	return nil
}

func (x *PrevWitness) GetTxWitness() [][]byte {
	if x != nil {
		return x.TxWitness
	}
	return nil
}

func (x *PrevWitness) GetSplitCommitment() *SplitCommitment {
	if x != nil {
		return x.SplitCommitment
	}
	return nil
}

type SplitCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootAsset *Asset `protobuf:"bytes,1,opt,name=root_asset,json=rootAsset,proto3" json:"root_asset,omitempty"`
}

func (x *SplitCommitment) Reset() {
	*x = SplitCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCommitment) ProtoMessage() {}

func (x *SplitCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCommitment.ProtoReflect.Descriptor instead.
func (*SplitCommitment) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{7}
}

func (x *SplitCommitment) GetRootAsset() *Asset {
	if x != nil {
		return x.RootAsset
	}
	return nil
}

type ListAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ListAssetResponse) Reset() {
	*x = ListAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse) ProtoMessage() {}

func (x *ListAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse.ProtoReflect.Descriptor instead.
func (*ListAssetResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{8}
}

func (x *ListAssetResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUtxosRequest) Reset() {
	*x = ListUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosRequest) ProtoMessage() {}

func (x *ListUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosRequest.ProtoReflect.Descriptor instead.
func (*ListUtxosRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{9}
}

type ManagedUtxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the UTXO.
	OutPoint string `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The UTXO amount in satoshis.
	AmtSat int64 `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,3,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taproot Asset root commitment hash.
	TaprootAssetRoot []byte `protobuf:"bytes,4,opt,name=taproot_asset_root,json=taprootAssetRoot,proto3" json:"taproot_asset_root,omitempty"`
	// The Taproot merkle root hash committed to by the outpoint of this UTXO.
	// If there is no Tapscript sibling, this is equal to the Taproot Asset root
	// commitment hash.
	MerkleRoot []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The assets held at this UTXO.
	Assets []*Asset `protobuf:"bytes,6,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ManagedUtxo) Reset() {
	*x = ManagedUtxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedUtxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedUtxo) ProtoMessage() {}

func (x *ManagedUtxo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedUtxo.ProtoReflect.Descriptor instead.
func (*ManagedUtxo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{10}
}

func (x *ManagedUtxo) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

func (x *ManagedUtxo) GetAmtSat() int64 {
	if x != nil {
		return x.AmtSat
	}
	return 0
}

func (x *ManagedUtxo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *ManagedUtxo) GetTaprootAssetRoot() []byte {
	if x != nil {
		return x.TaprootAssetRoot
	}
	return nil
}

func (x *ManagedUtxo) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *ManagedUtxo) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of UTXOs managed by the daemon.
	ManagedUtxos map[string]*ManagedUtxo `protobuf:"bytes,1,rep,name=managed_utxos,json=managedUtxos,proto3" json:"managed_utxos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListUtxosResponse) Reset() {
	*x = ListUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosResponse) ProtoMessage() {}

func (x *ListUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosResponse.ProtoReflect.Descriptor instead.
func (*ListUtxosResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{11}
}

func (x *ListUtxosResponse) GetManagedUtxos() map[string]*ManagedUtxo {
	if x != nil {
		return x.ManagedUtxos
	}
	return nil
}

type ListGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{12}
}

type AssetHumanReadable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The amount of the asset.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative locktime, as with Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,4,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The name of the asset.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// The metadata hash of the asset.
	MetaHash []byte `protobuf:"bytes,6,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	// The type of the asset.
	Type AssetType `protobuf:"varint,7,opt,name=type,proto3,enum=taprpc.AssetType" json:"type,omitempty"`
}

func (x *AssetHumanReadable) Reset() {
	*x = AssetHumanReadable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetHumanReadable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHumanReadable) ProtoMessage() {}

func (x *AssetHumanReadable) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHumanReadable.ProtoReflect.Descriptor instead.
func (*AssetHumanReadable) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{13}
}

func (x *AssetHumanReadable) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetHumanReadable) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetHumanReadable) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AssetHumanReadable) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

func (x *AssetHumanReadable) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_NORMAL
}

type GroupedAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of assets with the same group key.
	Assets []*AssetHumanReadable `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *GroupedAssets) Reset() {
	*x = GroupedAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedAssets) ProtoMessage() {}

func (x *GroupedAssets) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedAssets.ProtoReflect.Descriptor instead.
func (*GroupedAssets) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{14}
}

func (x *GroupedAssets) GetAssets() []*AssetHumanReadable {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of assets with a group key.
	Groups map[string]*GroupedAssets `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{15}
}

func (x *ListGroupsResponse) GetGroups() map[string]*GroupedAssets {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GroupBy:
	//
	//	*ListBalancesRequest_AssetId
	//	*ListBalancesRequest_GroupKey
	GroupBy isListBalancesRequest_GroupBy `protobuf_oneof:"group_by"`
	// If the query results should grouped by asset ids, then an optional asset
	// filter may be provided to query balance of a specific asset.
	AssetFilter []byte `protobuf:"bytes,3,opt,name=asset_filter,json=assetFilter,proto3" json:"asset_filter,omitempty"`
	// If the query results should be grouped by group keys, then an optional
	// group key filter may be provided to query the balance of a specific
	// asset group.
	GroupKeyFilter []byte `protobuf:"bytes,4,opt,name=group_key_filter,json=groupKeyFilter,proto3" json:"group_key_filter,omitempty"`
}

func (x *ListBalancesRequest) Reset() {
	*x = ListBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesRequest) ProtoMessage() {}

func (x *ListBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListBalancesRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{16}
}

func (m *ListBalancesRequest) GetGroupBy() isListBalancesRequest_GroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (x *ListBalancesRequest) GetAssetId() bool {
	if x, ok := x.GetGroupBy().(*ListBalancesRequest_AssetId); ok {
		return x.AssetId
	}
	return false
}

func (x *ListBalancesRequest) GetGroupKey() bool {
	if x, ok := x.GetGroupBy().(*ListBalancesRequest_GroupKey); ok {
		return x.GroupKey
	}
	return false
}

func (x *ListBalancesRequest) GetAssetFilter() []byte {
	if x != nil {
		return x.AssetFilter
	}
	return nil
}

func (x *ListBalancesRequest) GetGroupKeyFilter() []byte {
	if x != nil {
		return x.GroupKeyFilter
	}
	return nil
}

type isListBalancesRequest_GroupBy interface {
	isListBalancesRequest_GroupBy()
}

type ListBalancesRequest_AssetId struct {
	// Group results by asset IDs.
	AssetId bool `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ListBalancesRequest_GroupKey struct {
	// Group results by group keys.
	GroupKey bool `protobuf:"varint,2,opt,name=group_key,json=groupKey,proto3,oneof"`
}

func (*ListBalancesRequest_AssetId) isListBalancesRequest_GroupBy() {}

func (*ListBalancesRequest_GroupKey) isListBalancesRequest_GroupBy() {}

type AssetBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,1,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The balance of the asset owned by the target daemon.
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AssetBalance) Reset() {
	*x = AssetBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBalance) ProtoMessage() {}

func (x *AssetBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBalance.ProtoReflect.Descriptor instead.
func (*AssetBalance) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{17}
}

func (x *AssetBalance) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *AssetBalance) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *AssetBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AssetGroupBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group key or nil aggregating assets that don't have a group.
	GroupKey []byte `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The total balance of the assets in the group.
	Balance uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AssetGroupBalance) Reset() {
	*x = AssetGroupBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetGroupBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupBalance) ProtoMessage() {}

func (x *AssetGroupBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupBalance.ProtoReflect.Descriptor instead.
func (*AssetGroupBalance) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{18}
}

func (x *AssetGroupBalance) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *AssetGroupBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type ListBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetBalances      map[string]*AssetBalance      `protobuf:"bytes,1,rep,name=asset_balances,json=assetBalances,proto3" json:"asset_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AssetGroupBalances map[string]*AssetGroupBalance `protobuf:"bytes,2,rep,name=asset_group_balances,json=assetGroupBalances,proto3" json:"asset_group_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListBalancesResponse) Reset() {
	*x = ListBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesResponse) ProtoMessage() {}

func (x *ListBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListBalancesResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{19}
}

func (x *ListBalancesResponse) GetAssetBalances() map[string]*AssetBalance {
	if x != nil {
		return x.AssetBalances
	}
	return nil
}

func (x *ListBalancesResponse) GetAssetGroupBalances() map[string]*AssetGroupBalance {
	if x != nil {
		return x.AssetGroupBalances
	}
	return nil
}

type ListTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{20}
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unordered list of outgoing asset transfers.
	Transfers []*AssetTransfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{21}
}

func (x *ListTransfersResponse) GetTransfers() []*AssetTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type AssetTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferTimestamp int64 `protobuf:"varint,1,opt,name=transfer_timestamp,json=transferTimestamp,proto3" json:"transfer_timestamp,omitempty"`
	// The new transaction that commits to the set of Taproot Assets found
	// at the above new anchor point.
	AnchorTxHash       []byte `protobuf:"bytes,2,opt,name=anchor_tx_hash,json=anchorTxHash,proto3" json:"anchor_tx_hash,omitempty"`
	AnchorTxHeightHint uint32 `protobuf:"varint,3,opt,name=anchor_tx_height_hint,json=anchorTxHeightHint,proto3" json:"anchor_tx_height_hint,omitempty"`
	AnchorTxChainFees  int64  `protobuf:"varint,4,opt,name=anchor_tx_chain_fees,json=anchorTxChainFees,proto3" json:"anchor_tx_chain_fees,omitempty"`
	// Describes the set of spent assets.
	Inputs []*TransferInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Describes the set of newly created asset outputs.
	Outputs []*TransferOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *AssetTransfer) Reset() {
	*x = AssetTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTransfer) ProtoMessage() {}

func (x *AssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTransfer.ProtoReflect.Descriptor instead.
func (*AssetTransfer) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{22}
}

func (x *AssetTransfer) GetTransferTimestamp() int64 {
	if x != nil {
		return x.TransferTimestamp
	}
	return 0
}

func (x *AssetTransfer) GetAnchorTxHash() []byte {
	if x != nil {
		return x.AnchorTxHash
	}
	return nil
}

func (x *AssetTransfer) GetAnchorTxHeightHint() uint32 {
	if x != nil {
		return x.AnchorTxHeightHint
	}
	return 0
}

func (x *AssetTransfer) GetAnchorTxChainFees() int64 {
	if x != nil {
		return x.AnchorTxChainFees
	}
	return 0
}

func (x *AssetTransfer) GetInputs() []*TransferInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *AssetTransfer) GetOutputs() []*TransferOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TransferInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old/current location of the Taproot Asset commitment that was spent
	// as an input.
	AnchorPoint string `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	// The ID of the asset that was spent.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The script key of the asset that was spent.
	ScriptKey []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The amount of the asset that was spent.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferInput) Reset() {
	*x = TransferInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInput) ProtoMessage() {}

func (x *TransferInput) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInput.ProtoReflect.Descriptor instead.
func (*TransferInput) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{23}
}

func (x *TransferInput) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *TransferInput) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *TransferInput) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *TransferInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TransferOutputAnchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new location of the Taproot Asset commitment that was created on
	// chain.
	Outpoint         string `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Value            int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	InternalKey      []byte `protobuf:"bytes,3,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	TaprootAssetRoot []byte `protobuf:"bytes,4,opt,name=taproot_asset_root,json=taprootAssetRoot,proto3" json:"taproot_asset_root,omitempty"`
	MerkleRoot       []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	TapscriptSibling []byte `protobuf:"bytes,6,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	NumPassiveAssets uint32 `protobuf:"varint,7,opt,name=num_passive_assets,json=numPassiveAssets,proto3" json:"num_passive_assets,omitempty"`
}

func (x *TransferOutputAnchor) Reset() {
	*x = TransferOutputAnchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOutputAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutputAnchor) ProtoMessage() {}

func (x *TransferOutputAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutputAnchor.ProtoReflect.Descriptor instead.
func (*TransferOutputAnchor) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{24}
}

func (x *TransferOutputAnchor) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *TransferOutputAnchor) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferOutputAnchor) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *TransferOutputAnchor) GetTaprootAssetRoot() []byte {
	if x != nil {
		return x.TaprootAssetRoot
	}
	return nil
}

func (x *TransferOutputAnchor) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *TransferOutputAnchor) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *TransferOutputAnchor) GetNumPassiveAssets() uint32 {
	if x != nil {
		return x.NumPassiveAssets
	}
	return 0
}

type TransferOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor              *TransferOutputAnchor `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	ScriptKey           []byte                `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	ScriptKeyIsLocal    bool                  `protobuf:"varint,3,opt,name=script_key_is_local,json=scriptKeyIsLocal,proto3" json:"script_key_is_local,omitempty"`
	Amount              uint64                `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	NewProofBlob        []byte                `protobuf:"bytes,5,opt,name=new_proof_blob,json=newProofBlob,proto3" json:"new_proof_blob,omitempty"`
	SplitCommitRootHash []byte                `protobuf:"bytes,6,opt,name=split_commit_root_hash,json=splitCommitRootHash,proto3" json:"split_commit_root_hash,omitempty"`
	OutputType          OutputType            `protobuf:"varint,7,opt,name=output_type,json=outputType,proto3,enum=taprpc.OutputType" json:"output_type,omitempty"`
}

func (x *TransferOutput) Reset() {
	*x = TransferOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutput) ProtoMessage() {}

func (x *TransferOutput) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutput.ProtoReflect.Descriptor instead.
func (*TransferOutput) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{25}
}

func (x *TransferOutput) GetAnchor() *TransferOutputAnchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *TransferOutput) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *TransferOutput) GetScriptKeyIsLocal() bool {
	if x != nil {
		return x.ScriptKeyIsLocal
	}
	return false
}

func (x *TransferOutput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferOutput) GetNewProofBlob() []byte {
	if x != nil {
		return x.NewProofBlob
	}
	return nil
}

func (x *TransferOutput) GetSplitCommitRootHash() []byte {
	if x != nil {
		return x.SplitCommitRootHash
	}
	return nil
}

func (x *TransferOutput) GetOutputType() OutputType {
	if x != nil {
		return x.OutputType
	}
	return OutputType_OUTPUT_TYPE_SIMPLE
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{26}
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{27}
}

type DebugLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, all the valid debug sub-systems will be returned.
	Show      bool   `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	LevelSpec string `protobuf:"bytes,2,opt,name=level_spec,json=levelSpec,proto3" json:"level_spec,omitempty"`
}

func (x *DebugLevelRequest) Reset() {
	*x = DebugLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelRequest) ProtoMessage() {}

func (x *DebugLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelRequest.ProtoReflect.Descriptor instead.
func (*DebugLevelRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{28}
}

func (x *DebugLevelRequest) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *DebugLevelRequest) GetLevelSpec() string {
	if x != nil {
		return x.LevelSpec
	}
	return ""
}

type DebugLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubSystems string `protobuf:"bytes,1,opt,name=sub_systems,json=subSystems,proto3" json:"sub_systems,omitempty"`
}

func (x *DebugLevelResponse) Reset() {
	*x = DebugLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelResponse) ProtoMessage() {}

func (x *DebugLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelResponse.ProtoReflect.Descriptor instead.
func (*DebugLevelResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{29}
}

func (x *DebugLevelResponse) GetSubSystems() string {
	if x != nil {
		return x.SubSystems
	}
	return ""
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bech32 encoded Taproot Asset address.
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The total amount of the asset stored in this Taproot Asset UTXO.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The group key of the asset (if it exists)
	GroupKey []byte `protobuf:"bytes,5,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The specific script key the asset must commit to in order to transfer
	// ownership to the creator of the address.
	ScriptKey []byte `protobuf:"bytes,6,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,7,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The optional serialized tapscript sibling preimage to use for the receiving
	// asset. This is usually empty as it is only needed when there should be an
	// additional script path in the Taproot tree alongside the Taproot Asset
	// commitment of the asset.
	TapscriptSibling []byte `protobuf:"bytes,8,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	// The tweaked internal key that commits to the asset and represents the
	// on-chain output key the Bitcoin transaction must send to in order to
	// transfer assets described in this address.
	TaprootOutputKey []byte `protobuf:"bytes,9,opt,name=taproot_output_key,json=taprootOutputKey,proto3" json:"taproot_output_key,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{30}
}

func (x *Addr) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *Addr) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Addr) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *Addr) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Addr) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *Addr) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Addr) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *Addr) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *Addr) GetTaprootOutputKey() []byte {
	if x != nil {
		return x.TaprootOutputKey
	}
	return nil
}

type QueryAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, then only addresses created after this Unix timestamp will be
	// returned.
	CreatedAfter int64 `protobuf:"varint,1,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	// If set, then only addresses created before this Unix timestamp will be
	// returned.
	CreatedBefore int64 `protobuf:"varint,2,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	// The max number of addresses that should be returned.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The offset from the addresses that should be returned.
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *QueryAddrRequest) Reset() {
	*x = QueryAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrRequest) ProtoMessage() {}

func (x *QueryAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrRequest.ProtoReflect.Descriptor instead.
func (*QueryAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{31}
}

func (x *QueryAddrRequest) GetCreatedAfter() int64 {
	if x != nil {
		return x.CreatedAfter
	}
	return 0
}

func (x *QueryAddrRequest) GetCreatedBefore() int64 {
	if x != nil {
		return x.CreatedBefore
	}
	return 0
}

func (x *QueryAddrRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryAddrRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type QueryAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []*Addr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *QueryAddrResponse) Reset() {
	*x = QueryAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrResponse) ProtoMessage() {}

func (x *QueryAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrResponse.ProtoReflect.Descriptor instead.
func (*QueryAddrResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{32}
}

func (x *QueryAddrResponse) GetAddrs() []*Addr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type NewAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Amt     uint64 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	// The optional script key that the receiving asset should be locked to. If no
	// script key is provided, a normal BIP-86 key will be derived from the
	// underlying wallet.
	//
	// NOTE: The script_key and internal_key fields should either both be set or
	// both be empty.
	ScriptKey *ScriptKey `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The optional internal key of the receiving BTC level transaction output on
	// which the receiving asset transfers will be committed to. If no internal key
	// is provided, a key will be derived from the underlying wallet.
	//
	// NOTE: The script_key and internal_key fields should either both be set or
	// both be empty.
	InternalKey *KeyDescriptor `protobuf:"bytes,4,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The optional serialized tapscript sibling preimage to use for the receiving
	// asset. This is usually empty as it is only needed when there should be an
	// additional script path in the Taproot tree alongside the Taproot Asset
	// commitment of the asset.
	TapscriptSibling []byte `protobuf:"bytes,5,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
}

func (x *NewAddrRequest) Reset() {
	*x = NewAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAddrRequest) ProtoMessage() {}

func (x *NewAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAddrRequest.ProtoReflect.Descriptor instead.
func (*NewAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{33}
}

func (x *NewAddrRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *NewAddrRequest) GetAmt() uint64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *NewAddrRequest) GetScriptKey() *ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *NewAddrRequest) GetInternalKey() *KeyDescriptor {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *NewAddrRequest) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

type ScriptKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full Taproot output key the asset is locked to. This is either a BIP-86
	// key if the tap_tweak below is empty, or a key with the tap tweak applied to
	// it.
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// The key descriptor describing the internal key of the above Taproot key.
	KeyDesc *KeyDescriptor `protobuf:"bytes,2,opt,name=key_desc,json=keyDesc,proto3" json:"key_desc,omitempty"`
	// The optional Taproot tweak to apply to the above internal key. If this is
	// empty then a BIP-86 style tweak is applied to the internal key.
	TapTweak []byte `protobuf:"bytes,3,opt,name=tap_tweak,json=tapTweak,proto3" json:"tap_tweak,omitempty"`
}

func (x *ScriptKey) Reset() {
	*x = ScriptKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptKey) ProtoMessage() {}

func (x *ScriptKey) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptKey.ProtoReflect.Descriptor instead.
func (*ScriptKey) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{34}
}

func (x *ScriptKey) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ScriptKey) GetKeyDesc() *KeyDescriptor {
	if x != nil {
		return x.KeyDesc
	}
	return nil
}

func (x *ScriptKey) GetTapTweak() []byte {
	if x != nil {
		return x.TapTweak
	}
	return nil
}

type KeyLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The family of key being identified.
	KeyFamily int32 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	// The precise index of the key being identified.
	KeyIndex int32 `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
}

func (x *KeyLocator) Reset() {
	*x = KeyLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocator) ProtoMessage() {}

func (x *KeyLocator) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocator.ProtoReflect.Descriptor instead.
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{35}
}

func (x *KeyLocator) GetKeyFamily() int32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

func (x *KeyLocator) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw bytes of the key being identified.
	RawKeyBytes []byte `protobuf:"bytes,1,opt,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	// The key locator that identifies which key to use for signing.
	KeyLoc *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
}

func (x *KeyDescriptor) Reset() {
	*x = KeyDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDescriptor) ProtoMessage() {}

func (x *KeyDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDescriptor.ProtoReflect.Descriptor instead.
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{36}
}

func (x *KeyDescriptor) GetRawKeyBytes() []byte {
	if x != nil {
		return x.RawKeyBytes
	}
	return nil
}

func (x *KeyDescriptor) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

type DecodeAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *DecodeAddrRequest) Reset() {
	*x = DecodeAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeAddrRequest) ProtoMessage() {}

func (x *DecodeAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeAddrRequest.ProtoReflect.Descriptor instead.
func (*DecodeAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{37}
}

func (x *DecodeAddrRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type ProofFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawProof     []byte `protobuf:"bytes,1,opt,name=raw_proof,json=rawProof,proto3" json:"raw_proof,omitempty"`
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
}

func (x *ProofFile) Reset() {
	*x = ProofFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofFile) ProtoMessage() {}

func (x *ProofFile) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofFile.ProtoReflect.Descriptor instead.
func (*ProofFile) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{38}
}

func (x *ProofFile) GetRawProof() []byte {
	if x != nil {
		return x.RawProof
	}
	return nil
}

func (x *ProofFile) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type ProofVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ProofVerifyResponse) Reset() {
	*x = ProofVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofVerifyResponse) ProtoMessage() {}

func (x *ProofVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofVerifyResponse.ProtoReflect.Descriptor instead.
func (*ProofVerifyResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{39}
}

func (x *ProofVerifyResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ExportProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey []byte `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
}

func (x *ExportProofRequest) Reset() {
	*x = ExportProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProofRequest) ProtoMessage() {}

func (x *ExportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProofRequest.ProtoReflect.Descriptor instead.
func (*ExportProofRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{40}
}

func (x *ExportProofRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ExportProofRequest) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type ImportProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofFile    []byte `protobuf:"bytes,1,opt,name=proof_file,json=proofFile,proto3" json:"proof_file,omitempty"`
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
}

func (x *ImportProofRequest) Reset() {
	*x = ImportProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofRequest) ProtoMessage() {}

func (x *ImportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofRequest.ProtoReflect.Descriptor instead.
func (*ImportProofRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{41}
}

func (x *ImportProofRequest) GetProofFile() []byte {
	if x != nil {
		return x.ProofFile
	}
	return nil
}

func (x *ImportProofRequest) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type ImportProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportProofResponse) Reset() {
	*x = ImportProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProofResponse) ProtoMessage() {}

func (x *ImportProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProofResponse.ProtoReflect.Descriptor instead.
func (*ImportProofResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{42}
}

type AddrEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the event was created in unix timestamp seconds.
	CreationTimeUnixSeconds uint64 `protobuf:"varint,1,opt,name=creation_time_unix_seconds,json=creationTimeUnixSeconds,proto3" json:"creation_time_unix_seconds,omitempty"`
	// The address the event was created for.
	Addr *Addr `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// The current status of the event.
	Status AddrEventStatus `protobuf:"varint,3,opt,name=status,proto3,enum=taprpc.AddrEventStatus" json:"status,omitempty"`
	// The outpoint that contains the inbound asset transfer.
	Outpoint string `protobuf:"bytes,4,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The amount in satoshis that were transferred on chain along with the asset.
	// This amount is independent of the requested asset amount, which can be
	// looked up on the address.
	UtxoAmtSat uint64 `protobuf:"varint,5,opt,name=utxo_amt_sat,json=utxoAmtSat,proto3" json:"utxo_amt_sat,omitempty"`
	// The taproot sibling hash that was used to send to the Taproot output.
	TaprootSibling []byte `protobuf:"bytes,6,opt,name=taproot_sibling,json=taprootSibling,proto3" json:"taproot_sibling,omitempty"`
	// The height at which the on-chain output was confirmed. If this is zero, it
	// means the output is unconfirmed.
	ConfirmationHeight uint32 `protobuf:"varint,7,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
	// Indicates whether a proof file can be found for the address' asset ID and
	// script key.
	HasProof bool `protobuf:"varint,8,opt,name=has_proof,json=hasProof,proto3" json:"has_proof,omitempty"`
}

func (x *AddrEvent) Reset() {
	*x = AddrEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrEvent) ProtoMessage() {}

func (x *AddrEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrEvent.ProtoReflect.Descriptor instead.
func (*AddrEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{43}
}

func (x *AddrEvent) GetCreationTimeUnixSeconds() uint64 {
	if x != nil {
		return x.CreationTimeUnixSeconds
	}
	return 0
}

func (x *AddrEvent) GetAddr() *Addr {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *AddrEvent) GetStatus() AddrEventStatus {
	if x != nil {
		return x.Status
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

func (x *AddrEvent) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *AddrEvent) GetUtxoAmtSat() uint64 {
	if x != nil {
		return x.UtxoAmtSat
	}
	return 0
}

func (x *AddrEvent) GetTaprootSibling() []byte {
	if x != nil {
		return x.TaprootSibling
	}
	return nil
}

func (x *AddrEvent) GetConfirmationHeight() uint32 {
	if x != nil {
		return x.ConfirmationHeight
	}
	return 0
}

func (x *AddrEvent) GetHasProof() bool {
	if x != nil {
		return x.HasProof
	}
	return false
}

type AddrReceivesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter receives by a specific address. Leave empty to get all receives.
	FilterAddr string `protobuf:"bytes,1,opt,name=filter_addr,json=filterAddr,proto3" json:"filter_addr,omitempty"`
	// Filter receives by a specific status. Leave empty to get all receives.
	FilterStatus AddrEventStatus `protobuf:"varint,2,opt,name=filter_status,json=filterStatus,proto3,enum=taprpc.AddrEventStatus" json:"filter_status,omitempty"`
}

func (x *AddrReceivesRequest) Reset() {
	*x = AddrReceivesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrReceivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesRequest) ProtoMessage() {}

func (x *AddrReceivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesRequest.ProtoReflect.Descriptor instead.
func (*AddrReceivesRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{44}
}

func (x *AddrReceivesRequest) GetFilterAddr() string {
	if x != nil {
		return x.FilterAddr
	}
	return ""
}

func (x *AddrReceivesRequest) GetFilterStatus() AddrEventStatus {
	if x != nil {
		return x.FilterStatus
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

type AddrReceivesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The events that match the filter criteria.
	Events []*AddrEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AddrReceivesResponse) Reset() {
	*x = AddrReceivesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrReceivesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesResponse) ProtoMessage() {}

func (x *AddrReceivesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesResponse.ProtoReflect.Descriptor instead.
func (*AddrReceivesResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{45}
}

func (x *AddrReceivesResponse) GetEvents() []*AddrEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SendAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TapAddrs []string `protobuf:"bytes,1,rep,name=tap_addrs,json=tapAddrs,proto3" json:"tap_addrs,omitempty"`
}

func (x *SendAssetRequest) Reset() {
	*x = SendAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetRequest) ProtoMessage() {}

func (x *SendAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetRequest.ProtoReflect.Descriptor instead.
func (*SendAssetRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{46}
}

func (x *SendAssetRequest) GetTapAddrs() []string {
	if x != nil {
		return x.TapAddrs
	}
	return nil
}

type PrevInputAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorPoint string `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	AssetId     []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey   []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Amount      uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PrevInputAsset) Reset() {
	*x = PrevInputAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevInputAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevInputAsset) ProtoMessage() {}

func (x *PrevInputAsset) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevInputAsset.ProtoReflect.Descriptor instead.
func (*PrevInputAsset) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{47}
}

func (x *PrevInputAsset) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *PrevInputAsset) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *PrevInputAsset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *PrevInputAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SendAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer *AssetTransfer `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
}

func (x *SendAssetResponse) Reset() {
	*x = SendAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetResponse) ProtoMessage() {}

func (x *SendAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetResponse.ProtoReflect.Descriptor instead.
func (*SendAssetResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{48}
}

func (x *SendAssetResponse) GetTransfer() *AssetTransfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{49}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	LndVersion string `protobuf:"bytes,2,opt,name=lnd_version,json=lndVersion,proto3" json:"lnd_version,omitempty"`
	Network    string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{50}
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetInfoResponse) GetLndVersion() string {
	if x != nil {
		return x.LndVersion
	}
	return ""
}

func (x *GetInfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type SubscribeSendAssetEventNtfnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSendAssetEventNtfnsRequest) Reset() {
	*x = SubscribeSendAssetEventNtfnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSendAssetEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSendAssetEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeSendAssetEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSendAssetEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSendAssetEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{51}
}

type SendAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*SendAssetEvent_ExecuteSendStateEvent
	//	*SendAssetEvent_ReceiverProofBackoffWaitEvent
	Event isSendAssetEvent_Event `protobuf_oneof:"event"`
}

func (x *SendAssetEvent) Reset() {
	*x = SendAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetEvent) ProtoMessage() {}

func (x *SendAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetEvent.ProtoReflect.Descriptor instead.
func (*SendAssetEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{52}
}

func (m *SendAssetEvent) GetEvent() isSendAssetEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SendAssetEvent) GetExecuteSendStateEvent() *ExecuteSendStateEvent {
	if x, ok := x.GetEvent().(*SendAssetEvent_ExecuteSendStateEvent); ok {
		return x.ExecuteSendStateEvent
	}
	return nil
}

func (x *SendAssetEvent) GetReceiverProofBackoffWaitEvent() *ReceiverProofBackoffWaitEvent {
	if x, ok := x.GetEvent().(*SendAssetEvent_ReceiverProofBackoffWaitEvent); ok {
		return x.ReceiverProofBackoffWaitEvent
	}
	return nil
}

type isSendAssetEvent_Event interface {
	isSendAssetEvent_Event()
}

type SendAssetEvent_ExecuteSendStateEvent struct {
	// An event which indicates that a send state is about to be executed.
	ExecuteSendStateEvent *ExecuteSendStateEvent `protobuf:"bytes,1,opt,name=execute_send_state_event,json=executeSendStateEvent,proto3,oneof"`
}

type SendAssetEvent_ReceiverProofBackoffWaitEvent struct {
	// An event which indicates that the proof send backoff wait period will
	// start imminently.
	ReceiverProofBackoffWaitEvent *ReceiverProofBackoffWaitEvent `protobuf:"bytes,2,opt,name=receiver_proof_backoff_wait_event,json=receiverProofBackoffWaitEvent,proto3,oneof"`
}

func (*SendAssetEvent_ExecuteSendStateEvent) isSendAssetEvent_Event() {}

func (*SendAssetEvent_ReceiverProofBackoffWaitEvent) isSendAssetEvent_Event() {}

type ExecuteSendStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execute timestamp (microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The send state that is about to be executed.
	SendState string `protobuf:"bytes,2,opt,name=send_state,json=sendState,proto3" json:"send_state,omitempty"`
}

func (x *ExecuteSendStateEvent) Reset() {
	*x = ExecuteSendStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSendStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSendStateEvent) ProtoMessage() {}

func (x *ExecuteSendStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSendStateEvent.ProtoReflect.Descriptor instead.
func (*ExecuteSendStateEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{53}
}

func (x *ExecuteSendStateEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecuteSendStateEvent) GetSendState() string {
	if x != nil {
		return x.SendState
	}
	return ""
}

type ReceiverProofBackoffWaitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transfer attempt timestamp (microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Backoff is the active backoff wait duration.
	Backoff int64 `protobuf:"varint,2,opt,name=backoff,proto3" json:"backoff,omitempty"`
	// Tries counter is the number of tries we've made so far during the
	// course of the current backoff procedure to deliver the proof to the
	// receiver.
	TriesCounter int64 `protobuf:"varint,3,opt,name=tries_counter,json=triesCounter,proto3" json:"tries_counter,omitempty"`
}

func (x *ReceiverProofBackoffWaitEvent) Reset() {
	*x = ReceiverProofBackoffWaitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverProofBackoffWaitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverProofBackoffWaitEvent) ProtoMessage() {}

func (x *ReceiverProofBackoffWaitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverProofBackoffWaitEvent.ProtoReflect.Descriptor instead.
func (*ReceiverProofBackoffWaitEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{54}
}

func (x *ReceiverProofBackoffWaitEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReceiverProofBackoffWaitEvent) GetBackoff() int64 {
	if x != nil {
		return x.Backoff
	}
	return 0
}

func (x *ReceiverProofBackoffWaitEvent) GetTriesCounter() int64 {
	if x != nil {
		return x.TriesCounter
	}
	return 0
}

type FetchAssetMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Asset:
	//
	//	*FetchAssetMetaRequest_AssetId
	//	*FetchAssetMetaRequest_MetaHash
	Asset isFetchAssetMetaRequest_Asset `protobuf_oneof:"asset"`
}

func (x *FetchAssetMetaRequest) Reset() {
	*x = FetchAssetMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taprootassets_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAssetMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAssetMetaRequest) ProtoMessage() {}

func (x *FetchAssetMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAssetMetaRequest.ProtoReflect.Descriptor instead.
func (*FetchAssetMetaRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{55}
}

func (m *FetchAssetMetaRequest) GetAsset() isFetchAssetMetaRequest_Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetAssetId() []byte {
	if x, ok := x.GetAsset().(*FetchAssetMetaRequest_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetMetaHash() []byte {
	if x, ok := x.GetAsset().(*FetchAssetMetaRequest_MetaHash); ok {
		return x.MetaHash
	}
	return nil
}

type isFetchAssetMetaRequest_Asset interface {
	isFetchAssetMetaRequest_Asset()
}

type FetchAssetMetaRequest_AssetId struct {
	// The asset ID of the asset to fetch the meta for.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type FetchAssetMetaRequest_MetaHash struct {
	// The 32-byte meta hash of the asset meta.
	MetaHash []byte `protobuf:"bytes,2,opt,name=meta_hash,json=metaHash,proto3,oneof"`
}

func (*FetchAssetMetaRequest_AssetId) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_MetaHash) isFetchAssetMetaRequest_Asset() {}

var File_taprootassets_proto protoreflect.FileDescriptor

var file_taprootassets_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x22, 0x67, 0x0a,
	0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x70, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x53, 0x69, 0x67, 0x22, 0xa8, 0x04, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x13,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4b, 0x65, 0x79, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0xa1,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22,
	0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55,
	0x74, 0x78, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x74, 0x53, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x1a, 0x54, 0x0a, 0x11, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0x50, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x22, 0x94, 0x01, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x12,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0xa9, 0x02, 0x0a,
	0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x22, 0x35, 0x0a,
	0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x12, 0x30,
	0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61,
	0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x73, 0x0a, 0x09, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x70, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x70, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x22, 0x48, 0x0a, 0x0a,
	0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x60, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x72, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x22, 0x4d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x2b, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x4e, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a,
	0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0,
	0x02, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x74, 0x78, 0x6f,
	0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x75, 0x74, 0x78, 0x6f, 0x41, 0x6d, 0x74, 0x53, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x74, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x53, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6e,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe6, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x58, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x21, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x1d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x15, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x42, 0x07,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2a, 0x28, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x2a, 0x25, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x89, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49,
	0x56, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x52, 0x4f,
	0x4f, 0x54, 0x10, 0x03, 0x2a, 0xd0, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xd4, 0x09, 0x0a, 0x0d, 0x54, 0x61, 0x70, 0x72,
	0x6f, 0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x53, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x35,
	0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74,
	0x66, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x74,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taprootassets_proto_rawDescOnce sync.Once
	file_taprootassets_proto_rawDescData = file_taprootassets_proto_rawDesc
)

func file_taprootassets_proto_rawDescGZIP() []byte {
	file_taprootassets_proto_rawDescOnce.Do(func() {
		file_taprootassets_proto_rawDescData = protoimpl.X.CompressGZIP(file_taprootassets_proto_rawDescData)
	})
	return file_taprootassets_proto_rawDescData
}

var file_taprootassets_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_taprootassets_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_taprootassets_proto_goTypes = []interface{}{
	(AssetType)(0),                              // 0: taprpc.AssetType
	(AssetMetaType)(0),                          // 1: taprpc.AssetMetaType
	(OutputType)(0),                             // 2: taprpc.OutputType
	(AddrEventStatus)(0),                        // 3: taprpc.AddrEventStatus
	(*AssetMeta)(nil),                           // 4: taprpc.AssetMeta
	(*ListAssetRequest)(nil),                    // 5: taprpc.ListAssetRequest
	(*AnchorInfo)(nil),                          // 6: taprpc.AnchorInfo
	(*GenesisInfo)(nil),                         // 7: taprpc.GenesisInfo
	(*AssetGroup)(nil),                          // 8: taprpc.AssetGroup
	(*Asset)(nil),                               // 9: taprpc.Asset
	(*PrevWitness)(nil),                         // 10: taprpc.PrevWitness
	(*SplitCommitment)(nil),                     // 11: taprpc.SplitCommitment
	(*ListAssetResponse)(nil),                   // 12: taprpc.ListAssetResponse
	(*ListUtxosRequest)(nil),                    // 13: taprpc.ListUtxosRequest
	(*ManagedUtxo)(nil),                         // 14: taprpc.ManagedUtxo
	(*ListUtxosResponse)(nil),                   // 15: taprpc.ListUtxosResponse
	(*ListGroupsRequest)(nil),                   // 16: taprpc.ListGroupsRequest
	(*AssetHumanReadable)(nil),                  // 17: taprpc.AssetHumanReadable
	(*GroupedAssets)(nil),                       // 18: taprpc.GroupedAssets
	(*ListGroupsResponse)(nil),                  // 19: taprpc.ListGroupsResponse
	(*ListBalancesRequest)(nil),                 // 20: taprpc.ListBalancesRequest
	(*AssetBalance)(nil),                        // 21: taprpc.AssetBalance
	(*AssetGroupBalance)(nil),                   // 22: taprpc.AssetGroupBalance
	(*ListBalancesResponse)(nil),                // 23: taprpc.ListBalancesResponse
	(*ListTransfersRequest)(nil),                // 24: taprpc.ListTransfersRequest
	(*ListTransfersResponse)(nil),               // 25: taprpc.ListTransfersResponse
	(*AssetTransfer)(nil),                       // 26: taprpc.AssetTransfer
	(*TransferInput)(nil),                       // 27: taprpc.TransferInput
	(*TransferOutputAnchor)(nil),                // 28: taprpc.TransferOutputAnchor
	(*TransferOutput)(nil),                      // 29: taprpc.TransferOutput
	(*StopRequest)(nil),                         // 30: taprpc.StopRequest
	(*StopResponse)(nil),                        // 31: taprpc.StopResponse
	(*DebugLevelRequest)(nil),                   // 32: taprpc.DebugLevelRequest
	(*DebugLevelResponse)(nil),                  // 33: taprpc.DebugLevelResponse
	(*Addr)(nil),                                // 34: taprpc.Addr
	(*QueryAddrRequest)(nil),                    // 35: taprpc.QueryAddrRequest
	(*QueryAddrResponse)(nil),                   // 36: taprpc.QueryAddrResponse
	(*NewAddrRequest)(nil),                      // 37: taprpc.NewAddrRequest
	(*ScriptKey)(nil),                           // 38: taprpc.ScriptKey
	(*KeyLocator)(nil),                          // 39: taprpc.KeyLocator
	(*KeyDescriptor)(nil),                       // 40: taprpc.KeyDescriptor
	(*DecodeAddrRequest)(nil),                   // 41: taprpc.DecodeAddrRequest
	(*ProofFile)(nil),                           // 42: taprpc.ProofFile
	(*ProofVerifyResponse)(nil),                 // 43: taprpc.ProofVerifyResponse
	(*ExportProofRequest)(nil),                  // 44: taprpc.ExportProofRequest
	(*ImportProofRequest)(nil),                  // 45: taprpc.ImportProofRequest
	(*ImportProofResponse)(nil),                 // 46: taprpc.ImportProofResponse
	(*AddrEvent)(nil),                           // 47: taprpc.AddrEvent
	(*AddrReceivesRequest)(nil),                 // 48: taprpc.AddrReceivesRequest
	(*AddrReceivesResponse)(nil),                // 49: taprpc.AddrReceivesResponse
	(*SendAssetRequest)(nil),                    // 50: taprpc.SendAssetRequest
	(*PrevInputAsset)(nil),                      // 51: taprpc.PrevInputAsset
	(*SendAssetResponse)(nil),                   // 52: taprpc.SendAssetResponse
	(*GetInfoRequest)(nil),                      // 53: taprpc.GetInfoRequest
	(*GetInfoResponse)(nil),                     // 54: taprpc.GetInfoResponse
	(*SubscribeSendAssetEventNtfnsRequest)(nil), // 55: taprpc.SubscribeSendAssetEventNtfnsRequest
	(*SendAssetEvent)(nil),                      // 56: taprpc.SendAssetEvent
	(*ExecuteSendStateEvent)(nil),               // 57: taprpc.ExecuteSendStateEvent
	(*ReceiverProofBackoffWaitEvent)(nil),       // 58: taprpc.ReceiverProofBackoffWaitEvent
	(*FetchAssetMetaRequest)(nil),               // 59: taprpc.FetchAssetMetaRequest
	nil,                                         // 60: taprpc.ListUtxosResponse.ManagedUtxosEntry
	nil,                                         // 61: taprpc.ListGroupsResponse.GroupsEntry
	nil,                                         // 62: taprpc.ListBalancesResponse.AssetBalancesEntry
	nil,                                         // 63: taprpc.ListBalancesResponse.AssetGroupBalancesEntry
}
var file_taprootassets_proto_depIdxs = []int32{
	1,  // 0: taprpc.AssetMeta.type:type_name -> taprpc.AssetMetaType
	7,  // 1: taprpc.Asset.asset_genesis:type_name -> taprpc.GenesisInfo
	0,  // 2: taprpc.Asset.asset_type:type_name -> taprpc.AssetType
	8,  // 3: taprpc.Asset.asset_group:type_name -> taprpc.AssetGroup
	6,  // 4: taprpc.Asset.chain_anchor:type_name -> taprpc.AnchorInfo
	10, // 5: taprpc.Asset.prev_witnesses:type_name -> taprpc.PrevWitness
	51, // 6: taprpc.PrevWitness.prev_id:type_name -> taprpc.PrevInputAsset
	11, // 7: taprpc.PrevWitness.split_commitment:type_name -> taprpc.SplitCommitment
	9,  // 8: taprpc.SplitCommitment.root_asset:type_name -> taprpc.Asset
	9,  // 9: taprpc.ListAssetResponse.assets:type_name -> taprpc.Asset
	9,  // 10: taprpc.ManagedUtxo.assets:type_name -> taprpc.Asset
	60, // 11: taprpc.ListUtxosResponse.managed_utxos:type_name -> taprpc.ListUtxosResponse.ManagedUtxosEntry
	0,  // 12: taprpc.AssetHumanReadable.type:type_name -> taprpc.AssetType
	17, // 13: taprpc.GroupedAssets.assets:type_name -> taprpc.AssetHumanReadable
	61, // 14: taprpc.ListGroupsResponse.groups:type_name -> taprpc.ListGroupsResponse.GroupsEntry
	7,  // 15: taprpc.AssetBalance.asset_genesis:type_name -> taprpc.GenesisInfo
	0,  // 16: taprpc.AssetBalance.asset_type:type_name -> taprpc.AssetType
	62, // 17: taprpc.ListBalancesResponse.asset_balances:type_name -> taprpc.ListBalancesResponse.AssetBalancesEntry
	63, // 18: taprpc.ListBalancesResponse.asset_group_balances:type_name -> taprpc.ListBalancesResponse.AssetGroupBalancesEntry
	26, // 19: taprpc.ListTransfersResponse.transfers:type_name -> taprpc.AssetTransfer
	27, // 20: taprpc.AssetTransfer.inputs:type_name -> taprpc.TransferInput
	29, // 21: taprpc.AssetTransfer.outputs:type_name -> taprpc.TransferOutput
	28, // 22: taprpc.TransferOutput.anchor:type_name -> taprpc.TransferOutputAnchor
	2,  // 23: taprpc.TransferOutput.output_type:type_name -> taprpc.OutputType
	0,  // 24: taprpc.Addr.asset_type:type_name -> taprpc.AssetType
	34, // 25: taprpc.QueryAddrResponse.addrs:type_name -> taprpc.Addr
	38, // 26: taprpc.NewAddrRequest.script_key:type_name -> taprpc.ScriptKey
	40, // 27: taprpc.NewAddrRequest.internal_key:type_name -> taprpc.KeyDescriptor
	40, // 28: taprpc.ScriptKey.key_desc:type_name -> taprpc.KeyDescriptor
	39, // 29: taprpc.KeyDescriptor.key_loc:type_name -> taprpc.KeyLocator
	34, // 30: taprpc.AddrEvent.addr:type_name -> taprpc.Addr
	3,  // 31: taprpc.AddrEvent.status:type_name -> taprpc.AddrEventStatus
	3,  // 32: taprpc.AddrReceivesRequest.filter_status:type_name -> taprpc.AddrEventStatus
	47, // 33: taprpc.AddrReceivesResponse.events:type_name -> taprpc.AddrEvent
	26, // 34: taprpc.SendAssetResponse.transfer:type_name -> taprpc.AssetTransfer
	57, // 35: taprpc.SendAssetEvent.execute_send_state_event:type_name -> taprpc.ExecuteSendStateEvent
	58, // 36: taprpc.SendAssetEvent.receiver_proof_backoff_wait_event:type_name -> taprpc.ReceiverProofBackoffWaitEvent
	14, // 37: taprpc.ListUtxosResponse.ManagedUtxosEntry.value:type_name -> taprpc.ManagedUtxo
	18, // 38: taprpc.ListGroupsResponse.GroupsEntry.value:type_name -> taprpc.GroupedAssets
	21, // 39: taprpc.ListBalancesResponse.AssetBalancesEntry.value:type_name -> taprpc.AssetBalance
	22, // 40: taprpc.ListBalancesResponse.AssetGroupBalancesEntry.value:type_name -> taprpc.AssetGroupBalance
	5,  // 41: taprpc.TaprootAssets.ListAssets:input_type -> taprpc.ListAssetRequest
	13, // 42: taprpc.TaprootAssets.ListUtxos:input_type -> taprpc.ListUtxosRequest
	16, // 43: taprpc.TaprootAssets.ListGroups:input_type -> taprpc.ListGroupsRequest
	20, // 44: taprpc.TaprootAssets.ListBalances:input_type -> taprpc.ListBalancesRequest
	24, // 45: taprpc.TaprootAssets.ListTransfers:input_type -> taprpc.ListTransfersRequest
	30, // 46: taprpc.TaprootAssets.StopDaemon:input_type -> taprpc.StopRequest
	32, // 47: taprpc.TaprootAssets.DebugLevel:input_type -> taprpc.DebugLevelRequest
	35, // 48: taprpc.TaprootAssets.QueryAddrs:input_type -> taprpc.QueryAddrRequest
	37, // 49: taprpc.TaprootAssets.NewAddr:input_type -> taprpc.NewAddrRequest
	41, // 50: taprpc.TaprootAssets.DecodeAddr:input_type -> taprpc.DecodeAddrRequest
	48, // 51: taprpc.TaprootAssets.AddrReceives:input_type -> taprpc.AddrReceivesRequest
	42, // 52: taprpc.TaprootAssets.VerifyProof:input_type -> taprpc.ProofFile
	44, // 53: taprpc.TaprootAssets.ExportProof:input_type -> taprpc.ExportProofRequest
	45, // 54: taprpc.TaprootAssets.ImportProof:input_type -> taprpc.ImportProofRequest
	50, // 55: taprpc.TaprootAssets.SendAsset:input_type -> taprpc.SendAssetRequest
	53, // 56: taprpc.TaprootAssets.GetInfo:input_type -> taprpc.GetInfoRequest
	55, // 57: taprpc.TaprootAssets.SubscribeSendAssetEventNtfns:input_type -> taprpc.SubscribeSendAssetEventNtfnsRequest
	59, // 58: taprpc.TaprootAssets.FetchAssetMeta:input_type -> taprpc.FetchAssetMetaRequest
	12, // 59: taprpc.TaprootAssets.ListAssets:output_type -> taprpc.ListAssetResponse
	15, // 60: taprpc.TaprootAssets.ListUtxos:output_type -> taprpc.ListUtxosResponse
	19, // 61: taprpc.TaprootAssets.ListGroups:output_type -> taprpc.ListGroupsResponse
	23, // 62: taprpc.TaprootAssets.ListBalances:output_type -> taprpc.ListBalancesResponse
	25, // 63: taprpc.TaprootAssets.ListTransfers:output_type -> taprpc.ListTransfersResponse
	31, // 64: taprpc.TaprootAssets.StopDaemon:output_type -> taprpc.StopResponse
	33, // 65: taprpc.TaprootAssets.DebugLevel:output_type -> taprpc.DebugLevelResponse
	36, // 66: taprpc.TaprootAssets.QueryAddrs:output_type -> taprpc.QueryAddrResponse
	34, // 67: taprpc.TaprootAssets.NewAddr:output_type -> taprpc.Addr
	34, // 68: taprpc.TaprootAssets.DecodeAddr:output_type -> taprpc.Addr
	49, // 69: taprpc.TaprootAssets.AddrReceives:output_type -> taprpc.AddrReceivesResponse
	43, // 70: taprpc.TaprootAssets.VerifyProof:output_type -> taprpc.ProofVerifyResponse
	42, // 71: taprpc.TaprootAssets.ExportProof:output_type -> taprpc.ProofFile
	46, // 72: taprpc.TaprootAssets.ImportProof:output_type -> taprpc.ImportProofResponse
	52, // 73: taprpc.TaprootAssets.SendAsset:output_type -> taprpc.SendAssetResponse
	54, // 74: taprpc.TaprootAssets.GetInfo:output_type -> taprpc.GetInfoResponse
	56, // 75: taprpc.TaprootAssets.SubscribeSendAssetEventNtfns:output_type -> taprpc.SendAssetEvent
	4,  // 76: taprpc.TaprootAssets.FetchAssetMeta:output_type -> taprpc.AssetMeta
	59, // [59:77] is the sub-list for method output_type
	41, // [41:59] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_taprootassets_proto_init() }
func file_taprootassets_proto_init() {
	if File_taprootassets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_taprootassets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedUtxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetHumanReadable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupedAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetGroupBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOutputAnchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrReceivesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrReceivesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevInputAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSendAssetEventNtfnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSendStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverProofBackoffWaitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taprootassets_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAssetMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taprootassets_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ListBalancesRequest_AssetId)(nil),
		(*ListBalancesRequest_GroupKey)(nil),
	}
	file_taprootassets_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*SendAssetEvent_ExecuteSendStateEvent)(nil),
		(*SendAssetEvent_ReceiverProofBackoffWaitEvent)(nil),
	}
	file_taprootassets_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*FetchAssetMetaRequest_AssetId)(nil),
		(*FetchAssetMetaRequest_MetaHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taprootassets_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taprootassets_proto_goTypes,
		DependencyIndexes: file_taprootassets_proto_depIdxs,
		EnumInfos:         file_taprootassets_proto_enumTypes,
		MessageInfos:      file_taprootassets_proto_msgTypes,
	}.Build()
	File_taprootassets_proto = out.File
	file_taprootassets_proto_rawDesc = nil
	file_taprootassets_proto_goTypes = nil
	file_taprootassets_proto_depIdxs = nil
}
