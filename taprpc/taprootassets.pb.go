// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: taprootassets.proto

package taprpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	// Indicates that an asset is capable of being split/merged, with each of the
	// units being fungible, even across a key asset ID boundary (assuming the
	// key group is the same).
	AssetType_NORMAL AssetType = 0
	// Indicates that an asset is a collectible, meaning that each of the other
	// items under the same key group are not fully fungible with each other.
	// Collectibles also cannot be split or merged.
	AssetType_COLLECTIBLE AssetType = 1
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "NORMAL",
		1: "COLLECTIBLE",
	}
	AssetType_value = map[string]int32{
		"NORMAL":      0,
		"COLLECTIBLE": 1,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{0}
}

type AssetMetaType int32

const (
	// Opaque is used for asset meta blobs that have no true structure and instead
	// should be interpreted as opaque blobs.
	AssetMetaType_META_TYPE_OPAQUE AssetMetaType = 0
	// JSON is used for asset meta blobs that are to be interpreted as valid JSON
	// strings.
	AssetMetaType_META_TYPE_JSON AssetMetaType = 1
)

// Enum value maps for AssetMetaType.
var (
	AssetMetaType_name = map[int32]string{
		0: "META_TYPE_OPAQUE",
		1: "META_TYPE_JSON",
	}
	AssetMetaType_value = map[string]int32{
		"META_TYPE_OPAQUE": 0,
		"META_TYPE_JSON":   1,
	}
)

func (x AssetMetaType) Enum() *AssetMetaType {
	p := new(AssetMetaType)
	*p = x
	return p
}

func (x AssetMetaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetMetaType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[1].Descriptor()
}

func (AssetMetaType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[1]
}

func (x AssetMetaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetMetaType.Descriptor instead.
func (AssetMetaType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{1}
}

type AssetVersion int32

const (
	// ASSET_VERSION_V0 is the default asset version. This version will include
	// the witness vector in the leaf for a tap commitment.
	AssetVersion_ASSET_VERSION_V0 AssetVersion = 0
	// ASSET_VERSION_V1 is the asset version that leaves out the witness vector
	// from the MS-SMT leaf encoding.
	AssetVersion_ASSET_VERSION_V1 AssetVersion = 1
)

// Enum value maps for AssetVersion.
var (
	AssetVersion_name = map[int32]string{
		0: "ASSET_VERSION_V0",
		1: "ASSET_VERSION_V1",
	}
	AssetVersion_value = map[string]int32{
		"ASSET_VERSION_V0": 0,
		"ASSET_VERSION_V1": 1,
	}
)

func (x AssetVersion) Enum() *AssetVersion {
	p := new(AssetVersion)
	*p = x
	return p
}

func (x AssetVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[2].Descriptor()
}

func (AssetVersion) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[2]
}

func (x AssetVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetVersion.Descriptor instead.
func (AssetVersion) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{2}
}

type OutputType int32

const (
	// OUTPUT_TYPE_SIMPLE is a plain full-value or split output that is not a
	// split root and does not carry passive assets. In case of a split, the
	// asset of this output has a split commitment.
	OutputType_OUTPUT_TYPE_SIMPLE OutputType = 0
	// OUTPUT_TYPE_SPLIT_ROOT is a split root output that carries the change
	// from a split or a tombstone from a non-interactive full value send
	// output. In either case, the asset of this output has a tx witness.
	OutputType_OUTPUT_TYPE_SPLIT_ROOT OutputType = 1
)

// Enum value maps for OutputType.
var (
	OutputType_name = map[int32]string{
		0: "OUTPUT_TYPE_SIMPLE",
		1: "OUTPUT_TYPE_SPLIT_ROOT",
	}
	OutputType_value = map[string]int32{
		"OUTPUT_TYPE_SIMPLE":     0,
		"OUTPUT_TYPE_SPLIT_ROOT": 1,
	}
)

func (x OutputType) Enum() *OutputType {
	p := new(OutputType)
	*p = x
	return p
}

func (x OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[3].Descriptor()
}

func (OutputType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[3]
}

func (x OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputType.Descriptor instead.
func (OutputType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{3}
}

// ProofDeliveryStatus is an enum that describes the status of the delivery of
// a proof associated with an asset transfer output.
type ProofDeliveryStatus int32

const (
	// Delivery is not applicable; the proof will not be delivered.
	ProofDeliveryStatus_PROOF_DELIVERY_STATUS_NOT_APPLICABLE ProofDeliveryStatus = 0
	// The proof has been successfully delivered.
	ProofDeliveryStatus_PROOF_DELIVERY_STATUS_COMPLETE ProofDeliveryStatus = 1
	// The proof is pending delivery. This status indicates that the proof has
	// not yet been delivered successfully. One or more attempts at proof
	// delivery may have been made.
	ProofDeliveryStatus_PROOF_DELIVERY_STATUS_PENDING ProofDeliveryStatus = 2
)

// Enum value maps for ProofDeliveryStatus.
var (
	ProofDeliveryStatus_name = map[int32]string{
		0: "PROOF_DELIVERY_STATUS_NOT_APPLICABLE",
		1: "PROOF_DELIVERY_STATUS_COMPLETE",
		2: "PROOF_DELIVERY_STATUS_PENDING",
	}
	ProofDeliveryStatus_value = map[string]int32{
		"PROOF_DELIVERY_STATUS_NOT_APPLICABLE": 0,
		"PROOF_DELIVERY_STATUS_COMPLETE":       1,
		"PROOF_DELIVERY_STATUS_PENDING":        2,
	}
)

func (x ProofDeliveryStatus) Enum() *ProofDeliveryStatus {
	p := new(ProofDeliveryStatus)
	*p = x
	return p
}

func (x ProofDeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofDeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[4].Descriptor()
}

func (ProofDeliveryStatus) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[4]
}

func (x ProofDeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofDeliveryStatus.Descriptor instead.
func (ProofDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{4}
}

type AddrVersion int32

const (
	// ADDR_VERSION_UNSPECIFIED is the default value for an address version in
	// an RPC message. It is unmarshalled to the latest address version.
	AddrVersion_ADDR_VERSION_UNSPECIFIED AddrVersion = 0
	// ADDR_VERSION_V0 is the initial address version.
	AddrVersion_ADDR_VERSION_V0 AddrVersion = 1
	// ADDR_VERSION_V1 is the address version that uses V2 Taproot Asset
	// commitments.
	AddrVersion_ADDR_VERSION_V1 AddrVersion = 2
)

// Enum value maps for AddrVersion.
var (
	AddrVersion_name = map[int32]string{
		0: "ADDR_VERSION_UNSPECIFIED",
		1: "ADDR_VERSION_V0",
		2: "ADDR_VERSION_V1",
	}
	AddrVersion_value = map[string]int32{
		"ADDR_VERSION_UNSPECIFIED": 0,
		"ADDR_VERSION_V0":          1,
		"ADDR_VERSION_V1":          2,
	}
)

func (x AddrVersion) Enum() *AddrVersion {
	p := new(AddrVersion)
	*p = x
	return p
}

func (x AddrVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddrVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[5].Descriptor()
}

func (AddrVersion) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[5]
}

func (x AddrVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddrVersion.Descriptor instead.
func (AddrVersion) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{5}
}

type ScriptKeyType int32

const (
	// The type of script key is not known. This should only be stored for assets
	// where we don't know the internal key of the script key (e.g. for
	// imported proofs).
	ScriptKeyType_SCRIPT_KEY_UNKNOWN ScriptKeyType = 0
	// The script key is a normal BIP-86 key. This means that the internal key is
	// turned into a Taproot output key by applying a BIP-86 tweak to it.
	ScriptKeyType_SCRIPT_KEY_BIP86 ScriptKeyType = 1
	// The script key is a key that contains a script path that is defined by the
	// user and is therefore external to the tapd wallet. Spending this key
	// requires providing a specific witness and must be signed through the vPSBT
	// signing flow.
	ScriptKeyType_SCRIPT_KEY_SCRIPT_PATH_EXTERNAL ScriptKeyType = 2
	// The script key is a specific un-spendable key that indicates a burnt asset.
	// Assets with this key type can never be spent again, as a burn key is a
	// tweaked NUMS key that nobody knows the private key for.
	ScriptKeyType_SCRIPT_KEY_BURN ScriptKeyType = 3
	// The script key is a specific un-spendable key that indicates a tombstone
	// output. This is only the case for zero-value assets that result from a
	// non-interactive (TAP address) send where no change was left over.
	ScriptKeyType_SCRIPT_KEY_TOMBSTONE ScriptKeyType = 4
	// The script key is used for an asset that resides within a Taproot Asset
	// Channel. That means the script key is either a funding key (OP_TRUE), a
	// commitment output key (to_local, to_remote, htlc), or a HTLC second-level
	// transaction output key. Keys related to channels are not shown in asset
	// balances (unless specifically requested) and are never used for coin
	// selection.
	ScriptKeyType_SCRIPT_KEY_CHANNEL ScriptKeyType = 5
)

// Enum value maps for ScriptKeyType.
var (
	ScriptKeyType_name = map[int32]string{
		0: "SCRIPT_KEY_UNKNOWN",
		1: "SCRIPT_KEY_BIP86",
		2: "SCRIPT_KEY_SCRIPT_PATH_EXTERNAL",
		3: "SCRIPT_KEY_BURN",
		4: "SCRIPT_KEY_TOMBSTONE",
		5: "SCRIPT_KEY_CHANNEL",
	}
	ScriptKeyType_value = map[string]int32{
		"SCRIPT_KEY_UNKNOWN":              0,
		"SCRIPT_KEY_BIP86":                1,
		"SCRIPT_KEY_SCRIPT_PATH_EXTERNAL": 2,
		"SCRIPT_KEY_BURN":                 3,
		"SCRIPT_KEY_TOMBSTONE":            4,
		"SCRIPT_KEY_CHANNEL":              5,
	}
)

func (x ScriptKeyType) Enum() *ScriptKeyType {
	p := new(ScriptKeyType)
	*p = x
	return p
}

func (x ScriptKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[6].Descriptor()
}

func (ScriptKeyType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[6]
}

func (x ScriptKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptKeyType.Descriptor instead.
func (ScriptKeyType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{6}
}

type AddrEventStatus int32

const (
	AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN               AddrEventStatus = 0
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_DETECTED  AddrEventStatus = 1
	AddrEventStatus_ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED AddrEventStatus = 2
	AddrEventStatus_ADDR_EVENT_STATUS_PROOF_RECEIVED        AddrEventStatus = 3
	AddrEventStatus_ADDR_EVENT_STATUS_COMPLETED             AddrEventStatus = 4
)

// Enum value maps for AddrEventStatus.
var (
	AddrEventStatus_name = map[int32]string{
		0: "ADDR_EVENT_STATUS_UNKNOWN",
		1: "ADDR_EVENT_STATUS_TRANSACTION_DETECTED",
		2: "ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED",
		3: "ADDR_EVENT_STATUS_PROOF_RECEIVED",
		4: "ADDR_EVENT_STATUS_COMPLETED",
	}
	AddrEventStatus_value = map[string]int32{
		"ADDR_EVENT_STATUS_UNKNOWN":               0,
		"ADDR_EVENT_STATUS_TRANSACTION_DETECTED":  1,
		"ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED": 2,
		"ADDR_EVENT_STATUS_PROOF_RECEIVED":        3,
		"ADDR_EVENT_STATUS_COMPLETED":             4,
	}
)

func (x AddrEventStatus) Enum() *AddrEventStatus {
	p := new(AddrEventStatus)
	*p = x
	return p
}

func (x AddrEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddrEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[7].Descriptor()
}

func (AddrEventStatus) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[7]
}

func (x AddrEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddrEventStatus.Descriptor instead.
func (AddrEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{7}
}

type SendState int32

const (
	// Input coin selection to pick out which asset inputs should be spent is
	// executed during this state.
	SendState_SEND_STATE_VIRTUAL_INPUT_SELECT SendState = 0
	// The virtual transaction is signed during this state.
	SendState_SEND_STATE_VIRTUAL_SIGN SendState = 1
	// The Bitcoin anchor transaction is signed during this state.
	SendState_SEND_STATE_ANCHOR_SIGN SendState = 2
	// The outbound packet is written to the database during this state,
	// including the partial proof suffixes. Only parcels that complete this
	// state can be resumed on restart.
	SendState_SEND_STATE_LOG_COMMITMENT SendState = 3
	// The Bitcoin anchor transaction is broadcast to the network during this
	// state.
	SendState_SEND_STATE_BROADCAST SendState = 4
	// The on-chain anchor transaction needs to reach at least 1 confirmation.
	// This state waits for the confirmation.
	SendState_SEND_STATE_WAIT_CONFIRMATION SendState = 5
	// The anchor transaction was confirmed in a block and the full proofs can
	// now be constructed during this stage.
	SendState_SEND_STATE_STORE_PROOFS SendState = 6
	// The full proofs are sent to the recipient(s) with the proof courier
	// service during this state.
	SendState_SEND_STATE_TRANSFER_PROOFS SendState = 7
	// The send state machine has completed the send process.
	SendState_SEND_STATE_COMPLETED SendState = 8
)

// Enum value maps for SendState.
var (
	SendState_name = map[int32]string{
		0: "SEND_STATE_VIRTUAL_INPUT_SELECT",
		1: "SEND_STATE_VIRTUAL_SIGN",
		2: "SEND_STATE_ANCHOR_SIGN",
		3: "SEND_STATE_LOG_COMMITMENT",
		4: "SEND_STATE_BROADCAST",
		5: "SEND_STATE_WAIT_CONFIRMATION",
		6: "SEND_STATE_STORE_PROOFS",
		7: "SEND_STATE_TRANSFER_PROOFS",
		8: "SEND_STATE_COMPLETED",
	}
	SendState_value = map[string]int32{
		"SEND_STATE_VIRTUAL_INPUT_SELECT": 0,
		"SEND_STATE_VIRTUAL_SIGN":         1,
		"SEND_STATE_ANCHOR_SIGN":          2,
		"SEND_STATE_LOG_COMMITMENT":       3,
		"SEND_STATE_BROADCAST":            4,
		"SEND_STATE_WAIT_CONFIRMATION":    5,
		"SEND_STATE_STORE_PROOFS":         6,
		"SEND_STATE_TRANSFER_PROOFS":      7,
		"SEND_STATE_COMPLETED":            8,
	}
)

func (x SendState) Enum() *SendState {
	p := new(SendState)
	*p = x
	return p
}

func (x SendState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendState) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[8].Descriptor()
}

func (SendState) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[8]
}

func (x SendState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendState.Descriptor instead.
func (SendState) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{8}
}

type ParcelType int32

const (
	// The parcel is an address parcel.
	ParcelType_PARCEL_TYPE_ADDRESS ParcelType = 0
	// The parcel type is a pre-signed parcel where the virtual transactions are
	// signed outside of the send state machine. Parcels of this type will only
	// get send states starting from SEND_STATE_ANCHOR_SIGN.
	ParcelType_PARCEL_TYPE_PRE_SIGNED ParcelType = 1
	// The parcel is pending and was resumed on the latest restart of the
	// daemon. The original parcel type (address or pre-signed) is not known
	// anymore, as it's not relevant for the remaining steps. Parcels of this
	// type will only get send states starting from SEND_STATE_BROADCAST.
	ParcelType_PARCEL_TYPE_PENDING ParcelType = 2
	// The parcel type is a pre-anchored parcel where the full anchor
	// transaction and all proofs are already available. Parcels of this type
	// will only get send states starting from SEND_STATE_LOG_COMMITMENT.
	ParcelType_PARCEL_TYPE_PRE_ANCHORED ParcelType = 3
)

// Enum value maps for ParcelType.
var (
	ParcelType_name = map[int32]string{
		0: "PARCEL_TYPE_ADDRESS",
		1: "PARCEL_TYPE_PRE_SIGNED",
		2: "PARCEL_TYPE_PENDING",
		3: "PARCEL_TYPE_PRE_ANCHORED",
	}
	ParcelType_value = map[string]int32{
		"PARCEL_TYPE_ADDRESS":      0,
		"PARCEL_TYPE_PRE_SIGNED":   1,
		"PARCEL_TYPE_PENDING":      2,
		"PARCEL_TYPE_PRE_ANCHORED": 3,
	}
)

func (x ParcelType) Enum() *ParcelType {
	p := new(ParcelType)
	*p = x
	return p
}

func (x ParcelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParcelType) Descriptor() protoreflect.EnumDescriptor {
	return file_taprootassets_proto_enumTypes[9].Descriptor()
}

func (ParcelType) Type() protoreflect.EnumType {
	return &file_taprootassets_proto_enumTypes[9]
}

func (x ParcelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParcelType.Descriptor instead.
func (ParcelType) EnumDescriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{9}
}

type AssetMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw data of the asset meta data. Based on the type below, this may be
	// structured data such as a text file or PDF. The size of the data is limited
	// to 1MiB.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The type of the asset meta data.
	Type AssetMetaType `protobuf:"varint,2,opt,name=type,proto3,enum=taprpc.AssetMetaType" json:"type,omitempty"`
	// The hash of the meta. This is the hash of the TLV serialization of the meta
	// itself.
	MetaHash      []byte `protobuf:"bytes,3,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetMeta) Reset() {
	*x = AssetMeta{}
	mi := &file_taprootassets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetMeta) ProtoMessage() {}

func (x *AssetMeta) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetMeta.ProtoReflect.Descriptor instead.
func (*AssetMeta) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{0}
}

func (x *AssetMeta) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AssetMeta) GetType() AssetMetaType {
	if x != nil {
		return x.Type
	}
	return AssetMetaType_META_TYPE_OPAQUE
}

func (x *AssetMeta) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

type ListAssetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WithWitness   bool                   `protobuf:"varint,1,opt,name=with_witness,json=withWitness,proto3" json:"with_witness,omitempty"`
	IncludeSpent  bool                   `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
	IncludeLeased bool                   `protobuf:"varint,3,opt,name=include_leased,json=includeLeased,proto3" json:"include_leased,omitempty"`
	// List assets that aren't confirmed yet. Only freshly minted assets will
	// show in the asset list with a block height of 0. All other forms of
	// unconfirmed assets will not appear in the list until the transaction is
	// confirmed (check either transfers or receives for unconfirmed outbound or
	// inbound assets).
	IncludeUnconfirmedMints bool `protobuf:"varint,4,opt,name=include_unconfirmed_mints,json=includeUnconfirmedMints,proto3" json:"include_unconfirmed_mints,omitempty"`
	// Only return assets with amount greater or equal to this value.
	MinAmount uint64 `protobuf:"varint,5,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// Only return assets with amount less or equal to this value.
	MaxAmount uint64 `protobuf:"varint,6,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// Only return assets that belong to the group with this key.
	GroupKey []byte `protobuf:"bytes,7,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// Return all assets that use this script key.
	ScriptKey *ScriptKey `protobuf:"bytes,8,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// Return all assets that are currently anchored on this outpoint.
	AnchorOutpoint *OutPoint `protobuf:"bytes,9,opt,name=anchor_outpoint,json=anchorOutpoint,proto3" json:"anchor_outpoint,omitempty"`
	// The script key type to filter the assets by. If not set, only assets with
	// a BIP-0086 script key will be returned (which is the equivalent of
	// setting script_key_type.explicit_type = SCRIPT_KEY_BIP86). If the type
	// is set to SCRIPT_KEY_BURN or SCRIPT_KEY_TOMBSTONE the include_spent flag
	// will automatically be set to true, because assets of that type are always
	// marked as spent.
	ScriptKeyType *ScriptKeyTypeQuery `protobuf:"bytes,10,opt,name=script_key_type,json=scriptKeyType,proto3" json:"script_key_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAssetRequest) Reset() {
	*x = ListAssetRequest{}
	mi := &file_taprootassets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRequest) ProtoMessage() {}

func (x *ListAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRequest.ProtoReflect.Descriptor instead.
func (*ListAssetRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{1}
}

func (x *ListAssetRequest) GetWithWitness() bool {
	if x != nil {
		return x.WithWitness
	}
	return false
}

func (x *ListAssetRequest) GetIncludeSpent() bool {
	if x != nil {
		return x.IncludeSpent
	}
	return false
}

func (x *ListAssetRequest) GetIncludeLeased() bool {
	if x != nil {
		return x.IncludeLeased
	}
	return false
}

func (x *ListAssetRequest) GetIncludeUnconfirmedMints() bool {
	if x != nil {
		return x.IncludeUnconfirmedMints
	}
	return false
}

func (x *ListAssetRequest) GetMinAmount() uint64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *ListAssetRequest) GetMaxAmount() uint64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *ListAssetRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *ListAssetRequest) GetScriptKey() *ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *ListAssetRequest) GetAnchorOutpoint() *OutPoint {
	if x != nil {
		return x.AnchorOutpoint
	}
	return nil
}

func (x *ListAssetRequest) GetScriptKeyType() *ScriptKeyTypeQuery {
	if x != nil {
		return x.ScriptKeyType
	}
	return nil
}

type AnchorInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction that anchors the Taproot Asset commitment where the asset
	//
	//	resides.
	AnchorTx []byte `protobuf:"bytes,1,opt,name=anchor_tx,json=anchorTx,proto3" json:"anchor_tx,omitempty"`
	// The block hash the contains the anchor transaction above.
	AnchorBlockHash string `protobuf:"bytes,3,opt,name=anchor_block_hash,json=anchorBlockHash,proto3" json:"anchor_block_hash,omitempty"`
	// The outpoint (txid:vout) that stores the Taproot Asset commitment.
	AnchorOutpoint string `protobuf:"bytes,4,opt,name=anchor_outpoint,json=anchorOutpoint,proto3" json:"anchor_outpoint,omitempty"`
	// The raw internal key that was used to create the anchor Taproot output key.
	InternalKey []byte `protobuf:"bytes,5,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taproot merkle root hash of the anchor output the asset was committed
	// to. If there is no Tapscript sibling, this is equal to the Taproot Asset
	// root commitment hash.
	MerkleRoot []byte `protobuf:"bytes,6,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The serialized preimage of a Tapscript sibling, if there was one. If this
	// is empty, then the merkle_root hash is equal to the Taproot root hash of the
	// anchor output.
	TapscriptSibling []byte `protobuf:"bytes,7,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	// The height of the block which contains the anchor transaction.
	BlockHeight uint32 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The UTC Unix timestamp of the block containing the anchor transaction.
	BlockTimestamp int64 `protobuf:"varint,9,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnchorInfo) Reset() {
	*x = AnchorInfo{}
	mi := &file_taprootassets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfo) ProtoMessage() {}

func (x *AnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfo.ProtoReflect.Descriptor instead.
func (*AnchorInfo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{2}
}

func (x *AnchorInfo) GetAnchorTx() []byte {
	if x != nil {
		return x.AnchorTx
	}
	return nil
}

func (x *AnchorInfo) GetAnchorBlockHash() string {
	if x != nil {
		return x.AnchorBlockHash
	}
	return ""
}

func (x *AnchorInfo) GetAnchorOutpoint() string {
	if x != nil {
		return x.AnchorOutpoint
	}
	return ""
}

func (x *AnchorInfo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *AnchorInfo) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *AnchorInfo) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *AnchorInfo) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *AnchorInfo) GetBlockTimestamp() int64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

type GenesisInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The first outpoint of the transaction that created the asset (txid:vout).
	GenesisPoint string `protobuf:"bytes,1,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	// The name of the asset.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The hash of the meta data for this genesis asset.
	MetaHash []byte `protobuf:"bytes,3,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,5,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The index of the output that carries the unique Taproot Asset commitment in
	// the genesis transaction.
	OutputIndex   uint32 `protobuf:"varint,6,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenesisInfo) Reset() {
	*x = GenesisInfo{}
	mi := &file_taprootassets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisInfo) ProtoMessage() {}

func (x *GenesisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisInfo.ProtoReflect.Descriptor instead.
func (*GenesisInfo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{3}
}

func (x *GenesisInfo) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

func (x *GenesisInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenesisInfo) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

func (x *GenesisInfo) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *GenesisInfo) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *GenesisInfo) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

// This message represents an external key used for deriving and managing
// hierarchical deterministic (HD) wallet addresses according to BIP-86.
type ExternalKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field specifies the extended public key derived at depth 3 of the
	// BIP-86 hierarchy (e.g., m/86'/0'/0'). This key serves as the parent key for
	// deriving child public keys and addresses.
	Xpub string `protobuf:"bytes,1,opt,name=xpub,proto3" json:"xpub,omitempty"`
	// This field specifies the fingerprint of the master key, derived from the
	// first 4 bytes of the hash160 of the master public key. It is used to
	// identify the master key in BIP-86 derivation schemes.
	MasterFingerprint []byte `protobuf:"bytes,2,opt,name=master_fingerprint,json=masterFingerprint,proto3" json:"master_fingerprint,omitempty"`
	// This field specifies the extended BIP-86 derivation path used to derive a
	// child key from the XPub. Starting from the base path of the XPub
	// (e.g., m/86'/0'/0'), this path must contain exactly 5 components in total
	// (e.g., m/86'/0'/0'/0/0), with the additional components defining specific
	// child keys, such as individual addresses.
	DerivationPath string `protobuf:"bytes,3,opt,name=derivation_path,json=derivationPath,proto3" json:"derivation_path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExternalKey) Reset() {
	*x = ExternalKey{}
	mi := &file_taprootassets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalKey) ProtoMessage() {}

func (x *ExternalKey) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalKey.ProtoReflect.Descriptor instead.
func (*ExternalKey) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalKey) GetXpub() string {
	if x != nil {
		return x.Xpub
	}
	return ""
}

func (x *ExternalKey) GetMasterFingerprint() []byte {
	if x != nil {
		return x.MasterFingerprint
	}
	return nil
}

func (x *ExternalKey) GetDerivationPath() string {
	if x != nil {
		return x.DerivationPath
	}
	return ""
}

type GroupKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The internal key for the asset group before any tweaks have been applied.
	// If this field is set then external_key must be empty, and vice versa.
	RawKey *KeyDescriptor `protobuf:"bytes,1,opt,name=raw_key,json=rawKey,proto3" json:"raw_key,omitempty"`
	// The genesis of the group anchor asset, which is used to derive the single
	// tweak for the group key. For a new group key, this will be the genesis of
	// new_asset.
	AnchorGenesis *GenesisInfo `protobuf:"bytes,2,opt,name=anchor_genesis,json=anchorGenesis,proto3" json:"anchor_genesis,omitempty"`
	// The optional root of a tapscript tree that will be used when constructing a
	// new asset group key. This enables future issuance authorized with a script
	// witness.
	TapscriptRoot []byte `protobuf:"bytes,3,opt,name=tapscript_root,json=tapscriptRoot,proto3" json:"tapscript_root,omitempty"`
	// The serialized asset which we are requesting group membership for. A
	// successful request will produce a witness that authorizes this asset to be a
	// member of this asset group.
	NewAsset []byte `protobuf:"bytes,4,opt,name=new_asset,json=newAsset,proto3" json:"new_asset,omitempty"`
	// The external key is an optional field that allows specifying an
	// external signing key for the group virtual transaction during minting.
	// This key enables signing operations to be performed externally, outside
	// the daemon.
	//
	// If this field is set then raw_key must be empty, and vice versa.
	ExternalKey   *ExternalKey `protobuf:"bytes,5,opt,name=external_key,json=externalKey,proto3" json:"external_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupKeyRequest) Reset() {
	*x = GroupKeyRequest{}
	mi := &file_taprootassets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupKeyRequest) ProtoMessage() {}

func (x *GroupKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupKeyRequest.ProtoReflect.Descriptor instead.
func (*GroupKeyRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{5}
}

func (x *GroupKeyRequest) GetRawKey() *KeyDescriptor {
	if x != nil {
		return x.RawKey
	}
	return nil
}

func (x *GroupKeyRequest) GetAnchorGenesis() *GenesisInfo {
	if x != nil {
		return x.AnchorGenesis
	}
	return nil
}

func (x *GroupKeyRequest) GetTapscriptRoot() []byte {
	if x != nil {
		return x.TapscriptRoot
	}
	return nil
}

func (x *GroupKeyRequest) GetNewAsset() []byte {
	if x != nil {
		return x.NewAsset
	}
	return nil
}

func (x *GroupKeyRequest) GetExternalKey() *ExternalKey {
	if x != nil {
		return x.ExternalKey
	}
	return nil
}

type TxOut struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the output being spent.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The script of the output being spent.
	PkScript      []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxOut) Reset() {
	*x = TxOut{}
	mi := &file_taprootassets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOut) ProtoMessage() {}

func (x *TxOut) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOut.ProtoReflect.Descriptor instead.
func (*TxOut) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{6}
}

func (x *TxOut) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxOut) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

type GroupVirtualTx struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The virtual transaction that represents the genesis state transition of a
	// grouped asset.
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The transaction output that represents a grouped asset. The tweaked
	// group key is set as the PkScript of this output. This is used in combination
	// with Tx to produce an asset group witness.
	PrevOut *TxOut `protobuf:"bytes,2,opt,name=prev_out,json=prevOut,proto3" json:"prev_out,omitempty"`
	// The asset ID of the grouped asset in a GroupKeyRequest. This ID is
	// needed to construct a sign descriptor, as it is the single tweak for the
	// group internal key.
	GenesisId []byte `protobuf:"bytes,3,opt,name=genesis_id,json=genesisId,proto3" json:"genesis_id,omitempty"`
	// The tweaked group key for a specific GroupKeyRequest. This is used to
	// construct a complete group key after producing an asset group witness.
	TweakedKey    []byte `protobuf:"bytes,4,opt,name=tweaked_key,json=tweakedKey,proto3" json:"tweaked_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupVirtualTx) Reset() {
	*x = GroupVirtualTx{}
	mi := &file_taprootassets_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupVirtualTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVirtualTx) ProtoMessage() {}

func (x *GroupVirtualTx) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVirtualTx.ProtoReflect.Descriptor instead.
func (*GroupVirtualTx) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{7}
}

func (x *GroupVirtualTx) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *GroupVirtualTx) GetPrevOut() *TxOut {
	if x != nil {
		return x.PrevOut
	}
	return nil
}

func (x *GroupVirtualTx) GetGenesisId() []byte {
	if x != nil {
		return x.GenesisId
	}
	return nil
}

func (x *GroupVirtualTx) GetTweakedKey() []byte {
	if x != nil {
		return x.TweakedKey
	}
	return nil
}

type GroupWitness struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset ID of the pending asset that should be assigned this asset
	// group witness.
	GenesisId []byte `protobuf:"bytes,1,opt,name=genesis_id,json=genesisId,proto3" json:"genesis_id,omitempty"`
	// The serialized witness stack for the asset group.
	Witness       [][]byte `protobuf:"bytes,2,rep,name=witness,proto3" json:"witness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupWitness) Reset() {
	*x = GroupWitness{}
	mi := &file_taprootassets_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupWitness) ProtoMessage() {}

func (x *GroupWitness) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupWitness.ProtoReflect.Descriptor instead.
func (*GroupWitness) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{8}
}

func (x *GroupWitness) GetGenesisId() []byte {
	if x != nil {
		return x.GenesisId
	}
	return nil
}

func (x *GroupWitness) GetWitness() [][]byte {
	if x != nil {
		return x.Witness
	}
	return nil
}

type AssetGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw group key which is a normal public key.
	RawGroupKey []byte `protobuf:"bytes,1,opt,name=raw_group_key,json=rawGroupKey,proto3" json:"raw_group_key,omitempty"`
	// The tweaked group key, which is derived based on the genesis point and also
	// asset type.
	TweakedGroupKey []byte `protobuf:"bytes,2,opt,name=tweaked_group_key,json=tweakedGroupKey,proto3" json:"tweaked_group_key,omitempty"`
	// A witness that authorizes a specific asset to be part of the asset group
	// specified by the above key.
	AssetWitness []byte `protobuf:"bytes,3,opt,name=asset_witness,json=assetWitness,proto3" json:"asset_witness,omitempty"`
	// The root hash of a tapscript tree, which enables future issuance authorized
	// with a script witness.
	TapscriptRoot []byte `protobuf:"bytes,4,opt,name=tapscript_root,json=tapscriptRoot,proto3" json:"tapscript_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroup) Reset() {
	*x = AssetGroup{}
	mi := &file_taprootassets_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroup) ProtoMessage() {}

func (x *AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroup.ProtoReflect.Descriptor instead.
func (*AssetGroup) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{9}
}

func (x *AssetGroup) GetRawGroupKey() []byte {
	if x != nil {
		return x.RawGroupKey
	}
	return nil
}

func (x *AssetGroup) GetTweakedGroupKey() []byte {
	if x != nil {
		return x.TweakedGroupKey
	}
	return nil
}

func (x *AssetGroup) GetAssetWitness() []byte {
	if x != nil {
		return x.AssetWitness
	}
	return nil
}

func (x *AssetGroup) GetTapscriptRoot() []byte {
	if x != nil {
		return x.TapscriptRoot
	}
	return nil
}

type GroupKeyReveal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw group key which is a normal public key.
	RawGroupKey []byte `protobuf:"bytes,1,opt,name=raw_group_key,json=rawGroupKey,proto3" json:"raw_group_key,omitempty"`
	// The tapscript root included in the tweaked group key, which may be empty.
	TapscriptRoot []byte `protobuf:"bytes,2,opt,name=tapscript_root,json=tapscriptRoot,proto3" json:"tapscript_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupKeyReveal) Reset() {
	*x = GroupKeyReveal{}
	mi := &file_taprootassets_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupKeyReveal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupKeyReveal) ProtoMessage() {}

func (x *GroupKeyReveal) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupKeyReveal.ProtoReflect.Descriptor instead.
func (*GroupKeyReveal) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{10}
}

func (x *GroupKeyReveal) GetRawGroupKey() []byte {
	if x != nil {
		return x.RawGroupKey
	}
	return nil
}

func (x *GroupKeyReveal) GetTapscriptRoot() []byte {
	if x != nil {
		return x.TapscriptRoot
	}
	return nil
}

type GenesisReveal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base genesis information in the genesis reveal.
	GenesisBaseReveal *GenesisInfo `protobuf:"bytes,1,opt,name=genesis_base_reveal,json=genesisBaseReveal,proto3" json:"genesis_base_reveal,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GenesisReveal) Reset() {
	*x = GenesisReveal{}
	mi := &file_taprootassets_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisReveal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisReveal) ProtoMessage() {}

func (x *GenesisReveal) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisReveal.ProtoReflect.Descriptor instead.
func (*GenesisReveal) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{11}
}

func (x *GenesisReveal) GetGenesisBaseReveal() *GenesisInfo {
	if x != nil {
		return x.GenesisBaseReveal
	}
	return nil
}

type DecimalDisplay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Decimal display dictates the number of decimal places to shift the amount to
	// the left converting from Taproot Asset integer representation to a
	// UX-recognizable fractional quantity.
	//
	// For example, if the decimal_display value is 2 and there's 100 of those
	// assets, then a wallet would display the amount as "1.00". This field is
	// intended as information for wallets that display balances and has no impact
	// on the behavior of the daemon or any other part of the protocol. This value
	// is encoded in the MetaData field as a JSON field, therefore it is only
	// compatible with assets that have a JSON MetaData field.
	DecimalDisplay uint32 `protobuf:"varint,1,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DecimalDisplay) Reset() {
	*x = DecimalDisplay{}
	mi := &file_taprootassets_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecimalDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalDisplay) ProtoMessage() {}

func (x *DecimalDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalDisplay.ProtoReflect.Descriptor instead.
func (*DecimalDisplay) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{12}
}

func (x *DecimalDisplay) GetDecimalDisplay() uint32 {
	if x != nil {
		return x.DecimalDisplay
	}
	return 0
}

type Asset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of the Taproot Asset.
	Version AssetVersion `protobuf:"varint,1,opt,name=version,proto3,enum=taprpc.AssetVersion" json:"version,omitempty"`
	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,2,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The total amount of the asset stored in this Taproot Asset UTXO.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative lock time, same as Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,6,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The version of the script, only version 0 is defined at present.
	ScriptVersion int32 `protobuf:"varint,7,opt,name=script_version,json=scriptVersion,proto3" json:"script_version,omitempty"`
	// The script key of the asset, which can be spent under Taproot semantics.
	ScriptKey []byte `protobuf:"bytes,9,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// Indicates whether the script key is known to the wallet of the lnd node
	// connected to the Taproot Asset daemon.
	ScriptKeyIsLocal bool `protobuf:"varint,10,opt,name=script_key_is_local,json=scriptKeyIsLocal,proto3" json:"script_key_is_local,omitempty"`
	// The information related to the key group of an asset (if it exists).
	AssetGroup *AssetGroup `protobuf:"bytes,11,opt,name=asset_group,json=assetGroup,proto3" json:"asset_group,omitempty"`
	// Describes where in the chain the asset is currently anchored.
	ChainAnchor   *AnchorInfo    `protobuf:"bytes,12,opt,name=chain_anchor,json=chainAnchor,proto3" json:"chain_anchor,omitempty"`
	PrevWitnesses []*PrevWitness `protobuf:"bytes,13,rep,name=prev_witnesses,json=prevWitnesses,proto3" json:"prev_witnesses,omitempty"`
	// Indicates whether the asset has been spent.
	IsSpent bool `protobuf:"varint,14,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	// If the asset has been leased, this is the owner (application ID) of the
	// lease.
	LeaseOwner []byte `protobuf:"bytes,15,opt,name=lease_owner,json=leaseOwner,proto3" json:"lease_owner,omitempty"`
	// If the asset has been leased, this is the expiry of the lease as a Unix
	// timestamp in seconds.
	LeaseExpiry int64 `protobuf:"varint,16,opt,name=lease_expiry,json=leaseExpiry,proto3" json:"lease_expiry,omitempty"`
	// Indicates whether this transfer was an asset burn. If true, the number of
	// assets in this output are destroyed and can no longer be spent.
	IsBurn bool `protobuf:"varint,17,opt,name=is_burn,json=isBurn,proto3" json:"is_burn,omitempty"`
	// Deprecated, use script_key_type instead!
	// Indicates whether this script key has either been derived by the local
	// wallet or was explicitly declared to be known by using the
	// DeclareScriptKey RPC. Knowing the key conceptually means the key belongs
	// to the local wallet or is at least known by a software that operates on
	// the local wallet. The flag is never serialized in proofs, so this is
	// never explicitly set for keys foreign to the local wallet. Therefore, if
	// this method returns true for a script key, it means the asset with the
	// script key will be shown in the wallet balance.
	ScriptKeyDeclaredKnown bool `protobuf:"varint,18,opt,name=script_key_declared_known,json=scriptKeyDeclaredKnown,proto3" json:"script_key_declared_known,omitempty"`
	// Deprecated, use script_key_type instead!
	// Indicates whether the script key is known to have a Tapscript spend path,
	// meaning that the Taproot merkle root tweak is not empty. This will only
	// ever be true if either script_key_is_local or script_key_internals_known
	// is true as well, since the presence of a Tapscript spend path cannot be
	// determined for script keys that aren't known to the wallet of the local
	// tapd node.
	ScriptKeyHasScriptPath bool `protobuf:"varint,19,opt,name=script_key_has_script_path,json=scriptKeyHasScriptPath,proto3" json:"script_key_has_script_path,omitempty"`
	// This field defines a decimal display value that may be present. If this
	// field is null, it means the presence of a decimal display field is
	// unknown in the current context.
	DecimalDisplay *DecimalDisplay `protobuf:"bytes,20,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
	// The type of the script key. This type is either user-declared when custom
	// script keys are added, or automatically determined by the daemon for
	// standard operations (e.g. BIP-86 keys, burn keys, tombstone keys, channel
	// related keys).
	ScriptKeyType ScriptKeyType `protobuf:"varint,21,opt,name=script_key_type,json=scriptKeyType,proto3,enum=taprpc.ScriptKeyType" json:"script_key_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_taprootassets_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{13}
}

func (x *Asset) GetVersion() AssetVersion {
	if x != nil {
		return x.Version
	}
	return AssetVersion_ASSET_VERSION_V0
}

func (x *Asset) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *Asset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Asset) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Asset) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *Asset) GetScriptVersion() int32 {
	if x != nil {
		return x.ScriptVersion
	}
	return 0
}

func (x *Asset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Asset) GetScriptKeyIsLocal() bool {
	if x != nil {
		return x.ScriptKeyIsLocal
	}
	return false
}

func (x *Asset) GetAssetGroup() *AssetGroup {
	if x != nil {
		return x.AssetGroup
	}
	return nil
}

func (x *Asset) GetChainAnchor() *AnchorInfo {
	if x != nil {
		return x.ChainAnchor
	}
	return nil
}

func (x *Asset) GetPrevWitnesses() []*PrevWitness {
	if x != nil {
		return x.PrevWitnesses
	}
	return nil
}

func (x *Asset) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *Asset) GetLeaseOwner() []byte {
	if x != nil {
		return x.LeaseOwner
	}
	return nil
}

func (x *Asset) GetLeaseExpiry() int64 {
	if x != nil {
		return x.LeaseExpiry
	}
	return 0
}

func (x *Asset) GetIsBurn() bool {
	if x != nil {
		return x.IsBurn
	}
	return false
}

func (x *Asset) GetScriptKeyDeclaredKnown() bool {
	if x != nil {
		return x.ScriptKeyDeclaredKnown
	}
	return false
}

func (x *Asset) GetScriptKeyHasScriptPath() bool {
	if x != nil {
		return x.ScriptKeyHasScriptPath
	}
	return false
}

func (x *Asset) GetDecimalDisplay() *DecimalDisplay {
	if x != nil {
		return x.DecimalDisplay
	}
	return nil
}

func (x *Asset) GetScriptKeyType() ScriptKeyType {
	if x != nil {
		return x.ScriptKeyType
	}
	return ScriptKeyType_SCRIPT_KEY_UNKNOWN
}

type PrevWitness struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PrevId          *PrevInputAsset        `protobuf:"bytes,1,opt,name=prev_id,json=prevId,proto3" json:"prev_id,omitempty"`
	TxWitness       [][]byte               `protobuf:"bytes,2,rep,name=tx_witness,json=txWitness,proto3" json:"tx_witness,omitempty"`
	SplitCommitment *SplitCommitment       `protobuf:"bytes,3,opt,name=split_commitment,json=splitCommitment,proto3" json:"split_commitment,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrevWitness) Reset() {
	*x = PrevWitness{}
	mi := &file_taprootassets_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrevWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevWitness) ProtoMessage() {}

func (x *PrevWitness) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevWitness.ProtoReflect.Descriptor instead.
func (*PrevWitness) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{14}
}

func (x *PrevWitness) GetPrevId() *PrevInputAsset {
	if x != nil {
		return x.PrevId
	}
	return nil
}

func (x *PrevWitness) GetTxWitness() [][]byte {
	if x != nil {
		return x.TxWitness
	}
	return nil
}

func (x *PrevWitness) GetSplitCommitment() *SplitCommitment {
	if x != nil {
		return x.SplitCommitment
	}
	return nil
}

type SplitCommitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootAsset     *Asset                 `protobuf:"bytes,1,opt,name=root_asset,json=rootAsset,proto3" json:"root_asset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitCommitment) Reset() {
	*x = SplitCommitment{}
	mi := &file_taprootassets_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCommitment) ProtoMessage() {}

func (x *SplitCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCommitment.ProtoReflect.Descriptor instead.
func (*SplitCommitment) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{15}
}

func (x *SplitCommitment) GetRootAsset() *Asset {
	if x != nil {
		return x.RootAsset
	}
	return nil
}

type ListAssetResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Assets []*Asset               `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	// This is a count of unconfirmed outgoing transfers. Unconfirmed transfers
	// do not appear as assets in this endpoint response.
	UnconfirmedTransfers uint64 `protobuf:"varint,2,opt,name=unconfirmed_transfers,json=unconfirmedTransfers,proto3" json:"unconfirmed_transfers,omitempty"`
	// This is a count of freshly minted assets that haven't been confirmed on
	// chain yet. These assets will appear in the asset list with a block height
	// of 0 if include_unconfirmed_mints is set to true in the request.
	UnconfirmedMints uint64 `protobuf:"varint,3,opt,name=unconfirmed_mints,json=unconfirmedMints,proto3" json:"unconfirmed_mints,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListAssetResponse) Reset() {
	*x = ListAssetResponse{}
	mi := &file_taprootassets_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse) ProtoMessage() {}

func (x *ListAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse.ProtoReflect.Descriptor instead.
func (*ListAssetResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{16}
}

func (x *ListAssetResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ListAssetResponse) GetUnconfirmedTransfers() uint64 {
	if x != nil {
		return x.UnconfirmedTransfers
	}
	return 0
}

func (x *ListAssetResponse) GetUnconfirmedMints() uint64 {
	if x != nil {
		return x.UnconfirmedMints
	}
	return 0
}

type ListUtxosRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IncludeLeased bool                   `protobuf:"varint,1,opt,name=include_leased,json=includeLeased,proto3" json:"include_leased,omitempty"`
	// The script key type to filter the assets by. If not set, only assets with
	// a BIP-0086 script key will be returned (which is the equivalent of
	// setting script_key_type.explicit_type = SCRIPT_KEY_BIP86).
	ScriptKeyType *ScriptKeyTypeQuery `protobuf:"bytes,2,opt,name=script_key_type,json=scriptKeyType,proto3" json:"script_key_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUtxosRequest) Reset() {
	*x = ListUtxosRequest{}
	mi := &file_taprootassets_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosRequest) ProtoMessage() {}

func (x *ListUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosRequest.ProtoReflect.Descriptor instead.
func (*ListUtxosRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{17}
}

func (x *ListUtxosRequest) GetIncludeLeased() bool {
	if x != nil {
		return x.IncludeLeased
	}
	return false
}

func (x *ListUtxosRequest) GetScriptKeyType() *ScriptKeyTypeQuery {
	if x != nil {
		return x.ScriptKeyType
	}
	return nil
}

type ManagedUtxo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The outpoint of the UTXO.
	OutPoint string `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The UTXO amount in satoshis.
	AmtSat int64 `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,3,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taproot Asset root commitment hash.
	TaprootAssetRoot []byte `protobuf:"bytes,4,opt,name=taproot_asset_root,json=taprootAssetRoot,proto3" json:"taproot_asset_root,omitempty"`
	// The Taproot merkle root hash committed to by the outpoint of this UTXO.
	// If there is no Tapscript sibling, this is equal to the Taproot Asset root
	// commitment hash.
	MerkleRoot []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The assets held at this UTXO.
	Assets []*Asset `protobuf:"bytes,6,rep,name=assets,proto3" json:"assets,omitempty"`
	// The lease owner for this UTXO. If blank the UTXO isn't leased.
	LeaseOwner []byte `protobuf:"bytes,7,opt,name=lease_owner,json=leaseOwner,proto3" json:"lease_owner,omitempty"`
	// The expiry time as a unix time stamp for this lease. If blank the utxo
	// isn't leased.
	LeaseExpiryUnix int64 `protobuf:"varint,8,opt,name=lease_expiry_unix,json=leaseExpiryUnix,proto3" json:"lease_expiry_unix,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ManagedUtxo) Reset() {
	*x = ManagedUtxo{}
	mi := &file_taprootassets_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedUtxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedUtxo) ProtoMessage() {}

func (x *ManagedUtxo) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedUtxo.ProtoReflect.Descriptor instead.
func (*ManagedUtxo) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{18}
}

func (x *ManagedUtxo) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

func (x *ManagedUtxo) GetAmtSat() int64 {
	if x != nil {
		return x.AmtSat
	}
	return 0
}

func (x *ManagedUtxo) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *ManagedUtxo) GetTaprootAssetRoot() []byte {
	if x != nil {
		return x.TaprootAssetRoot
	}
	return nil
}

func (x *ManagedUtxo) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *ManagedUtxo) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ManagedUtxo) GetLeaseOwner() []byte {
	if x != nil {
		return x.LeaseOwner
	}
	return nil
}

func (x *ManagedUtxo) GetLeaseExpiryUnix() int64 {
	if x != nil {
		return x.LeaseExpiryUnix
	}
	return 0
}

type ListUtxosResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of UTXOs managed by the daemon.
	ManagedUtxos  map[string]*ManagedUtxo `protobuf:"bytes,1,rep,name=managed_utxos,json=managedUtxos,proto3" json:"managed_utxos,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUtxosResponse) Reset() {
	*x = ListUtxosResponse{}
	mi := &file_taprootassets_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosResponse) ProtoMessage() {}

func (x *ListUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosResponse.ProtoReflect.Descriptor instead.
func (*ListUtxosResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{19}
}

func (x *ListUtxosResponse) GetManagedUtxos() map[string]*ManagedUtxo {
	if x != nil {
		return x.ManagedUtxos
	}
	return nil
}

type ListGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	mi := &file_taprootassets_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{20}
}

type AssetHumanReadable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the asset.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The amount of the asset.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// An optional locktime, as with Bitcoin transactions.
	LockTime int32 `protobuf:"varint,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// An optional relative locktime, as with Bitcoin transactions.
	RelativeLockTime int32 `protobuf:"varint,4,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The name of the asset.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// The metadata hash of the asset.
	MetaHash []byte `protobuf:"bytes,6,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	// The type of the asset.
	Type AssetType `protobuf:"varint,7,opt,name=type,proto3,enum=taprpc.AssetType" json:"type,omitempty"`
	// The version of the asset.
	Version       AssetVersion `protobuf:"varint,8,opt,name=version,proto3,enum=taprpc.AssetVersion" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetHumanReadable) Reset() {
	*x = AssetHumanReadable{}
	mi := &file_taprootassets_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHumanReadable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHumanReadable) ProtoMessage() {}

func (x *AssetHumanReadable) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHumanReadable.ProtoReflect.Descriptor instead.
func (*AssetHumanReadable) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{21}
}

func (x *AssetHumanReadable) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetHumanReadable) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetHumanReadable) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetRelativeLockTime() int32 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *AssetHumanReadable) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AssetHumanReadable) GetMetaHash() []byte {
	if x != nil {
		return x.MetaHash
	}
	return nil
}

func (x *AssetHumanReadable) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_NORMAL
}

func (x *AssetHumanReadable) GetVersion() AssetVersion {
	if x != nil {
		return x.Version
	}
	return AssetVersion_ASSET_VERSION_V0
}

type GroupedAssets struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of assets with the same group key.
	Assets        []*AssetHumanReadable `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupedAssets) Reset() {
	*x = GroupedAssets{}
	mi := &file_taprootassets_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupedAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedAssets) ProtoMessage() {}

func (x *GroupedAssets) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedAssets.ProtoReflect.Descriptor instead.
func (*GroupedAssets) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{22}
}

func (x *GroupedAssets) GetAssets() []*AssetHumanReadable {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ListGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of assets with a group key.
	Groups        map[string]*GroupedAssets `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	mi := &file_taprootassets_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{23}
}

func (x *ListGroupsResponse) GetGroups() map[string]*GroupedAssets {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListBalancesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to GroupBy:
	//
	//	*ListBalancesRequest_AssetId
	//	*ListBalancesRequest_GroupKey
	GroupBy isListBalancesRequest_GroupBy `protobuf_oneof:"group_by"`
	// If the query results should grouped by asset ids, then an optional asset
	// filter may be provided to query balance of a specific asset.
	AssetFilter []byte `protobuf:"bytes,3,opt,name=asset_filter,json=assetFilter,proto3" json:"asset_filter,omitempty"`
	// If the query results should be grouped by group keys, then an optional
	// group key filter may be provided to query the balance of a specific
	// asset group.
	GroupKeyFilter []byte `protobuf:"bytes,4,opt,name=group_key_filter,json=groupKeyFilter,proto3" json:"group_key_filter,omitempty"`
	// An option to include previous leased assets in the balances.
	IncludeLeased bool `protobuf:"varint,5,opt,name=include_leased,json=includeLeased,proto3" json:"include_leased,omitempty"`
	// The script key type to filter the assets by. If not set, only assets with
	// a BIP-0086 script key will be returned (which is the equivalent of
	// setting script_key_type.explicit_type = SCRIPT_KEY_BIP86). If the type
	// is set to SCRIPT_KEY_BURN or SCRIPT_KEY_TOMBSTONE the include_spent flag
	// will automatically be set to true, because assets of that type are always
	// marked as spent.
	ScriptKeyType *ScriptKeyTypeQuery `protobuf:"bytes,6,opt,name=script_key_type,json=scriptKeyType,proto3" json:"script_key_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBalancesRequest) Reset() {
	*x = ListBalancesRequest{}
	mi := &file_taprootassets_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesRequest) ProtoMessage() {}

func (x *ListBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListBalancesRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{24}
}

func (x *ListBalancesRequest) GetGroupBy() isListBalancesRequest_GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *ListBalancesRequest) GetAssetId() bool {
	if x != nil {
		if x, ok := x.GroupBy.(*ListBalancesRequest_AssetId); ok {
			return x.AssetId
		}
	}
	return false
}

func (x *ListBalancesRequest) GetGroupKey() bool {
	if x != nil {
		if x, ok := x.GroupBy.(*ListBalancesRequest_GroupKey); ok {
			return x.GroupKey
		}
	}
	return false
}

func (x *ListBalancesRequest) GetAssetFilter() []byte {
	if x != nil {
		return x.AssetFilter
	}
	return nil
}

func (x *ListBalancesRequest) GetGroupKeyFilter() []byte {
	if x != nil {
		return x.GroupKeyFilter
	}
	return nil
}

func (x *ListBalancesRequest) GetIncludeLeased() bool {
	if x != nil {
		return x.IncludeLeased
	}
	return false
}

func (x *ListBalancesRequest) GetScriptKeyType() *ScriptKeyTypeQuery {
	if x != nil {
		return x.ScriptKeyType
	}
	return nil
}

type isListBalancesRequest_GroupBy interface {
	isListBalancesRequest_GroupBy()
}

type ListBalancesRequest_AssetId struct {
	// Group results by asset IDs.
	AssetId bool `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ListBalancesRequest_GroupKey struct {
	// Group results by group keys.
	GroupKey bool `protobuf:"varint,2,opt,name=group_key,json=groupKey,proto3,oneof"`
}

func (*ListBalancesRequest_AssetId) isListBalancesRequest_GroupBy() {}

func (*ListBalancesRequest_GroupKey) isListBalancesRequest_GroupBy() {}

type AssetBalance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base genesis information of an asset. This information never changes.
	AssetGenesis *GenesisInfo `protobuf:"bytes,1,opt,name=asset_genesis,json=assetGenesis,proto3" json:"asset_genesis,omitempty"`
	// The balance of the asset owned by the target daemon.
	Balance       uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetBalance) Reset() {
	*x = AssetBalance{}
	mi := &file_taprootassets_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBalance) ProtoMessage() {}

func (x *AssetBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBalance.ProtoReflect.Descriptor instead.
func (*AssetBalance) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{25}
}

func (x *AssetBalance) GetAssetGenesis() *GenesisInfo {
	if x != nil {
		return x.AssetGenesis
	}
	return nil
}

func (x *AssetBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AssetGroupBalance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The group key or nil aggregating assets that don't have a group.
	GroupKey []byte `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The total balance of the assets in the group.
	Balance       uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroupBalance) Reset() {
	*x = AssetGroupBalance{}
	mi := &file_taprootassets_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroupBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupBalance) ProtoMessage() {}

func (x *AssetGroupBalance) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupBalance.ProtoReflect.Descriptor instead.
func (*AssetGroupBalance) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{26}
}

func (x *AssetGroupBalance) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *AssetGroupBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type ListBalancesResponse struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	AssetBalances      map[string]*AssetBalance      `protobuf:"bytes,1,rep,name=asset_balances,json=assetBalances,proto3" json:"asset_balances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AssetGroupBalances map[string]*AssetGroupBalance `protobuf:"bytes,2,rep,name=asset_group_balances,json=assetGroupBalances,proto3" json:"asset_group_balances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListBalancesResponse) Reset() {
	*x = ListBalancesResponse{}
	mi := &file_taprootassets_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesResponse) ProtoMessage() {}

func (x *ListBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListBalancesResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{27}
}

func (x *ListBalancesResponse) GetAssetBalances() map[string]*AssetBalance {
	if x != nil {
		return x.AssetBalances
	}
	return nil
}

func (x *ListBalancesResponse) GetAssetGroupBalances() map[string]*AssetGroupBalance {
	if x != nil {
		return x.AssetGroupBalances
	}
	return nil
}

type ListTransfersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// anchor_txid specifies the hexadecimal encoded txid string of the anchor
	// transaction for which to retrieve transfers. An empty value indicates
	// that this parameter should be disregarded in transfer selection.
	AnchorTxid    string `protobuf:"bytes,1,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	mi := &file_taprootassets_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{28}
}

func (x *ListTransfersRequest) GetAnchorTxid() string {
	if x != nil {
		return x.AnchorTxid
	}
	return ""
}

type ListTransfersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unordered list of outgoing asset transfers.
	Transfers     []*AssetTransfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	mi := &file_taprootassets_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{29}
}

func (x *ListTransfersResponse) GetTransfers() []*AssetTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

// ChainHash represents a hash value, typically a double SHA-256 of some data.
// Common examples include block hashes and transaction hashes.
//
// This versatile message type is used in various Bitcoin-related messages and
// structures, providing two different formats of the same hash to accommodate
// both developer and user needs.
type ChainHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw hash value in byte format.
	//
	// This format is optimized for programmatic use, particularly for Go
	// developers, enabling easy integration with other RPC calls or binary
	// operations.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The byte-reversed hash value as a hexadecimal string.
	//
	// This format is intended for human interaction, making it easy to copy,
	// paste, and use in contexts like command-line arguments or configuration
	// files.
	HashStr       string `protobuf:"bytes,2,opt,name=hash_str,json=hashStr,proto3" json:"hash_str,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainHash) Reset() {
	*x = ChainHash{}
	mi := &file_taprootassets_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainHash) ProtoMessage() {}

func (x *ChainHash) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainHash.ProtoReflect.Descriptor instead.
func (*ChainHash) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{30}
}

func (x *ChainHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ChainHash) GetHashStr() string {
	if x != nil {
		return x.HashStr
	}
	return ""
}

type AssetTransfer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransferTimestamp int64                  `protobuf:"varint,1,opt,name=transfer_timestamp,json=transferTimestamp,proto3" json:"transfer_timestamp,omitempty"`
	// The new transaction that commits to the set of Taproot Assets found
	// at the above new anchor point.
	AnchorTxHash       []byte `protobuf:"bytes,2,opt,name=anchor_tx_hash,json=anchorTxHash,proto3" json:"anchor_tx_hash,omitempty"`
	AnchorTxHeightHint uint32 `protobuf:"varint,3,opt,name=anchor_tx_height_hint,json=anchorTxHeightHint,proto3" json:"anchor_tx_height_hint,omitempty"`
	AnchorTxChainFees  int64  `protobuf:"varint,4,opt,name=anchor_tx_chain_fees,json=anchorTxChainFees,proto3" json:"anchor_tx_chain_fees,omitempty"`
	// Describes the set of spent assets.
	Inputs []*TransferInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Describes the set of newly created asset outputs.
	Outputs []*TransferOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The block hash of the blockchain block that contains the anchor
	// transaction. If this value is unset, the anchor transaction is
	// unconfirmed.
	AnchorTxBlockHash *ChainHash `protobuf:"bytes,7,opt,name=anchor_tx_block_hash,json=anchorTxBlockHash,proto3" json:"anchor_tx_block_hash,omitempty"`
	// The block height of the blockchain block that contains the anchor
	// transaction. If the anchor transaction is still unconfirmed, this value
	// will be 0.
	AnchorTxBlockHeight uint32 `protobuf:"varint,8,opt,name=anchor_tx_block_height,json=anchorTxBlockHeight,proto3" json:"anchor_tx_block_height,omitempty"`
	// An optional short label for the transfer. This label can be used to track
	// the progress of the transfer via the logs or an event subscription.
	// Multiple transfers can share the same label.
	Label string `protobuf:"bytes,9,opt,name=label,proto3" json:"label,omitempty"`
	// The L1 transaction that anchors the Taproot Asset commitment where the
	// asset resides.
	AnchorTx      []byte `protobuf:"bytes,10,opt,name=anchor_tx,json=anchorTx,proto3" json:"anchor_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetTransfer) Reset() {
	*x = AssetTransfer{}
	mi := &file_taprootassets_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTransfer) ProtoMessage() {}

func (x *AssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTransfer.ProtoReflect.Descriptor instead.
func (*AssetTransfer) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{31}
}

func (x *AssetTransfer) GetTransferTimestamp() int64 {
	if x != nil {
		return x.TransferTimestamp
	}
	return 0
}

func (x *AssetTransfer) GetAnchorTxHash() []byte {
	if x != nil {
		return x.AnchorTxHash
	}
	return nil
}

func (x *AssetTransfer) GetAnchorTxHeightHint() uint32 {
	if x != nil {
		return x.AnchorTxHeightHint
	}
	return 0
}

func (x *AssetTransfer) GetAnchorTxChainFees() int64 {
	if x != nil {
		return x.AnchorTxChainFees
	}
	return 0
}

func (x *AssetTransfer) GetInputs() []*TransferInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *AssetTransfer) GetOutputs() []*TransferOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *AssetTransfer) GetAnchorTxBlockHash() *ChainHash {
	if x != nil {
		return x.AnchorTxBlockHash
	}
	return nil
}

func (x *AssetTransfer) GetAnchorTxBlockHeight() uint32 {
	if x != nil {
		return x.AnchorTxBlockHeight
	}
	return 0
}

func (x *AssetTransfer) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AssetTransfer) GetAnchorTx() []byte {
	if x != nil {
		return x.AnchorTx
	}
	return nil
}

type TransferInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The old/current location of the Taproot Asset commitment that was spent
	// as an input.
	AnchorPoint string `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	// The ID of the asset that was spent.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The script key of the asset that was spent.
	ScriptKey []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The amount of the asset that was spent.
	Amount        uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferInput) Reset() {
	*x = TransferInput{}
	mi := &file_taprootassets_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInput) ProtoMessage() {}

func (x *TransferInput) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInput.ProtoReflect.Descriptor instead.
func (*TransferInput) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{32}
}

func (x *TransferInput) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *TransferInput) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *TransferInput) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *TransferInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TransferOutputAnchor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new location of the Taproot Asset commitment that was created on
	// chain.
	Outpoint         string `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Value            int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	InternalKey      []byte `protobuf:"bytes,3,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	TaprootAssetRoot []byte `protobuf:"bytes,4,opt,name=taproot_asset_root,json=taprootAssetRoot,proto3" json:"taproot_asset_root,omitempty"`
	MerkleRoot       []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	TapscriptSibling []byte `protobuf:"bytes,6,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	NumPassiveAssets uint32 `protobuf:"varint,7,opt,name=num_passive_assets,json=numPassiveAssets,proto3" json:"num_passive_assets,omitempty"`
	// pk_script is the pkscript of the anchor output.
	PkScript      []byte `protobuf:"bytes,8,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferOutputAnchor) Reset() {
	*x = TransferOutputAnchor{}
	mi := &file_taprootassets_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOutputAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutputAnchor) ProtoMessage() {}

func (x *TransferOutputAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutputAnchor.ProtoReflect.Descriptor instead.
func (*TransferOutputAnchor) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{33}
}

func (x *TransferOutputAnchor) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *TransferOutputAnchor) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferOutputAnchor) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *TransferOutputAnchor) GetTaprootAssetRoot() []byte {
	if x != nil {
		return x.TaprootAssetRoot
	}
	return nil
}

func (x *TransferOutputAnchor) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *TransferOutputAnchor) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *TransferOutputAnchor) GetNumPassiveAssets() uint32 {
	if x != nil {
		return x.NumPassiveAssets
	}
	return 0
}

func (x *TransferOutputAnchor) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

type TransferOutput struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Anchor           *TransferOutputAnchor  `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	ScriptKey        []byte                 `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	ScriptKeyIsLocal bool                   `protobuf:"varint,3,opt,name=script_key_is_local,json=scriptKeyIsLocal,proto3" json:"script_key_is_local,omitempty"`
	Amount           uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The new individual transition proof (not a full proof file) that proves
	// the inclusion of the new asset within the new AnchorTx.
	NewProofBlob        []byte       `protobuf:"bytes,5,opt,name=new_proof_blob,json=newProofBlob,proto3" json:"new_proof_blob,omitempty"`
	SplitCommitRootHash []byte       `protobuf:"bytes,6,opt,name=split_commit_root_hash,json=splitCommitRootHash,proto3" json:"split_commit_root_hash,omitempty"`
	OutputType          OutputType   `protobuf:"varint,7,opt,name=output_type,json=outputType,proto3,enum=taprpc.OutputType" json:"output_type,omitempty"`
	AssetVersion        AssetVersion `protobuf:"varint,8,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	LockTime            uint64       `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	RelativeLockTime    uint64       `protobuf:"varint,10,opt,name=relative_lock_time,json=relativeLockTime,proto3" json:"relative_lock_time,omitempty"`
	// The delivery status of the proof associated with this output.
	ProofDeliveryStatus ProofDeliveryStatus `protobuf:"varint,11,opt,name=proof_delivery_status,json=proofDeliveryStatus,proto3,enum=taprpc.ProofDeliveryStatus" json:"proof_delivery_status,omitempty"`
	AssetId             []byte              `protobuf:"bytes,12,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransferOutput) Reset() {
	*x = TransferOutput{}
	mi := &file_taprootassets_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutput) ProtoMessage() {}

func (x *TransferOutput) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutput.ProtoReflect.Descriptor instead.
func (*TransferOutput) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{34}
}

func (x *TransferOutput) GetAnchor() *TransferOutputAnchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *TransferOutput) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *TransferOutput) GetScriptKeyIsLocal() bool {
	if x != nil {
		return x.ScriptKeyIsLocal
	}
	return false
}

func (x *TransferOutput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferOutput) GetNewProofBlob() []byte {
	if x != nil {
		return x.NewProofBlob
	}
	return nil
}

func (x *TransferOutput) GetSplitCommitRootHash() []byte {
	if x != nil {
		return x.SplitCommitRootHash
	}
	return nil
}

func (x *TransferOutput) GetOutputType() OutputType {
	if x != nil {
		return x.OutputType
	}
	return OutputType_OUTPUT_TYPE_SIMPLE
}

func (x *TransferOutput) GetAssetVersion() AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return AssetVersion_ASSET_VERSION_V0
}

func (x *TransferOutput) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TransferOutput) GetRelativeLockTime() uint64 {
	if x != nil {
		return x.RelativeLockTime
	}
	return 0
}

func (x *TransferOutput) GetProofDeliveryStatus() ProofDeliveryStatus {
	if x != nil {
		return x.ProofDeliveryStatus
	}
	return ProofDeliveryStatus_PROOF_DELIVERY_STATUS_NOT_APPLICABLE
}

func (x *TransferOutput) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type StopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_taprootassets_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{35}
}

type StopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	mi := &file_taprootassets_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{36}
}

type DebugLevelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, all the valid debug sub-systems will be returned.
	Show          bool   `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	LevelSpec     string `protobuf:"bytes,2,opt,name=level_spec,json=levelSpec,proto3" json:"level_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugLevelRequest) Reset() {
	*x = DebugLevelRequest{}
	mi := &file_taprootassets_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelRequest) ProtoMessage() {}

func (x *DebugLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelRequest.ProtoReflect.Descriptor instead.
func (*DebugLevelRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{37}
}

func (x *DebugLevelRequest) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *DebugLevelRequest) GetLevelSpec() string {
	if x != nil {
		return x.LevelSpec
	}
	return ""
}

type DebugLevelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubSystems    string                 `protobuf:"bytes,1,opt,name=sub_systems,json=subSystems,proto3" json:"sub_systems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugLevelResponse) Reset() {
	*x = DebugLevelResponse{}
	mi := &file_taprootassets_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLevelResponse) ProtoMessage() {}

func (x *DebugLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLevelResponse.ProtoReflect.Descriptor instead.
func (*DebugLevelResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{38}
}

func (x *DebugLevelResponse) GetSubSystems() string {
	if x != nil {
		return x.SubSystems
	}
	return ""
}

type Addr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bech32 encoded Taproot Asset address.
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The asset ID that uniquely identifies the asset.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The type of the asset.
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The total amount of the asset stored in this Taproot Asset UTXO.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The group key of the asset (if it exists)
	GroupKey []byte `protobuf:"bytes,5,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The specific script key the asset must commit to in order to transfer
	// ownership to the creator of the address.
	ScriptKey []byte `protobuf:"bytes,6,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The internal key used for the on-chain output.
	InternalKey []byte `protobuf:"bytes,7,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The optional serialized tapscript sibling preimage to use for the receiving
	// asset. This is usually empty as it is only needed when there should be an
	// additional script path in the Taproot tree alongside the Taproot Asset
	// commitment of the asset.
	TapscriptSibling []byte `protobuf:"bytes,8,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	// The tweaked internal key that commits to the asset and represents the
	// on-chain output key the Bitcoin transaction must send to in order to
	// transfer assets described in this address.
	TaprootOutputKey []byte `protobuf:"bytes,9,opt,name=taproot_output_key,json=taprootOutputKey,proto3" json:"taproot_output_key,omitempty"`
	// The address of the proof courier service used in proof transfer.
	ProofCourierAddr string `protobuf:"bytes,10,opt,name=proof_courier_addr,json=proofCourierAddr,proto3" json:"proof_courier_addr,omitempty"`
	// The asset version of the address.
	AssetVersion AssetVersion `protobuf:"varint,11,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The version of the address.
	AddressVersion AddrVersion `protobuf:"varint,12,opt,name=address_version,json=addressVersion,proto3,enum=taprpc.AddrVersion" json:"address_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Addr) Reset() {
	*x = Addr{}
	mi := &file_taprootassets_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{39}
}

func (x *Addr) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *Addr) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Addr) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_NORMAL
}

func (x *Addr) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Addr) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *Addr) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *Addr) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *Addr) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *Addr) GetTaprootOutputKey() []byte {
	if x != nil {
		return x.TaprootOutputKey
	}
	return nil
}

func (x *Addr) GetProofCourierAddr() string {
	if x != nil {
		return x.ProofCourierAddr
	}
	return ""
}

func (x *Addr) GetAssetVersion() AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return AssetVersion_ASSET_VERSION_V0
}

func (x *Addr) GetAddressVersion() AddrVersion {
	if x != nil {
		return x.AddressVersion
	}
	return AddrVersion_ADDR_VERSION_UNSPECIFIED
}

type QueryAddrRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, then only addresses created after this Unix timestamp will be
	// returned.
	CreatedAfter int64 `protobuf:"varint,1,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	// If set, then only addresses created before this Unix timestamp will be
	// returned.
	CreatedBefore int64 `protobuf:"varint,2,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	// The max number of addresses that should be returned.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The offset from the addresses that should be returned.
	Offset        int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAddrRequest) Reset() {
	*x = QueryAddrRequest{}
	mi := &file_taprootassets_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrRequest) ProtoMessage() {}

func (x *QueryAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrRequest.ProtoReflect.Descriptor instead.
func (*QueryAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{40}
}

func (x *QueryAddrRequest) GetCreatedAfter() int64 {
	if x != nil {
		return x.CreatedAfter
	}
	return 0
}

func (x *QueryAddrRequest) GetCreatedBefore() int64 {
	if x != nil {
		return x.CreatedBefore
	}
	return 0
}

func (x *QueryAddrRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryAddrRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type QueryAddrResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addrs         []*Addr                `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAddrResponse) Reset() {
	*x = QueryAddrResponse{}
	mi := &file_taprootassets_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddrResponse) ProtoMessage() {}

func (x *QueryAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddrResponse.ProtoReflect.Descriptor instead.
func (*QueryAddrResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{41}
}

func (x *QueryAddrResponse) GetAddrs() []*Addr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type NewAddrRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	AssetId []byte                 `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Amt     uint64                 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	// The optional script key that the receiving asset should be locked to. If no
	// script key is provided, a normal BIP-86 key will be derived from the
	// underlying wallet.
	//
	// NOTE: The script_key and internal_key fields should either both be set or
	// both be empty.
	ScriptKey *ScriptKey `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The optional internal key of the receiving BTC level transaction output on
	// which the receiving asset transfers will be committed to. If no internal key
	// is provided, a key will be derived from the underlying wallet.
	//
	// NOTE: The script_key and internal_key fields should either both be set or
	// both be empty.
	InternalKey *KeyDescriptor `protobuf:"bytes,4,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The optional serialized tapscript sibling preimage to use for the receiving
	// asset. This is usually empty as it is only needed when there should be an
	// additional script path in the Taproot tree alongside the Taproot Asset
	// commitment of the asset.
	TapscriptSibling []byte `protobuf:"bytes,5,opt,name=tapscript_sibling,json=tapscriptSibling,proto3" json:"tapscript_sibling,omitempty"`
	// An optional proof courier address for use in proof transfer. If unspecified,
	// the daemon configured default address will be used.
	ProofCourierAddr string `protobuf:"bytes,6,opt,name=proof_courier_addr,json=proofCourierAddr,proto3" json:"proof_courier_addr,omitempty"`
	// The asset version to use when sending/receiving to/from this address.
	AssetVersion AssetVersion `protobuf:"varint,7,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The version of this address.
	AddressVersion AddrVersion `protobuf:"varint,8,opt,name=address_version,json=addressVersion,proto3,enum=taprpc.AddrVersion" json:"address_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NewAddrRequest) Reset() {
	*x = NewAddrRequest{}
	mi := &file_taprootassets_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAddrRequest) ProtoMessage() {}

func (x *NewAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAddrRequest.ProtoReflect.Descriptor instead.
func (*NewAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{42}
}

func (x *NewAddrRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *NewAddrRequest) GetAmt() uint64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *NewAddrRequest) GetScriptKey() *ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *NewAddrRequest) GetInternalKey() *KeyDescriptor {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *NewAddrRequest) GetTapscriptSibling() []byte {
	if x != nil {
		return x.TapscriptSibling
	}
	return nil
}

func (x *NewAddrRequest) GetProofCourierAddr() string {
	if x != nil {
		return x.ProofCourierAddr
	}
	return ""
}

func (x *NewAddrRequest) GetAssetVersion() AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return AssetVersion_ASSET_VERSION_V0
}

func (x *NewAddrRequest) GetAddressVersion() AddrVersion {
	if x != nil {
		return x.AddressVersion
	}
	return AddrVersion_ADDR_VERSION_UNSPECIFIED
}

type ScriptKeyTypeQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ScriptKeyTypeQuery_ExplicitType
	//	*ScriptKeyTypeQuery_AllTypes
	Type          isScriptKeyTypeQuery_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptKeyTypeQuery) Reset() {
	*x = ScriptKeyTypeQuery{}
	mi := &file_taprootassets_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptKeyTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptKeyTypeQuery) ProtoMessage() {}

func (x *ScriptKeyTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptKeyTypeQuery.ProtoReflect.Descriptor instead.
func (*ScriptKeyTypeQuery) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{43}
}

func (x *ScriptKeyTypeQuery) GetType() isScriptKeyTypeQuery_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ScriptKeyTypeQuery) GetExplicitType() ScriptKeyType {
	if x != nil {
		if x, ok := x.Type.(*ScriptKeyTypeQuery_ExplicitType); ok {
			return x.ExplicitType
		}
	}
	return ScriptKeyType_SCRIPT_KEY_UNKNOWN
}

func (x *ScriptKeyTypeQuery) GetAllTypes() bool {
	if x != nil {
		if x, ok := x.Type.(*ScriptKeyTypeQuery_AllTypes); ok {
			return x.AllTypes
		}
	}
	return false
}

type isScriptKeyTypeQuery_Type interface {
	isScriptKeyTypeQuery_Type()
}

type ScriptKeyTypeQuery_ExplicitType struct {
	// Query for assets of a specific script key type.
	ExplicitType ScriptKeyType `protobuf:"varint,1,opt,name=explicit_type,json=explicitType,proto3,enum=taprpc.ScriptKeyType,oneof"`
}

type ScriptKeyTypeQuery_AllTypes struct {
	// Query for assets with all script key types.
	AllTypes bool `protobuf:"varint,2,opt,name=all_types,json=allTypes,proto3,oneof"`
}

func (*ScriptKeyTypeQuery_ExplicitType) isScriptKeyTypeQuery_Type() {}

func (*ScriptKeyTypeQuery_AllTypes) isScriptKeyTypeQuery_Type() {}

type ScriptKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full Taproot output key the asset is locked to. This is either a BIP-86
	// key if the tap_tweak below is empty, or a key with the tap tweak applied to
	// it.
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// The key descriptor describing the internal key of the above Taproot key.
	KeyDesc *KeyDescriptor `protobuf:"bytes,2,opt,name=key_desc,json=keyDesc,proto3" json:"key_desc,omitempty"`
	// The optional Taproot tweak to apply to the above internal key. If this is
	// empty then a BIP-86 style tweak is applied to the internal key.
	TapTweak []byte `protobuf:"bytes,3,opt,name=tap_tweak,json=tapTweak,proto3" json:"tap_tweak,omitempty"`
	// The type of the script key. This type is either user-declared when custom
	// script keys are added, or automatically determined by the daemon for
	// standard operations (e.g. BIP-86 keys, burn keys, tombstone keys, channel
	// related keys).
	Type          ScriptKeyType `protobuf:"varint,4,opt,name=type,proto3,enum=taprpc.ScriptKeyType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptKey) Reset() {
	*x = ScriptKey{}
	mi := &file_taprootassets_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptKey) ProtoMessage() {}

func (x *ScriptKey) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptKey.ProtoReflect.Descriptor instead.
func (*ScriptKey) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{44}
}

func (x *ScriptKey) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ScriptKey) GetKeyDesc() *KeyDescriptor {
	if x != nil {
		return x.KeyDesc
	}
	return nil
}

func (x *ScriptKey) GetTapTweak() []byte {
	if x != nil {
		return x.TapTweak
	}
	return nil
}

func (x *ScriptKey) GetType() ScriptKeyType {
	if x != nil {
		return x.Type
	}
	return ScriptKeyType_SCRIPT_KEY_UNKNOWN
}

type KeyLocator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The family of key being identified.
	KeyFamily int32 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	// The precise index of the key being identified.
	KeyIndex      int32 `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyLocator) Reset() {
	*x = KeyLocator{}
	mi := &file_taprootassets_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocator) ProtoMessage() {}

func (x *KeyLocator) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocator.ProtoReflect.Descriptor instead.
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{45}
}

func (x *KeyLocator) GetKeyFamily() int32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

func (x *KeyLocator) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw bytes of the key being identified.
	RawKeyBytes []byte `protobuf:"bytes,1,opt,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	// The key locator that identifies which key to use for signing.
	KeyLoc        *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyDescriptor) Reset() {
	*x = KeyDescriptor{}
	mi := &file_taprootassets_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDescriptor) ProtoMessage() {}

func (x *KeyDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDescriptor.ProtoReflect.Descriptor instead.
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{46}
}

func (x *KeyDescriptor) GetRawKeyBytes() []byte {
	if x != nil {
		return x.RawKeyBytes
	}
	return nil
}

func (x *KeyDescriptor) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

type TapscriptFullTree struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The complete, ordered list of all tap leaves of the tree.
	AllLeaves     []*TapLeaf `protobuf:"bytes,1,rep,name=all_leaves,json=allLeaves,proto3" json:"all_leaves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TapscriptFullTree) Reset() {
	*x = TapscriptFullTree{}
	mi := &file_taprootassets_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TapscriptFullTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapscriptFullTree) ProtoMessage() {}

func (x *TapscriptFullTree) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapscriptFullTree.ProtoReflect.Descriptor instead.
func (*TapscriptFullTree) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{47}
}

func (x *TapscriptFullTree) GetAllLeaves() []*TapLeaf {
	if x != nil {
		return x.AllLeaves
	}
	return nil
}

type TapLeaf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The script of the tap leaf.
	Script        []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TapLeaf) Reset() {
	*x = TapLeaf{}
	mi := &file_taprootassets_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TapLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapLeaf) ProtoMessage() {}

func (x *TapLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapLeaf.ProtoReflect.Descriptor instead.
func (*TapLeaf) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{48}
}

func (x *TapLeaf) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type TapBranch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The TapHash of the left child of the root hash of a Tapscript tree.
	LeftTaphash []byte `protobuf:"bytes,1,opt,name=left_taphash,json=leftTaphash,proto3" json:"left_taphash,omitempty"`
	// The TapHash of the right child of the root hash of a Tapscript tree.
	RightTaphash  []byte `protobuf:"bytes,2,opt,name=right_taphash,json=rightTaphash,proto3" json:"right_taphash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TapBranch) Reset() {
	*x = TapBranch{}
	mi := &file_taprootassets_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TapBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapBranch) ProtoMessage() {}

func (x *TapBranch) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapBranch.ProtoReflect.Descriptor instead.
func (*TapBranch) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{49}
}

func (x *TapBranch) GetLeftTaphash() []byte {
	if x != nil {
		return x.LeftTaphash
	}
	return nil
}

func (x *TapBranch) GetRightTaphash() []byte {
	if x != nil {
		return x.RightTaphash
	}
	return nil
}

type DecodeAddrRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeAddrRequest) Reset() {
	*x = DecodeAddrRequest{}
	mi := &file_taprootassets_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeAddrRequest) ProtoMessage() {}

func (x *DecodeAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeAddrRequest.ProtoReflect.Descriptor instead.
func (*DecodeAddrRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{50}
}

func (x *DecodeAddrRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type ProofFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw proof file encoded as bytes. Must be a file and not just an
	// individual mint/transfer proof.
	RawProofFile  []byte `protobuf:"bytes,1,opt,name=raw_proof_file,json=rawProofFile,proto3" json:"raw_proof_file,omitempty"`
	GenesisPoint  string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofFile) Reset() {
	*x = ProofFile{}
	mi := &file_taprootassets_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofFile) ProtoMessage() {}

func (x *ProofFile) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofFile.ProtoReflect.Descriptor instead.
func (*ProofFile) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{51}
}

func (x *ProofFile) GetRawProofFile() []byte {
	if x != nil {
		return x.RawProofFile
	}
	return nil
}

func (x *ProofFile) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

type DecodedProof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index depth of the decoded proof, with 0 being the latest proof.
	ProofAtDepth uint32 `protobuf:"varint,1,opt,name=proof_at_depth,json=proofAtDepth,proto3" json:"proof_at_depth,omitempty"`
	// The total number of proofs contained in the decoded proof file (this will
	// always be 1 if a single mint/transition proof was given as the raw_proof
	// instead of a file).
	NumberOfProofs uint32 `protobuf:"varint,2,opt,name=number_of_proofs,json=numberOfProofs,proto3" json:"number_of_proofs,omitempty"`
	// The asset referenced in the proof.
	Asset *Asset `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// The reveal meta data associated with the proof, if available.
	MetaReveal *AssetMeta `protobuf:"bytes,4,opt,name=meta_reveal,json=metaReveal,proto3" json:"meta_reveal,omitempty"`
	// The merkle proof for AnchorTx used to prove its
	// inclusion within BlockHeader.
	TxMerkleProof []byte `protobuf:"bytes,5,opt,name=tx_merkle_proof,json=txMerkleProof,proto3" json:"tx_merkle_proof,omitempty"`
	// The TaprootProof proving the new inclusion of the
	// resulting asset within AnchorTx.
	InclusionProof []byte `protobuf:"bytes,6,opt,name=inclusion_proof,json=inclusionProof,proto3" json:"inclusion_proof,omitempty"`
	// The set of TaprootProofs proving the exclusion of
	// the resulting asset from all other Taproot outputs within AnchorTx.
	ExclusionProofs [][]byte `protobuf:"bytes,7,rep,name=exclusion_proofs,json=exclusionProofs,proto3" json:"exclusion_proofs,omitempty"`
	// An optional TaprootProof needed if this asset is
	// the result of a split. SplitRootProof proves inclusion of the root
	// asset of the split.
	SplitRootProof []byte `protobuf:"bytes,8,opt,name=split_root_proof,json=splitRootProof,proto3" json:"split_root_proof,omitempty"`
	// The number of additional nested full proofs for any inputs found within
	// the resulting asset.
	NumAdditionalInputs uint32 `protobuf:"varint,9,opt,name=num_additional_inputs,json=numAdditionalInputs,proto3" json:"num_additional_inputs,omitempty"`
	// ChallengeWitness is an optional virtual transaction witness that serves
	// as an ownership proof for the asset. If this is non-nil, then it is a
	// valid transfer witness for a 1-input, 1-output virtual transaction that
	// spends the asset in this proof and sends it to the NUMS key, to prove
	// that the creator of the proof is able to produce a valid signature to
	// spend the asset.
	ChallengeWitness [][]byte `protobuf:"bytes,10,rep,name=challenge_witness,json=challengeWitness,proto3" json:"challenge_witness,omitempty"`
	// Indicates whether the state transition this proof represents is a burn,
	// meaning that the assets were provably destroyed and can no longer be
	// spent.
	IsBurn bool `protobuf:"varint,11,opt,name=is_burn,json=isBurn,proto3" json:"is_burn,omitempty"`
	// GenesisReveal is an optional field that is the Genesis information for
	// the asset. This is required for minting proofs.
	GenesisReveal *GenesisReveal `protobuf:"bytes,12,opt,name=genesis_reveal,json=genesisReveal,proto3" json:"genesis_reveal,omitempty"`
	// GroupKeyReveal is an optional field that includes the information needed
	// to derive the tweaked group key.
	GroupKeyReveal *GroupKeyReveal `protobuf:"bytes,13,opt,name=group_key_reveal,json=groupKeyReveal,proto3" json:"group_key_reveal,omitempty"`
	// AltLeaves represent data used to construct an Asset commitment, that
	// will be inserted in the input anchor Tap commitment. These data-carrying
	// leaves are used for a purpose distinct from representing individual
	// individual Taproot Assets.
	AltLeaves     []byte `protobuf:"bytes,14,opt,name=alt_leaves,json=altLeaves,proto3" json:"alt_leaves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodedProof) Reset() {
	*x = DecodedProof{}
	mi := &file_taprootassets_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodedProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedProof) ProtoMessage() {}

func (x *DecodedProof) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedProof.ProtoReflect.Descriptor instead.
func (*DecodedProof) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{52}
}

func (x *DecodedProof) GetProofAtDepth() uint32 {
	if x != nil {
		return x.ProofAtDepth
	}
	return 0
}

func (x *DecodedProof) GetNumberOfProofs() uint32 {
	if x != nil {
		return x.NumberOfProofs
	}
	return 0
}

func (x *DecodedProof) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *DecodedProof) GetMetaReveal() *AssetMeta {
	if x != nil {
		return x.MetaReveal
	}
	return nil
}

func (x *DecodedProof) GetTxMerkleProof() []byte {
	if x != nil {
		return x.TxMerkleProof
	}
	return nil
}

func (x *DecodedProof) GetInclusionProof() []byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *DecodedProof) GetExclusionProofs() [][]byte {
	if x != nil {
		return x.ExclusionProofs
	}
	return nil
}

func (x *DecodedProof) GetSplitRootProof() []byte {
	if x != nil {
		return x.SplitRootProof
	}
	return nil
}

func (x *DecodedProof) GetNumAdditionalInputs() uint32 {
	if x != nil {
		return x.NumAdditionalInputs
	}
	return 0
}

func (x *DecodedProof) GetChallengeWitness() [][]byte {
	if x != nil {
		return x.ChallengeWitness
	}
	return nil
}

func (x *DecodedProof) GetIsBurn() bool {
	if x != nil {
		return x.IsBurn
	}
	return false
}

func (x *DecodedProof) GetGenesisReveal() *GenesisReveal {
	if x != nil {
		return x.GenesisReveal
	}
	return nil
}

func (x *DecodedProof) GetGroupKeyReveal() *GroupKeyReveal {
	if x != nil {
		return x.GroupKeyReveal
	}
	return nil
}

func (x *DecodedProof) GetAltLeaves() []byte {
	if x != nil {
		return x.AltLeaves
	}
	return nil
}

type VerifyProofResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Valid bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// The decoded last proof in the file if the proof file was valid.
	DecodedProof  *DecodedProof `protobuf:"bytes,2,opt,name=decoded_proof,json=decodedProof,proto3" json:"decoded_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyProofResponse) Reset() {
	*x = VerifyProofResponse{}
	mi := &file_taprootassets_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofResponse) ProtoMessage() {}

func (x *VerifyProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofResponse.ProtoReflect.Descriptor instead.
func (*VerifyProofResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{53}
}

func (x *VerifyProofResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifyProofResponse) GetDecodedProof() *DecodedProof {
	if x != nil {
		return x.DecodedProof
	}
	return nil
}

type DecodeProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw proof bytes to decode. This can be a full proof file or a single
	// mint/transition proof. If it is a full proof file, the proof_at_depth
	// field will be used to determine which individual proof within the file to
	// decode.
	RawProof []byte `protobuf:"bytes,1,opt,name=raw_proof,json=rawProof,proto3" json:"raw_proof,omitempty"`
	// The index depth of the decoded proof, with 0 being the latest proof. This
	// is ignored if the raw_proof is a single mint/transition proof and not a
	// proof file.
	ProofAtDepth uint32 `protobuf:"varint,2,opt,name=proof_at_depth,json=proofAtDepth,proto3" json:"proof_at_depth,omitempty"`
	// An option to include previous witnesses in decoding.
	WithPrevWitnesses bool `protobuf:"varint,3,opt,name=with_prev_witnesses,json=withPrevWitnesses,proto3" json:"with_prev_witnesses,omitempty"`
	// An option to attempt to retrieve the meta data associated with the proof.
	WithMetaReveal bool `protobuf:"varint,4,opt,name=with_meta_reveal,json=withMetaReveal,proto3" json:"with_meta_reveal,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DecodeProofRequest) Reset() {
	*x = DecodeProofRequest{}
	mi := &file_taprootassets_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeProofRequest) ProtoMessage() {}

func (x *DecodeProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeProofRequest.ProtoReflect.Descriptor instead.
func (*DecodeProofRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{54}
}

func (x *DecodeProofRequest) GetRawProof() []byte {
	if x != nil {
		return x.RawProof
	}
	return nil
}

func (x *DecodeProofRequest) GetProofAtDepth() uint32 {
	if x != nil {
		return x.ProofAtDepth
	}
	return 0
}

func (x *DecodeProofRequest) GetWithPrevWitnesses() bool {
	if x != nil {
		return x.WithPrevWitnesses
	}
	return false
}

func (x *DecodeProofRequest) GetWithMetaReveal() bool {
	if x != nil {
		return x.WithMetaReveal
	}
	return false
}

type DecodeProofResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DecodedProof  *DecodedProof          `protobuf:"bytes,1,opt,name=decoded_proof,json=decodedProof,proto3" json:"decoded_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeProofResponse) Reset() {
	*x = DecodeProofResponse{}
	mi := &file_taprootassets_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeProofResponse) ProtoMessage() {}

func (x *DecodeProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeProofResponse.ProtoReflect.Descriptor instead.
func (*DecodeProofResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{55}
}

func (x *DecodeProofResponse) GetDecodedProof() *DecodedProof {
	if x != nil {
		return x.DecodedProof
	}
	return nil
}

type ExportProofRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetId       []byte                 `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey     []byte                 `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Outpoint      *OutPoint              `protobuf:"bytes,3,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportProofRequest) Reset() {
	*x = ExportProofRequest{}
	mi := &file_taprootassets_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProofRequest) ProtoMessage() {}

func (x *ExportProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProofRequest.ProtoReflect.Descriptor instead.
func (*ExportProofRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{56}
}

func (x *ExportProofRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ExportProofRequest) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *ExportProofRequest) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

type UnpackProofFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw proof file encoded as bytes. Must be a file and not just an
	// individual mint/transfer proof.
	RawProofFile  []byte `protobuf:"bytes,1,opt,name=raw_proof_file,json=rawProofFile,proto3" json:"raw_proof_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpackProofFileRequest) Reset() {
	*x = UnpackProofFileRequest{}
	mi := &file_taprootassets_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpackProofFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackProofFileRequest) ProtoMessage() {}

func (x *UnpackProofFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackProofFileRequest.ProtoReflect.Descriptor instead.
func (*UnpackProofFileRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{57}
}

func (x *UnpackProofFileRequest) GetRawProofFile() []byte {
	if x != nil {
		return x.RawProofFile
	}
	return nil
}

type UnpackProofFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The individual proofs contained in the proof file, ordered by their
	// appearance within the file (issuance proof first, last known transfer
	// last).
	RawProofs     [][]byte `protobuf:"bytes,1,rep,name=raw_proofs,json=rawProofs,proto3" json:"raw_proofs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpackProofFileResponse) Reset() {
	*x = UnpackProofFileResponse{}
	mi := &file_taprootassets_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpackProofFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackProofFileResponse) ProtoMessage() {}

func (x *UnpackProofFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackProofFileResponse.ProtoReflect.Descriptor instead.
func (*UnpackProofFileResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{58}
}

func (x *UnpackProofFileResponse) GetRawProofs() [][]byte {
	if x != nil {
		return x.RawProofs
	}
	return nil
}

type AddrEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time the event was created in unix timestamp seconds.
	CreationTimeUnixSeconds uint64 `protobuf:"varint,1,opt,name=creation_time_unix_seconds,json=creationTimeUnixSeconds,proto3" json:"creation_time_unix_seconds,omitempty"`
	// The address the event was created for.
	Addr *Addr `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// The current status of the event.
	Status AddrEventStatus `protobuf:"varint,3,opt,name=status,proto3,enum=taprpc.AddrEventStatus" json:"status,omitempty"`
	// The outpoint that contains the inbound asset transfer.
	Outpoint string `protobuf:"bytes,4,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The amount in satoshis that were transferred on chain along with the asset.
	// This amount is independent of the requested asset amount, which can be
	// looked up on the address.
	UtxoAmtSat uint64 `protobuf:"varint,5,opt,name=utxo_amt_sat,json=utxoAmtSat,proto3" json:"utxo_amt_sat,omitempty"`
	// The taproot sibling hash that was used to send to the Taproot output.
	TaprootSibling []byte `protobuf:"bytes,6,opt,name=taproot_sibling,json=taprootSibling,proto3" json:"taproot_sibling,omitempty"`
	// The height at which the on-chain output was confirmed. If this is zero, it
	// means the output is unconfirmed.
	ConfirmationHeight uint32 `protobuf:"varint,7,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
	// Indicates whether a proof file can be found for the address' asset ID and
	// script key.
	HasProof      bool `protobuf:"varint,8,opt,name=has_proof,json=hasProof,proto3" json:"has_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddrEvent) Reset() {
	*x = AddrEvent{}
	mi := &file_taprootassets_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddrEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrEvent) ProtoMessage() {}

func (x *AddrEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrEvent.ProtoReflect.Descriptor instead.
func (*AddrEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{59}
}

func (x *AddrEvent) GetCreationTimeUnixSeconds() uint64 {
	if x != nil {
		return x.CreationTimeUnixSeconds
	}
	return 0
}

func (x *AddrEvent) GetAddr() *Addr {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *AddrEvent) GetStatus() AddrEventStatus {
	if x != nil {
		return x.Status
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

func (x *AddrEvent) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *AddrEvent) GetUtxoAmtSat() uint64 {
	if x != nil {
		return x.UtxoAmtSat
	}
	return 0
}

func (x *AddrEvent) GetTaprootSibling() []byte {
	if x != nil {
		return x.TaprootSibling
	}
	return nil
}

func (x *AddrEvent) GetConfirmationHeight() uint32 {
	if x != nil {
		return x.ConfirmationHeight
	}
	return 0
}

func (x *AddrEvent) GetHasProof() bool {
	if x != nil {
		return x.HasProof
	}
	return false
}

type AddrReceivesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter receives by a specific address. Leave empty to get all receives.
	FilterAddr string `protobuf:"bytes,1,opt,name=filter_addr,json=filterAddr,proto3" json:"filter_addr,omitempty"`
	// Filter receives by a specific status. Leave empty to get all receives.
	FilterStatus  AddrEventStatus `protobuf:"varint,2,opt,name=filter_status,json=filterStatus,proto3,enum=taprpc.AddrEventStatus" json:"filter_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddrReceivesRequest) Reset() {
	*x = AddrReceivesRequest{}
	mi := &file_taprootassets_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddrReceivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesRequest) ProtoMessage() {}

func (x *AddrReceivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesRequest.ProtoReflect.Descriptor instead.
func (*AddrReceivesRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{60}
}

func (x *AddrReceivesRequest) GetFilterAddr() string {
	if x != nil {
		return x.FilterAddr
	}
	return ""
}

func (x *AddrReceivesRequest) GetFilterStatus() AddrEventStatus {
	if x != nil {
		return x.FilterStatus
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

type AddrReceivesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The events that match the filter criteria.
	Events        []*AddrEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddrReceivesResponse) Reset() {
	*x = AddrReceivesResponse{}
	mi := &file_taprootassets_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddrReceivesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReceivesResponse) ProtoMessage() {}

func (x *AddrReceivesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReceivesResponse.ProtoReflect.Descriptor instead.
func (*AddrReceivesResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{61}
}

func (x *AddrReceivesResponse) GetEvents() []*AddrEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SendAssetRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TapAddrs []string               `protobuf:"bytes,1,rep,name=tap_addrs,json=tapAddrs,proto3" json:"tap_addrs,omitempty"`
	// The optional fee rate to use for the minting transaction, in sat/kw.
	FeeRate uint32 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// An optional short label for the send transfer. This label can be used to
	// track the progress of the transfer via the logs or an event subscription.
	// Multiple transfers can share the same label.
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// A flag to skip the proof courier ping check. This is useful for
	// testing purposes and for forced transfers when the proof courier
	// is not immediately available.
	SkipProofCourierPingCheck bool `protobuf:"varint,4,opt,name=skip_proof_courier_ping_check,json=skipProofCourierPingCheck,proto3" json:"skip_proof_courier_ping_check,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SendAssetRequest) Reset() {
	*x = SendAssetRequest{}
	mi := &file_taprootassets_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetRequest) ProtoMessage() {}

func (x *SendAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetRequest.ProtoReflect.Descriptor instead.
func (*SendAssetRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{62}
}

func (x *SendAssetRequest) GetTapAddrs() []string {
	if x != nil {
		return x.TapAddrs
	}
	return nil
}

func (x *SendAssetRequest) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *SendAssetRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SendAssetRequest) GetSkipProofCourierPingCheck() bool {
	if x != nil {
		return x.SkipProofCourierPingCheck
	}
	return false
}

type PrevInputAsset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnchorPoint   string                 `protobuf:"bytes,1,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	AssetId       []byte                 `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey     []byte                 `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Amount        uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrevInputAsset) Reset() {
	*x = PrevInputAsset{}
	mi := &file_taprootassets_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrevInputAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevInputAsset) ProtoMessage() {}

func (x *PrevInputAsset) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevInputAsset.ProtoReflect.Descriptor instead.
func (*PrevInputAsset) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{63}
}

func (x *PrevInputAsset) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *PrevInputAsset) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *PrevInputAsset) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *PrevInputAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SendAssetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transfer      *AssetTransfer         `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendAssetResponse) Reset() {
	*x = SendAssetResponse{}
	mi := &file_taprootassets_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetResponse) ProtoMessage() {}

func (x *SendAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetResponse.ProtoReflect.Descriptor instead.
func (*SendAssetResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{64}
}

func (x *SendAssetResponse) GetTransfer() *AssetTransfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_taprootassets_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{65}
}

type GetInfoResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Version           string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	LndVersion        string                 `protobuf:"bytes,2,opt,name=lnd_version,json=lndVersion,proto3" json:"lnd_version,omitempty"`
	Network           string                 `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	LndIdentityPubkey string                 `protobuf:"bytes,4,opt,name=lnd_identity_pubkey,json=lndIdentityPubkey,proto3" json:"lnd_identity_pubkey,omitempty"`
	NodeAlias         string                 `protobuf:"bytes,5,opt,name=node_alias,json=nodeAlias,proto3" json:"node_alias,omitempty"`
	BlockHeight       uint32                 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash         string                 `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	SyncToChain       bool                   `protobuf:"varint,8,opt,name=sync_to_chain,json=syncToChain,proto3" json:"sync_to_chain,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	mi := &file_taprootassets_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{66}
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetInfoResponse) GetLndVersion() string {
	if x != nil {
		return x.LndVersion
	}
	return ""
}

func (x *GetInfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetInfoResponse) GetLndIdentityPubkey() string {
	if x != nil {
		return x.LndIdentityPubkey
	}
	return ""
}

func (x *GetInfoResponse) GetNodeAlias() string {
	if x != nil {
		return x.NodeAlias
	}
	return ""
}

func (x *GetInfoResponse) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *GetInfoResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetInfoResponse) GetSyncToChain() bool {
	if x != nil {
		return x.SyncToChain
	}
	return false
}

type FetchAssetMetaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Asset:
	//
	//	*FetchAssetMetaRequest_AssetId
	//	*FetchAssetMetaRequest_MetaHash
	//	*FetchAssetMetaRequest_AssetIdStr
	//	*FetchAssetMetaRequest_MetaHashStr
	//	*FetchAssetMetaRequest_GroupKey
	//	*FetchAssetMetaRequest_GroupKeyStr
	Asset         isFetchAssetMetaRequest_Asset `protobuf_oneof:"asset"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAssetMetaRequest) Reset() {
	*x = FetchAssetMetaRequest{}
	mi := &file_taprootassets_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAssetMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAssetMetaRequest) ProtoMessage() {}

func (x *FetchAssetMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAssetMetaRequest.ProtoReflect.Descriptor instead.
func (*FetchAssetMetaRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{67}
}

func (x *FetchAssetMetaRequest) GetAsset() isFetchAssetMetaRequest_Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetAssetId() []byte {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_AssetId); ok {
			return x.AssetId
		}
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetMetaHash() []byte {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_MetaHash); ok {
			return x.MetaHash
		}
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetAssetIdStr() string {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_AssetIdStr); ok {
			return x.AssetIdStr
		}
	}
	return ""
}

func (x *FetchAssetMetaRequest) GetMetaHashStr() string {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_MetaHashStr); ok {
			return x.MetaHashStr
		}
	}
	return ""
}

func (x *FetchAssetMetaRequest) GetGroupKey() []byte {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_GroupKey); ok {
			return x.GroupKey
		}
	}
	return nil
}

func (x *FetchAssetMetaRequest) GetGroupKeyStr() string {
	if x != nil {
		if x, ok := x.Asset.(*FetchAssetMetaRequest_GroupKeyStr); ok {
			return x.GroupKeyStr
		}
	}
	return ""
}

type isFetchAssetMetaRequest_Asset interface {
	isFetchAssetMetaRequest_Asset()
}

type FetchAssetMetaRequest_AssetId struct {
	// The asset ID of the asset to fetch the meta for.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type FetchAssetMetaRequest_MetaHash struct {
	// The 32-byte meta hash of the asset meta.
	MetaHash []byte `protobuf:"bytes,2,opt,name=meta_hash,json=metaHash,proto3,oneof"`
}

type FetchAssetMetaRequest_AssetIdStr struct {
	// The hex encoded asset ID of the asset to fetch the meta for.
	AssetIdStr string `protobuf:"bytes,3,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type FetchAssetMetaRequest_MetaHashStr struct {
	// The hex encoded meta hash of the asset meta.
	MetaHashStr string `protobuf:"bytes,4,opt,name=meta_hash_str,json=metaHashStr,proto3,oneof"`
}

type FetchAssetMetaRequest_GroupKey struct {
	// The group key of the assets to fetch the meta for.
	GroupKey []byte `protobuf:"bytes,5,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type FetchAssetMetaRequest_GroupKeyStr struct {
	// The hex encoded group key of the assets to fetch the meta for.
	GroupKeyStr string `protobuf:"bytes,6,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*FetchAssetMetaRequest_AssetId) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_MetaHash) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_AssetIdStr) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_MetaHashStr) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_GroupKey) isFetchAssetMetaRequest_Asset() {}

func (*FetchAssetMetaRequest_GroupKeyStr) isFetchAssetMetaRequest_Asset() {}

type FetchAssetMetaResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of asset metadata objects.
	AssetMetas []*AssetMeta `protobuf:"bytes,1,rep,name=asset_metas,json=assetMetas,proto3" json:"asset_metas,omitempty"`
	// The number of base 10 digits to the right of the decimal point to
	// display the asset amount. This is the same for all assets in a group.
	DecimalDisplay int32 `protobuf:"varint,2,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FetchAssetMetaResponse) Reset() {
	*x = FetchAssetMetaResponse{}
	mi := &file_taprootassets_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAssetMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAssetMetaResponse) ProtoMessage() {}

func (x *FetchAssetMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAssetMetaResponse.ProtoReflect.Descriptor instead.
func (*FetchAssetMetaResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{68}
}

func (x *FetchAssetMetaResponse) GetAssetMetas() []*AssetMeta {
	if x != nil {
		return x.AssetMetas
	}
	return nil
}

func (x *FetchAssetMetaResponse) GetDecimalDisplay() int32 {
	if x != nil {
		return x.DecimalDisplay
	}
	return 0
}

type BurnAssetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Asset:
	//
	//	*BurnAssetRequest_AssetId
	//	*BurnAssetRequest_AssetIdStr
	Asset        isBurnAssetRequest_Asset `protobuf_oneof:"asset"`
	AmountToBurn uint64                   `protobuf:"varint,3,opt,name=amount_to_burn,json=amountToBurn,proto3" json:"amount_to_burn,omitempty"`
	// A safety check to ensure the user is aware of the destructive nature of
	// the burn. This needs to be set to the value "assets will be destroyed"
	// for the burn to succeed.
	ConfirmationText string `protobuf:"bytes,4,opt,name=confirmation_text,json=confirmationText,proto3" json:"confirmation_text,omitempty"`
	// A note that may contain user defined metadata related to this burn.
	Note          string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BurnAssetRequest) Reset() {
	*x = BurnAssetRequest{}
	mi := &file_taprootassets_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurnAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnAssetRequest) ProtoMessage() {}

func (x *BurnAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnAssetRequest.ProtoReflect.Descriptor instead.
func (*BurnAssetRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{69}
}

func (x *BurnAssetRequest) GetAsset() isBurnAssetRequest_Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *BurnAssetRequest) GetAssetId() []byte {
	if x != nil {
		if x, ok := x.Asset.(*BurnAssetRequest_AssetId); ok {
			return x.AssetId
		}
	}
	return nil
}

func (x *BurnAssetRequest) GetAssetIdStr() string {
	if x != nil {
		if x, ok := x.Asset.(*BurnAssetRequest_AssetIdStr); ok {
			return x.AssetIdStr
		}
	}
	return ""
}

func (x *BurnAssetRequest) GetAmountToBurn() uint64 {
	if x != nil {
		return x.AmountToBurn
	}
	return 0
}

func (x *BurnAssetRequest) GetConfirmationText() string {
	if x != nil {
		return x.ConfirmationText
	}
	return ""
}

func (x *BurnAssetRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type isBurnAssetRequest_Asset interface {
	isBurnAssetRequest_Asset()
}

type BurnAssetRequest_AssetId struct {
	// The asset ID of the asset to burn units of.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type BurnAssetRequest_AssetIdStr struct {
	// The hex encoded asset ID of the asset to burn units of.
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

func (*BurnAssetRequest_AssetId) isBurnAssetRequest_Asset() {}

func (*BurnAssetRequest_AssetIdStr) isBurnAssetRequest_Asset() {}

type BurnAssetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset transfer that contains the asset burn as an output.
	BurnTransfer *AssetTransfer `protobuf:"bytes,1,opt,name=burn_transfer,json=burnTransfer,proto3" json:"burn_transfer,omitempty"`
	// The burn transition proof for the asset burn output.
	BurnProof     *DecodedProof `protobuf:"bytes,2,opt,name=burn_proof,json=burnProof,proto3" json:"burn_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BurnAssetResponse) Reset() {
	*x = BurnAssetResponse{}
	mi := &file_taprootassets_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurnAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnAssetResponse) ProtoMessage() {}

func (x *BurnAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnAssetResponse.ProtoReflect.Descriptor instead.
func (*BurnAssetResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{70}
}

func (x *BurnAssetResponse) GetBurnTransfer() *AssetTransfer {
	if x != nil {
		return x.BurnTransfer
	}
	return nil
}

func (x *BurnAssetResponse) GetBurnProof() *DecodedProof {
	if x != nil {
		return x.BurnProof
	}
	return nil
}

type ListBurnsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset id of the burnt asset.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The tweaked group key of the group this asset belongs to.
	TweakedGroupKey []byte `protobuf:"bytes,3,opt,name=tweaked_group_key,json=tweakedGroupKey,proto3" json:"tweaked_group_key,omitempty"`
	// The txid of the transaction that the burn was anchored to.
	AnchorTxid    []byte `protobuf:"bytes,4,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBurnsRequest) Reset() {
	*x = ListBurnsRequest{}
	mi := &file_taprootassets_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBurnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBurnsRequest) ProtoMessage() {}

func (x *ListBurnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBurnsRequest.ProtoReflect.Descriptor instead.
func (*ListBurnsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{71}
}

func (x *ListBurnsRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ListBurnsRequest) GetTweakedGroupKey() []byte {
	if x != nil {
		return x.TweakedGroupKey
	}
	return nil
}

func (x *ListBurnsRequest) GetAnchorTxid() []byte {
	if x != nil {
		return x.AnchorTxid
	}
	return nil
}

type AssetBurn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A note that may contain user defined metadata related to this burn.
	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	// The asset id of the burnt asset.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The tweaked group key of the group this asset belongs to.
	TweakedGroupKey []byte `protobuf:"bytes,3,opt,name=tweaked_group_key,json=tweakedGroupKey,proto3" json:"tweaked_group_key,omitempty"`
	// The amount of burnt assets.
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The txid of the transaction that the burn was anchored to.
	AnchorTxid    []byte `protobuf:"bytes,5,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetBurn) Reset() {
	*x = AssetBurn{}
	mi := &file_taprootassets_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetBurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBurn) ProtoMessage() {}

func (x *AssetBurn) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBurn.ProtoReflect.Descriptor instead.
func (*AssetBurn) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{72}
}

func (x *AssetBurn) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AssetBurn) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetBurn) GetTweakedGroupKey() []byte {
	if x != nil {
		return x.TweakedGroupKey
	}
	return nil
}

func (x *AssetBurn) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetBurn) GetAnchorTxid() []byte {
	if x != nil {
		return x.AnchorTxid
	}
	return nil
}

type ListBurnsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Burns         []*AssetBurn           `protobuf:"bytes,1,rep,name=burns,proto3" json:"burns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBurnsResponse) Reset() {
	*x = ListBurnsResponse{}
	mi := &file_taprootassets_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBurnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBurnsResponse) ProtoMessage() {}

func (x *ListBurnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBurnsResponse.ProtoReflect.Descriptor instead.
func (*ListBurnsResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{73}
}

func (x *ListBurnsResponse) GetBurns() []*AssetBurn {
	if x != nil {
		return x.Burns
	}
	return nil
}

type OutPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw bytes representing the transaction id.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// The index of the output on the transaction.
	OutputIndex   uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	mi := &file_taprootassets_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{74}
}

func (x *OutPoint) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *OutPoint) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type SubscribeReceiveEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter receives by a specific address. Leave empty to get all receive
	// events for all addresses.
	FilterAddr string `protobuf:"bytes,1,opt,name=filter_addr,json=filterAddr,proto3" json:"filter_addr,omitempty"`
	// The start time as a Unix timestamp in microseconds. If not set (default
	// value 0), the daemon will start streaming events from the current time.
	StartTimestamp int64 `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeReceiveEventsRequest) Reset() {
	*x = SubscribeReceiveEventsRequest{}
	mi := &file_taprootassets_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeReceiveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReceiveEventsRequest) ProtoMessage() {}

func (x *SubscribeReceiveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReceiveEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeReceiveEventsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{75}
}

func (x *SubscribeReceiveEventsRequest) GetFilterAddr() string {
	if x != nil {
		return x.FilterAddr
	}
	return ""
}

func (x *SubscribeReceiveEventsRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

type ReceiveEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event creation timestamp (Unix timestamp in microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The address that received the asset.
	Address *Addr `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The outpoint of the transaction that was used to receive the asset.
	Outpoint string `protobuf:"bytes,3,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The status of the event. If error below is set, then the status is the
	// state that lead to the error during its execution.
	Status AddrEventStatus `protobuf:"varint,4,opt,name=status,proto3,enum=taprpc.AddrEventStatus" json:"status,omitempty"`
	// The height of the block the asset receive transaction was mined in. This
	// is only set if the status is ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED or
	// later.
	ConfirmationHeight uint32 `protobuf:"varint,5,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
	// An optional error, indicating that executing the status above failed.
	Error         string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveEvent) Reset() {
	*x = ReceiveEvent{}
	mi := &file_taprootassets_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveEvent) ProtoMessage() {}

func (x *ReceiveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveEvent.ProtoReflect.Descriptor instead.
func (*ReceiveEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{76}
}

func (x *ReceiveEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReceiveEvent) GetAddress() *Addr {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReceiveEvent) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *ReceiveEvent) GetStatus() AddrEventStatus {
	if x != nil {
		return x.Status
	}
	return AddrEventStatus_ADDR_EVENT_STATUS_UNKNOWN
}

func (x *ReceiveEvent) GetConfirmationHeight() uint32 {
	if x != nil {
		return x.ConfirmationHeight
	}
	return 0
}

func (x *ReceiveEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SubscribeSendEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter send events by a specific recipient script key. Leave empty to get
	// all receive events for all parcels.
	FilterScriptKey []byte `protobuf:"bytes,1,opt,name=filter_script_key,json=filterScriptKey,proto3" json:"filter_script_key,omitempty"`
	// Filter send events by a specific label. Leave empty to not filter by
	// transfer label.
	FilterLabel   string `protobuf:"bytes,2,opt,name=filter_label,json=filterLabel,proto3" json:"filter_label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeSendEventsRequest) Reset() {
	*x = SubscribeSendEventsRequest{}
	mi := &file_taprootassets_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeSendEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSendEventsRequest) ProtoMessage() {}

func (x *SubscribeSendEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSendEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSendEventsRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{77}
}

func (x *SubscribeSendEventsRequest) GetFilterScriptKey() []byte {
	if x != nil {
		return x.FilterScriptKey
	}
	return nil
}

func (x *SubscribeSendEventsRequest) GetFilterLabel() string {
	if x != nil {
		return x.FilterLabel
	}
	return ""
}

type SendEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Execute timestamp (Unix timestamp in microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The send state that was executed successfully. If error below is set,
	// then the send_state is the state that lead to the error during its
	// execution.
	SendState string `protobuf:"bytes,2,opt,name=send_state,json=sendState,proto3" json:"send_state,omitempty"`
	// The type of the outbound send parcel.
	ParcelType ParcelType `protobuf:"varint,3,opt,name=parcel_type,json=parcelType,proto3,enum=taprpc.ParcelType" json:"parcel_type,omitempty"`
	// The list of addresses the parcel sends to (recipient addresses only, not
	// including change going back to own wallet). This is only set for parcels
	// of type PARCEL_TYPE_ADDRESS.
	Addresses []*Addr `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The virtual packets that are part of the parcel.
	VirtualPackets [][]byte `protobuf:"bytes,5,rep,name=virtual_packets,json=virtualPackets,proto3" json:"virtual_packets,omitempty"`
	// The passive virtual packets that are carried along with the parcel. This
	// is empty if there were no other assets in the input commitment that is
	// being spent with the "active" virtual packets above.
	PassiveVirtualPackets [][]byte `protobuf:"bytes,6,rep,name=passive_virtual_packets,json=passiveVirtualPackets,proto3" json:"passive_virtual_packets,omitempty"`
	// The Bitcoin on-chain anchor transaction that commits the sent assets
	// on-chain. This is only set after the send state SEND_STATE_ANCHOR_SIGN.
	AnchorTransaction *AnchorTransaction `protobuf:"bytes,7,opt,name=anchor_transaction,json=anchorTransaction,proto3" json:"anchor_transaction,omitempty"`
	// The final transfer as it will be stored in the database. This is only set
	// after the send state SEND_STATE_LOG_COMMITMENT.
	Transfer *AssetTransfer `protobuf:"bytes,8,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// An optional error, indicating that executing the send_state failed.
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	// The label of the transfer.
	TransferLabel string `protobuf:"bytes,10,opt,name=transfer_label,json=transferLabel,proto3" json:"transfer_label,omitempty"`
	// The next send state that will be executed.
	NextSendState string `protobuf:"bytes,11,opt,name=next_send_state,json=nextSendState,proto3" json:"next_send_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendEvent) Reset() {
	*x = SendEvent{}
	mi := &file_taprootassets_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEvent) ProtoMessage() {}

func (x *SendEvent) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEvent.ProtoReflect.Descriptor instead.
func (*SendEvent) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{78}
}

func (x *SendEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SendEvent) GetSendState() string {
	if x != nil {
		return x.SendState
	}
	return ""
}

func (x *SendEvent) GetParcelType() ParcelType {
	if x != nil {
		return x.ParcelType
	}
	return ParcelType_PARCEL_TYPE_ADDRESS
}

func (x *SendEvent) GetAddresses() []*Addr {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *SendEvent) GetVirtualPackets() [][]byte {
	if x != nil {
		return x.VirtualPackets
	}
	return nil
}

func (x *SendEvent) GetPassiveVirtualPackets() [][]byte {
	if x != nil {
		return x.PassiveVirtualPackets
	}
	return nil
}

func (x *SendEvent) GetAnchorTransaction() *AnchorTransaction {
	if x != nil {
		return x.AnchorTransaction
	}
	return nil
}

func (x *SendEvent) GetTransfer() *AssetTransfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *SendEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SendEvent) GetTransferLabel() string {
	if x != nil {
		return x.TransferLabel
	}
	return ""
}

func (x *SendEvent) GetNextSendState() string {
	if x != nil {
		return x.NextSendState
	}
	return ""
}

type AnchorTransaction struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AnchorPsbt []byte                 `protobuf:"bytes,1,opt,name=anchor_psbt,json=anchorPsbt,proto3" json:"anchor_psbt,omitempty"`
	// The index of the (added) change output or -1 if no change was left over.
	ChangeOutputIndex int32 `protobuf:"varint,2,opt,name=change_output_index,json=changeOutputIndex,proto3" json:"change_output_index,omitempty"`
	// The total number of satoshis in on-chain fees paid by the anchor
	// transaction.
	ChainFeesSats int64 `protobuf:"varint,3,opt,name=chain_fees_sats,json=chainFeesSats,proto3" json:"chain_fees_sats,omitempty"`
	// The fee rate in sat/kWU that was targeted by the anchor transaction.
	TargetFeeRateSatKw int32 `protobuf:"varint,4,opt,name=target_fee_rate_sat_kw,json=targetFeeRateSatKw,proto3" json:"target_fee_rate_sat_kw,omitempty"`
	// The list of UTXO lock leases that were acquired for the inputs in the funded
	// PSBT packet from lnd. Only inputs added to the PSBT by this RPC are locked,
	// inputs that were already present in the PSBT are not locked.
	LndLockedUtxos []*OutPoint `protobuf:"bytes,5,rep,name=lnd_locked_utxos,json=lndLockedUtxos,proto3" json:"lnd_locked_utxos,omitempty"`
	// The final, signed anchor transaction that was broadcast to the network.
	FinalTx       []byte `protobuf:"bytes,6,opt,name=final_tx,json=finalTx,proto3" json:"final_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnchorTransaction) Reset() {
	*x = AnchorTransaction{}
	mi := &file_taprootassets_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnchorTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorTransaction) ProtoMessage() {}

func (x *AnchorTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorTransaction.ProtoReflect.Descriptor instead.
func (*AnchorTransaction) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{79}
}

func (x *AnchorTransaction) GetAnchorPsbt() []byte {
	if x != nil {
		return x.AnchorPsbt
	}
	return nil
}

func (x *AnchorTransaction) GetChangeOutputIndex() int32 {
	if x != nil {
		return x.ChangeOutputIndex
	}
	return 0
}

func (x *AnchorTransaction) GetChainFeesSats() int64 {
	if x != nil {
		return x.ChainFeesSats
	}
	return 0
}

func (x *AnchorTransaction) GetTargetFeeRateSatKw() int32 {
	if x != nil {
		return x.TargetFeeRateSatKw
	}
	return 0
}

func (x *AnchorTransaction) GetLndLockedUtxos() []*OutPoint {
	if x != nil {
		return x.LndLockedUtxos
	}
	return nil
}

func (x *AnchorTransaction) GetFinalTx() []byte {
	if x != nil {
		return x.FinalTx
	}
	return nil
}

type RegisterTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset ID of the asset to register the transfer for.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The optional group key of the asset to register the transfer for.
	GroupKey []byte `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The script key of the asset to register the transfer for.
	ScriptKey []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The outpoint of the transaction that was used to receive the asset.
	Outpoint      *OutPoint `protobuf:"bytes,4,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterTransferRequest) Reset() {
	*x = RegisterTransferRequest{}
	mi := &file_taprootassets_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTransferRequest) ProtoMessage() {}

func (x *RegisterTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTransferRequest.ProtoReflect.Descriptor instead.
func (*RegisterTransferRequest) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{80}
}

func (x *RegisterTransferRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *RegisterTransferRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *RegisterTransferRequest) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *RegisterTransferRequest) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

type RegisterTransferResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RegisteredAsset *Asset                 `protobuf:"bytes,1,opt,name=registered_asset,json=registeredAsset,proto3" json:"registered_asset,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegisterTransferResponse) Reset() {
	*x = RegisterTransferResponse{}
	mi := &file_taprootassets_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTransferResponse) ProtoMessage() {}

func (x *RegisterTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taprootassets_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTransferResponse.ProtoReflect.Descriptor instead.
func (*RegisterTransferResponse) Descriptor() ([]byte, []int) {
	return file_taprootassets_proto_rawDescGZIP(), []int{81}
}

func (x *RegisterTransferResponse) GetRegisteredAsset() *Asset {
	if x != nil {
		return x.RegisteredAsset
	}
	return nil
}

var File_taprootassets_proto protoreflect.FileDescriptor

const file_taprootassets_proto_rawDesc = "" +
	"\n" +
	"\x13taprootassets.proto\x12\x06taprpc\"g\n" +
	"\tAssetMeta\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12)\n" +
	"\x04type\x18\x02 \x01(\x0e2\x15.taprpc.AssetMetaTypeR\x04type\x12\x1b\n" +
	"\tmeta_hash\x18\x03 \x01(\fR\bmetaHash\"\xc9\x03\n" +
	"\x10ListAssetRequest\x12!\n" +
	"\fwith_witness\x18\x01 \x01(\bR\vwithWitness\x12#\n" +
	"\rinclude_spent\x18\x02 \x01(\bR\fincludeSpent\x12%\n" +
	"\x0einclude_leased\x18\x03 \x01(\bR\rincludeLeased\x12:\n" +
	"\x19include_unconfirmed_mints\x18\x04 \x01(\bR\x17includeUnconfirmedMints\x12\x1d\n" +
	"\n" +
	"min_amount\x18\x05 \x01(\x04R\tminAmount\x12\x1d\n" +
	"\n" +
	"max_amount\x18\x06 \x01(\x04R\tmaxAmount\x12\x1b\n" +
	"\tgroup_key\x18\a \x01(\fR\bgroupKey\x120\n" +
	"\n" +
	"script_key\x18\b \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\x129\n" +
	"\x0fanchor_outpoint\x18\t \x01(\v2\x10.taprpc.OutPointR\x0eanchorOutpoint\x12B\n" +
	"\x0fscript_key_type\x18\n" +
	" \x01(\v2\x1a.taprpc.ScriptKeyTypeQueryR\rscriptKeyType\"\xbb\x02\n" +
	"\n" +
	"AnchorInfo\x12\x1b\n" +
	"\tanchor_tx\x18\x01 \x01(\fR\banchorTx\x12*\n" +
	"\x11anchor_block_hash\x18\x03 \x01(\tR\x0fanchorBlockHash\x12'\n" +
	"\x0fanchor_outpoint\x18\x04 \x01(\tR\x0eanchorOutpoint\x12!\n" +
	"\finternal_key\x18\x05 \x01(\fR\vinternalKey\x12\x1f\n" +
	"\vmerkle_root\x18\x06 \x01(\fR\n" +
	"merkleRoot\x12+\n" +
	"\x11tapscript_sibling\x18\a \x01(\fR\x10tapscriptSibling\x12!\n" +
	"\fblock_height\x18\b \x01(\rR\vblockHeight\x12'\n" +
	"\x0fblock_timestamp\x18\t \x01(\x03R\x0eblockTimestamp\"\xd3\x01\n" +
	"\vGenesisInfo\x12#\n" +
	"\rgenesis_point\x18\x01 \x01(\tR\fgenesisPoint\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tmeta_hash\x18\x03 \x01(\fR\bmetaHash\x12\x19\n" +
	"\basset_id\x18\x04 \x01(\fR\aassetId\x120\n" +
	"\n" +
	"asset_type\x18\x05 \x01(\x0e2\x11.taprpc.AssetTypeR\tassetType\x12!\n" +
	"\foutput_index\x18\x06 \x01(\rR\voutputIndex\"y\n" +
	"\vExternalKey\x12\x12\n" +
	"\x04xpub\x18\x01 \x01(\tR\x04xpub\x12-\n" +
	"\x12master_fingerprint\x18\x02 \x01(\fR\x11masterFingerprint\x12'\n" +
	"\x0fderivation_path\x18\x03 \x01(\tR\x0ederivationPath\"\xf9\x01\n" +
	"\x0fGroupKeyRequest\x12.\n" +
	"\araw_key\x18\x01 \x01(\v2\x15.taprpc.KeyDescriptorR\x06rawKey\x12:\n" +
	"\x0eanchor_genesis\x18\x02 \x01(\v2\x13.taprpc.GenesisInfoR\ranchorGenesis\x12%\n" +
	"\x0etapscript_root\x18\x03 \x01(\fR\rtapscriptRoot\x12\x1b\n" +
	"\tnew_asset\x18\x04 \x01(\fR\bnewAsset\x126\n" +
	"\fexternal_key\x18\x05 \x01(\v2\x13.taprpc.ExternalKeyR\vexternalKey\":\n" +
	"\x05TxOut\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x03R\x05value\x12\x1b\n" +
	"\tpk_script\x18\x02 \x01(\fR\bpkScript\"\x9c\x01\n" +
	"\x0eGroupVirtualTx\x12 \n" +
	"\vtransaction\x18\x01 \x01(\fR\vtransaction\x12(\n" +
	"\bprev_out\x18\x02 \x01(\v2\r.taprpc.TxOutR\aprevOut\x12\x1d\n" +
	"\n" +
	"genesis_id\x18\x03 \x01(\fR\tgenesisId\x12\x1f\n" +
	"\vtweaked_key\x18\x04 \x01(\fR\n" +
	"tweakedKey\"G\n" +
	"\fGroupWitness\x12\x1d\n" +
	"\n" +
	"genesis_id\x18\x01 \x01(\fR\tgenesisId\x12\x18\n" +
	"\awitness\x18\x02 \x03(\fR\awitness\"\xa8\x01\n" +
	"\n" +
	"AssetGroup\x12\"\n" +
	"\rraw_group_key\x18\x01 \x01(\fR\vrawGroupKey\x12*\n" +
	"\x11tweaked_group_key\x18\x02 \x01(\fR\x0ftweakedGroupKey\x12#\n" +
	"\rasset_witness\x18\x03 \x01(\fR\fassetWitness\x12%\n" +
	"\x0etapscript_root\x18\x04 \x01(\fR\rtapscriptRoot\"[\n" +
	"\x0eGroupKeyReveal\x12\"\n" +
	"\rraw_group_key\x18\x01 \x01(\fR\vrawGroupKey\x12%\n" +
	"\x0etapscript_root\x18\x02 \x01(\fR\rtapscriptRoot\"T\n" +
	"\rGenesisReveal\x12C\n" +
	"\x13genesis_base_reveal\x18\x01 \x01(\v2\x13.taprpc.GenesisInfoR\x11genesisBaseReveal\"9\n" +
	"\x0eDecimalDisplay\x12'\n" +
	"\x0fdecimal_display\x18\x01 \x01(\rR\x0edecimalDisplay\"\xe0\x06\n" +
	"\x05Asset\x12.\n" +
	"\aversion\x18\x01 \x01(\x0e2\x14.taprpc.AssetVersionR\aversion\x128\n" +
	"\rasset_genesis\x18\x02 \x01(\v2\x13.taprpc.GenesisInfoR\fassetGenesis\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\x12\x1b\n" +
	"\tlock_time\x18\x05 \x01(\x05R\blockTime\x12,\n" +
	"\x12relative_lock_time\x18\x06 \x01(\x05R\x10relativeLockTime\x12%\n" +
	"\x0escript_version\x18\a \x01(\x05R\rscriptVersion\x12\x1d\n" +
	"\n" +
	"script_key\x18\t \x01(\fR\tscriptKey\x12-\n" +
	"\x13script_key_is_local\x18\n" +
	" \x01(\bR\x10scriptKeyIsLocal\x123\n" +
	"\vasset_group\x18\v \x01(\v2\x12.taprpc.AssetGroupR\n" +
	"assetGroup\x125\n" +
	"\fchain_anchor\x18\f \x01(\v2\x12.taprpc.AnchorInfoR\vchainAnchor\x12:\n" +
	"\x0eprev_witnesses\x18\r \x03(\v2\x13.taprpc.PrevWitnessR\rprevWitnesses\x12\x19\n" +
	"\bis_spent\x18\x0e \x01(\bR\aisSpent\x12\x1f\n" +
	"\vlease_owner\x18\x0f \x01(\fR\n" +
	"leaseOwner\x12!\n" +
	"\flease_expiry\x18\x10 \x01(\x03R\vleaseExpiry\x12\x17\n" +
	"\ais_burn\x18\x11 \x01(\bR\x06isBurn\x129\n" +
	"\x19script_key_declared_known\x18\x12 \x01(\bR\x16scriptKeyDeclaredKnown\x12:\n" +
	"\x1ascript_key_has_script_path\x18\x13 \x01(\bR\x16scriptKeyHasScriptPath\x12?\n" +
	"\x0fdecimal_display\x18\x14 \x01(\v2\x16.taprpc.DecimalDisplayR\x0edecimalDisplay\x12=\n" +
	"\x0fscript_key_type\x18\x15 \x01(\x0e2\x15.taprpc.ScriptKeyTypeR\rscriptKeyType\"\xa1\x01\n" +
	"\vPrevWitness\x12/\n" +
	"\aprev_id\x18\x01 \x01(\v2\x16.taprpc.PrevInputAssetR\x06prevId\x12\x1d\n" +
	"\n" +
	"tx_witness\x18\x02 \x03(\fR\ttxWitness\x12B\n" +
	"\x10split_commitment\x18\x03 \x01(\v2\x17.taprpc.SplitCommitmentR\x0fsplitCommitment\"?\n" +
	"\x0fSplitCommitment\x12,\n" +
	"\n" +
	"root_asset\x18\x01 \x01(\v2\r.taprpc.AssetR\trootAsset\"\x9c\x01\n" +
	"\x11ListAssetResponse\x12%\n" +
	"\x06assets\x18\x01 \x03(\v2\r.taprpc.AssetR\x06assets\x123\n" +
	"\x15unconfirmed_transfers\x18\x02 \x01(\x04R\x14unconfirmedTransfers\x12+\n" +
	"\x11unconfirmed_mints\x18\x03 \x01(\x04R\x10unconfirmedMints\"}\n" +
	"\x10ListUtxosRequest\x12%\n" +
	"\x0einclude_leased\x18\x01 \x01(\bR\rincludeLeased\x12B\n" +
	"\x0fscript_key_type\x18\x02 \x01(\v2\x1a.taprpc.ScriptKeyTypeQueryR\rscriptKeyType\"\xa9\x02\n" +
	"\vManagedUtxo\x12\x1b\n" +
	"\tout_point\x18\x01 \x01(\tR\boutPoint\x12\x17\n" +
	"\aamt_sat\x18\x02 \x01(\x03R\x06amtSat\x12!\n" +
	"\finternal_key\x18\x03 \x01(\fR\vinternalKey\x12,\n" +
	"\x12taproot_asset_root\x18\x04 \x01(\fR\x10taprootAssetRoot\x12\x1f\n" +
	"\vmerkle_root\x18\x05 \x01(\fR\n" +
	"merkleRoot\x12%\n" +
	"\x06assets\x18\x06 \x03(\v2\r.taprpc.AssetR\x06assets\x12\x1f\n" +
	"\vlease_owner\x18\a \x01(\fR\n" +
	"leaseOwner\x12*\n" +
	"\x11lease_expiry_unix\x18\b \x01(\x03R\x0fleaseExpiryUnix\"\xbb\x01\n" +
	"\x11ListUtxosResponse\x12P\n" +
	"\rmanaged_utxos\x18\x01 \x03(\v2+.taprpc.ListUtxosResponse.ManagedUtxosEntryR\fmanagedUtxos\x1aT\n" +
	"\x11ManagedUtxosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.taprpc.ManagedUtxoR\x05value:\x028\x01\"\x13\n" +
	"\x11ListGroupsRequest\"\x8d\x02\n" +
	"\x12AssetHumanReadable\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x1b\n" +
	"\tlock_time\x18\x03 \x01(\x05R\blockTime\x12,\n" +
	"\x12relative_lock_time\x18\x04 \x01(\x05R\x10relativeLockTime\x12\x10\n" +
	"\x03tag\x18\x05 \x01(\tR\x03tag\x12\x1b\n" +
	"\tmeta_hash\x18\x06 \x01(\fR\bmetaHash\x12%\n" +
	"\x04type\x18\a \x01(\x0e2\x11.taprpc.AssetTypeR\x04type\x12.\n" +
	"\aversion\x18\b \x01(\x0e2\x14.taprpc.AssetVersionR\aversion\"C\n" +
	"\rGroupedAssets\x122\n" +
	"\x06assets\x18\x01 \x03(\v2\x1a.taprpc.AssetHumanReadableR\x06assets\"\xa6\x01\n" +
	"\x12ListGroupsResponse\x12>\n" +
	"\x06groups\x18\x01 \x03(\v2&.taprpc.ListGroupsResponse.GroupsEntryR\x06groups\x1aP\n" +
	"\vGroupsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.taprpc.GroupedAssetsR\x05value:\x028\x01\"\x95\x02\n" +
	"\x13ListBalancesRequest\x12\x1b\n" +
	"\basset_id\x18\x01 \x01(\bH\x00R\aassetId\x12\x1d\n" +
	"\tgroup_key\x18\x02 \x01(\bH\x00R\bgroupKey\x12!\n" +
	"\fasset_filter\x18\x03 \x01(\fR\vassetFilter\x12(\n" +
	"\x10group_key_filter\x18\x04 \x01(\fR\x0egroupKeyFilter\x12%\n" +
	"\x0einclude_leased\x18\x05 \x01(\bR\rincludeLeased\x12B\n" +
	"\x0fscript_key_type\x18\x06 \x01(\v2\x1a.taprpc.ScriptKeyTypeQueryR\rscriptKeyTypeB\n" +
	"\n" +
	"\bgroup_by\"b\n" +
	"\fAssetBalance\x128\n" +
	"\rasset_genesis\x18\x01 \x01(\v2\x13.taprpc.GenesisInfoR\fassetGenesis\x12\x18\n" +
	"\abalance\x18\x03 \x01(\x04R\abalance\"J\n" +
	"\x11AssetGroupBalance\x12\x1b\n" +
	"\tgroup_key\x18\x01 \x01(\fR\bgroupKey\x12\x18\n" +
	"\abalance\x18\x02 \x01(\x04R\abalance\"\x90\x03\n" +
	"\x14ListBalancesResponse\x12V\n" +
	"\x0easset_balances\x18\x01 \x03(\v2/.taprpc.ListBalancesResponse.AssetBalancesEntryR\rassetBalances\x12f\n" +
	"\x14asset_group_balances\x18\x02 \x03(\v24.taprpc.ListBalancesResponse.AssetGroupBalancesEntryR\x12assetGroupBalances\x1aV\n" +
	"\x12AssetBalancesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.taprpc.AssetBalanceR\x05value:\x028\x01\x1a`\n" +
	"\x17AssetGroupBalancesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.taprpc.AssetGroupBalanceR\x05value:\x028\x01\"7\n" +
	"\x14ListTransfersRequest\x12\x1f\n" +
	"\vanchor_txid\x18\x01 \x01(\tR\n" +
	"anchorTxid\"L\n" +
	"\x15ListTransfersResponse\x123\n" +
	"\ttransfers\x18\x01 \x03(\v2\x15.taprpc.AssetTransferR\ttransfers\":\n" +
	"\tChainHash\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x19\n" +
	"\bhash_str\x18\x02 \x01(\tR\ahashStr\"\xd5\x03\n" +
	"\rAssetTransfer\x12-\n" +
	"\x12transfer_timestamp\x18\x01 \x01(\x03R\x11transferTimestamp\x12$\n" +
	"\x0eanchor_tx_hash\x18\x02 \x01(\fR\fanchorTxHash\x121\n" +
	"\x15anchor_tx_height_hint\x18\x03 \x01(\rR\x12anchorTxHeightHint\x12/\n" +
	"\x14anchor_tx_chain_fees\x18\x04 \x01(\x03R\x11anchorTxChainFees\x12-\n" +
	"\x06inputs\x18\x05 \x03(\v2\x15.taprpc.TransferInputR\x06inputs\x120\n" +
	"\aoutputs\x18\x06 \x03(\v2\x16.taprpc.TransferOutputR\aoutputs\x12B\n" +
	"\x14anchor_tx_block_hash\x18\a \x01(\v2\x11.taprpc.ChainHashR\x11anchorTxBlockHash\x123\n" +
	"\x16anchor_tx_block_height\x18\b \x01(\rR\x13anchorTxBlockHeight\x12\x14\n" +
	"\x05label\x18\t \x01(\tR\x05label\x12\x1b\n" +
	"\tanchor_tx\x18\n" +
	" \x01(\fR\banchorTx\"\x84\x01\n" +
	"\rTransferInput\x12!\n" +
	"\fanchor_point\x18\x01 \x01(\tR\vanchorPoint\x12\x19\n" +
	"\basset_id\x18\x02 \x01(\fR\aassetId\x12\x1d\n" +
	"\n" +
	"script_key\x18\x03 \x01(\fR\tscriptKey\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\"\xb2\x02\n" +
	"\x14TransferOutputAnchor\x12\x1a\n" +
	"\boutpoint\x18\x01 \x01(\tR\boutpoint\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value\x12!\n" +
	"\finternal_key\x18\x03 \x01(\fR\vinternalKey\x12,\n" +
	"\x12taproot_asset_root\x18\x04 \x01(\fR\x10taprootAssetRoot\x12\x1f\n" +
	"\vmerkle_root\x18\x05 \x01(\fR\n" +
	"merkleRoot\x12+\n" +
	"\x11tapscript_sibling\x18\x06 \x01(\fR\x10tapscriptSibling\x12,\n" +
	"\x12num_passive_assets\x18\a \x01(\rR\x10numPassiveAssets\x12\x1b\n" +
	"\tpk_script\x18\b \x01(\fR\bpkScript\"\xae\x04\n" +
	"\x0eTransferOutput\x124\n" +
	"\x06anchor\x18\x01 \x01(\v2\x1c.taprpc.TransferOutputAnchorR\x06anchor\x12\x1d\n" +
	"\n" +
	"script_key\x18\x02 \x01(\fR\tscriptKey\x12-\n" +
	"\x13script_key_is_local\x18\x03 \x01(\bR\x10scriptKeyIsLocal\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\x12$\n" +
	"\x0enew_proof_blob\x18\x05 \x01(\fR\fnewProofBlob\x123\n" +
	"\x16split_commit_root_hash\x18\x06 \x01(\fR\x13splitCommitRootHash\x123\n" +
	"\voutput_type\x18\a \x01(\x0e2\x12.taprpc.OutputTypeR\n" +
	"outputType\x129\n" +
	"\rasset_version\x18\b \x01(\x0e2\x14.taprpc.AssetVersionR\fassetVersion\x12\x1b\n" +
	"\tlock_time\x18\t \x01(\x04R\blockTime\x12,\n" +
	"\x12relative_lock_time\x18\n" +
	" \x01(\x04R\x10relativeLockTime\x12O\n" +
	"\x15proof_delivery_status\x18\v \x01(\x0e2\x1b.taprpc.ProofDeliveryStatusR\x13proofDeliveryStatus\x12\x19\n" +
	"\basset_id\x18\f \x01(\fR\aassetId\"\r\n" +
	"\vStopRequest\"\x0e\n" +
	"\fStopResponse\"F\n" +
	"\x11DebugLevelRequest\x12\x12\n" +
	"\x04show\x18\x01 \x01(\bR\x04show\x12\x1d\n" +
	"\n" +
	"level_spec\x18\x02 \x01(\tR\tlevelSpec\"5\n" +
	"\x12DebugLevelResponse\x12\x1f\n" +
	"\vsub_systems\x18\x01 \x01(\tR\n" +
	"subSystems\"\xe6\x03\n" +
	"\x04Addr\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\tR\aencoded\x12\x19\n" +
	"\basset_id\x18\x02 \x01(\fR\aassetId\x120\n" +
	"\n" +
	"asset_type\x18\x03 \x01(\x0e2\x11.taprpc.AssetTypeR\tassetType\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\x12\x1b\n" +
	"\tgroup_key\x18\x05 \x01(\fR\bgroupKey\x12\x1d\n" +
	"\n" +
	"script_key\x18\x06 \x01(\fR\tscriptKey\x12!\n" +
	"\finternal_key\x18\a \x01(\fR\vinternalKey\x12+\n" +
	"\x11tapscript_sibling\x18\b \x01(\fR\x10tapscriptSibling\x12,\n" +
	"\x12taproot_output_key\x18\t \x01(\fR\x10taprootOutputKey\x12,\n" +
	"\x12proof_courier_addr\x18\n" +
	" \x01(\tR\x10proofCourierAddr\x129\n" +
	"\rasset_version\x18\v \x01(\x0e2\x14.taprpc.AssetVersionR\fassetVersion\x12<\n" +
	"\x0faddress_version\x18\f \x01(\x0e2\x13.taprpc.AddrVersionR\x0eaddressVersion\"\x8c\x01\n" +
	"\x10QueryAddrRequest\x12#\n" +
	"\rcreated_after\x18\x01 \x01(\x03R\fcreatedAfter\x12%\n" +
	"\x0ecreated_before\x18\x02 \x01(\x03R\rcreatedBefore\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x05R\x06offset\"7\n" +
	"\x11QueryAddrResponse\x12\"\n" +
	"\x05addrs\x18\x01 \x03(\v2\f.taprpc.AddrR\x05addrs\"\xfd\x02\n" +
	"\x0eNewAddrRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12\x10\n" +
	"\x03amt\x18\x02 \x01(\x04R\x03amt\x120\n" +
	"\n" +
	"script_key\x18\x03 \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\x128\n" +
	"\finternal_key\x18\x04 \x01(\v2\x15.taprpc.KeyDescriptorR\vinternalKey\x12+\n" +
	"\x11tapscript_sibling\x18\x05 \x01(\fR\x10tapscriptSibling\x12,\n" +
	"\x12proof_courier_addr\x18\x06 \x01(\tR\x10proofCourierAddr\x129\n" +
	"\rasset_version\x18\a \x01(\x0e2\x14.taprpc.AssetVersionR\fassetVersion\x12<\n" +
	"\x0faddress_version\x18\b \x01(\x0e2\x13.taprpc.AddrVersionR\x0eaddressVersion\"y\n" +
	"\x12ScriptKeyTypeQuery\x12<\n" +
	"\rexplicit_type\x18\x01 \x01(\x0e2\x15.taprpc.ScriptKeyTypeH\x00R\fexplicitType\x12\x1d\n" +
	"\tall_types\x18\x02 \x01(\bH\x00R\ballTypesB\x06\n" +
	"\x04type\"\x9e\x01\n" +
	"\tScriptKey\x12\x17\n" +
	"\apub_key\x18\x01 \x01(\fR\x06pubKey\x120\n" +
	"\bkey_desc\x18\x02 \x01(\v2\x15.taprpc.KeyDescriptorR\akeyDesc\x12\x1b\n" +
	"\ttap_tweak\x18\x03 \x01(\fR\btapTweak\x12)\n" +
	"\x04type\x18\x04 \x01(\x0e2\x15.taprpc.ScriptKeyTypeR\x04type\"H\n" +
	"\n" +
	"KeyLocator\x12\x1d\n" +
	"\n" +
	"key_family\x18\x01 \x01(\x05R\tkeyFamily\x12\x1b\n" +
	"\tkey_index\x18\x02 \x01(\x05R\bkeyIndex\"`\n" +
	"\rKeyDescriptor\x12\"\n" +
	"\rraw_key_bytes\x18\x01 \x01(\fR\vrawKeyBytes\x12+\n" +
	"\akey_loc\x18\x02 \x01(\v2\x12.taprpc.KeyLocatorR\x06keyLoc\"C\n" +
	"\x11TapscriptFullTree\x12.\n" +
	"\n" +
	"all_leaves\x18\x01 \x03(\v2\x0f.taprpc.TapLeafR\tallLeaves\"!\n" +
	"\aTapLeaf\x12\x16\n" +
	"\x06script\x18\x02 \x01(\fR\x06script\"S\n" +
	"\tTapBranch\x12!\n" +
	"\fleft_taphash\x18\x01 \x01(\fR\vleftTaphash\x12#\n" +
	"\rright_taphash\x18\x02 \x01(\fR\frightTaphash\"'\n" +
	"\x11DecodeAddrRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\"V\n" +
	"\tProofFile\x12$\n" +
	"\x0eraw_proof_file\x18\x01 \x01(\fR\frawProofFile\x12#\n" +
	"\rgenesis_point\x18\x02 \x01(\tR\fgenesisPoint\"\xf6\x04\n" +
	"\fDecodedProof\x12$\n" +
	"\x0eproof_at_depth\x18\x01 \x01(\rR\fproofAtDepth\x12(\n" +
	"\x10number_of_proofs\x18\x02 \x01(\rR\x0enumberOfProofs\x12#\n" +
	"\x05asset\x18\x03 \x01(\v2\r.taprpc.AssetR\x05asset\x122\n" +
	"\vmeta_reveal\x18\x04 \x01(\v2\x11.taprpc.AssetMetaR\n" +
	"metaReveal\x12&\n" +
	"\x0ftx_merkle_proof\x18\x05 \x01(\fR\rtxMerkleProof\x12'\n" +
	"\x0finclusion_proof\x18\x06 \x01(\fR\x0einclusionProof\x12)\n" +
	"\x10exclusion_proofs\x18\a \x03(\fR\x0fexclusionProofs\x12(\n" +
	"\x10split_root_proof\x18\b \x01(\fR\x0esplitRootProof\x122\n" +
	"\x15num_additional_inputs\x18\t \x01(\rR\x13numAdditionalInputs\x12+\n" +
	"\x11challenge_witness\x18\n" +
	" \x03(\fR\x10challengeWitness\x12\x17\n" +
	"\ais_burn\x18\v \x01(\bR\x06isBurn\x12<\n" +
	"\x0egenesis_reveal\x18\f \x01(\v2\x15.taprpc.GenesisRevealR\rgenesisReveal\x12@\n" +
	"\x10group_key_reveal\x18\r \x01(\v2\x16.taprpc.GroupKeyRevealR\x0egroupKeyReveal\x12\x1d\n" +
	"\n" +
	"alt_leaves\x18\x0e \x01(\fR\taltLeaves\"f\n" +
	"\x13VerifyProofResponse\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x129\n" +
	"\rdecoded_proof\x18\x02 \x01(\v2\x14.taprpc.DecodedProofR\fdecodedProof\"\xb1\x01\n" +
	"\x12DecodeProofRequest\x12\x1b\n" +
	"\traw_proof\x18\x01 \x01(\fR\brawProof\x12$\n" +
	"\x0eproof_at_depth\x18\x02 \x01(\rR\fproofAtDepth\x12.\n" +
	"\x13with_prev_witnesses\x18\x03 \x01(\bR\x11withPrevWitnesses\x12(\n" +
	"\x10with_meta_reveal\x18\x04 \x01(\bR\x0ewithMetaReveal\"P\n" +
	"\x13DecodeProofResponse\x129\n" +
	"\rdecoded_proof\x18\x01 \x01(\v2\x14.taprpc.DecodedProofR\fdecodedProof\"|\n" +
	"\x12ExportProofRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12\x1d\n" +
	"\n" +
	"script_key\x18\x02 \x01(\fR\tscriptKey\x12,\n" +
	"\boutpoint\x18\x03 \x01(\v2\x10.taprpc.OutPointR\boutpoint\">\n" +
	"\x16UnpackProofFileRequest\x12$\n" +
	"\x0eraw_proof_file\x18\x01 \x01(\fR\frawProofFile\"8\n" +
	"\x17UnpackProofFileResponse\x12\x1d\n" +
	"\n" +
	"raw_proofs\x18\x01 \x03(\fR\trawProofs\"\xd0\x02\n" +
	"\tAddrEvent\x12;\n" +
	"\x1acreation_time_unix_seconds\x18\x01 \x01(\x04R\x17creationTimeUnixSeconds\x12 \n" +
	"\x04addr\x18\x02 \x01(\v2\f.taprpc.AddrR\x04addr\x12/\n" +
	"\x06status\x18\x03 \x01(\x0e2\x17.taprpc.AddrEventStatusR\x06status\x12\x1a\n" +
	"\boutpoint\x18\x04 \x01(\tR\boutpoint\x12 \n" +
	"\futxo_amt_sat\x18\x05 \x01(\x04R\n" +
	"utxoAmtSat\x12'\n" +
	"\x0ftaproot_sibling\x18\x06 \x01(\fR\x0etaprootSibling\x12/\n" +
	"\x13confirmation_height\x18\a \x01(\rR\x12confirmationHeight\x12\x1b\n" +
	"\thas_proof\x18\b \x01(\bR\bhasProof\"t\n" +
	"\x13AddrReceivesRequest\x12\x1f\n" +
	"\vfilter_addr\x18\x01 \x01(\tR\n" +
	"filterAddr\x12<\n" +
	"\rfilter_status\x18\x02 \x01(\x0e2\x17.taprpc.AddrEventStatusR\ffilterStatus\"A\n" +
	"\x14AddrReceivesResponse\x12)\n" +
	"\x06events\x18\x01 \x03(\v2\x11.taprpc.AddrEventR\x06events\"\xa2\x01\n" +
	"\x10SendAssetRequest\x12\x1b\n" +
	"\ttap_addrs\x18\x01 \x03(\tR\btapAddrs\x12\x19\n" +
	"\bfee_rate\x18\x02 \x01(\rR\afeeRate\x12\x14\n" +
	"\x05label\x18\x03 \x01(\tR\x05label\x12@\n" +
	"\x1dskip_proof_courier_ping_check\x18\x04 \x01(\bR\x19skipProofCourierPingCheck\"\x85\x01\n" +
	"\x0ePrevInputAsset\x12!\n" +
	"\fanchor_point\x18\x01 \x01(\tR\vanchorPoint\x12\x19\n" +
	"\basset_id\x18\x02 \x01(\fR\aassetId\x12\x1d\n" +
	"\n" +
	"script_key\x18\x03 \x01(\fR\tscriptKey\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\"F\n" +
	"\x11SendAssetResponse\x121\n" +
	"\btransfer\x18\x01 \x01(\v2\x15.taprpc.AssetTransferR\btransfer\"\x10\n" +
	"\x0eGetInfoRequest\"\x9b\x02\n" +
	"\x0fGetInfoResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1f\n" +
	"\vlnd_version\x18\x02 \x01(\tR\n" +
	"lndVersion\x12\x18\n" +
	"\anetwork\x18\x03 \x01(\tR\anetwork\x12.\n" +
	"\x13lnd_identity_pubkey\x18\x04 \x01(\tR\x11lndIdentityPubkey\x12\x1d\n" +
	"\n" +
	"node_alias\x18\x05 \x01(\tR\tnodeAlias\x12!\n" +
	"\fblock_height\x18\x06 \x01(\rR\vblockHeight\x12\x1d\n" +
	"\n" +
	"block_hash\x18\a \x01(\tR\tblockHash\x12\"\n" +
	"\rsync_to_chain\x18\b \x01(\bR\vsyncToChain\"\xeb\x01\n" +
	"\x15FetchAssetMetaRequest\x12\x1b\n" +
	"\basset_id\x18\x01 \x01(\fH\x00R\aassetId\x12\x1d\n" +
	"\tmeta_hash\x18\x02 \x01(\fH\x00R\bmetaHash\x12\"\n" +
	"\fasset_id_str\x18\x03 \x01(\tH\x00R\n" +
	"assetIdStr\x12$\n" +
	"\rmeta_hash_str\x18\x04 \x01(\tH\x00R\vmetaHashStr\x12\x1d\n" +
	"\tgroup_key\x18\x05 \x01(\fH\x00R\bgroupKey\x12$\n" +
	"\rgroup_key_str\x18\x06 \x01(\tH\x00R\vgroupKeyStrB\a\n" +
	"\x05asset\"u\n" +
	"\x16FetchAssetMetaResponse\x122\n" +
	"\vasset_metas\x18\x01 \x03(\v2\x11.taprpc.AssetMetaR\n" +
	"assetMetas\x12'\n" +
	"\x0fdecimal_display\x18\x02 \x01(\x05R\x0edecimalDisplay\"\xc3\x01\n" +
	"\x10BurnAssetRequest\x12\x1b\n" +
	"\basset_id\x18\x01 \x01(\fH\x00R\aassetId\x12\"\n" +
	"\fasset_id_str\x18\x02 \x01(\tH\x00R\n" +
	"assetIdStr\x12$\n" +
	"\x0eamount_to_burn\x18\x03 \x01(\x04R\famountToBurn\x12+\n" +
	"\x11confirmation_text\x18\x04 \x01(\tR\x10confirmationText\x12\x12\n" +
	"\x04note\x18\x05 \x01(\tR\x04noteB\a\n" +
	"\x05asset\"\x84\x01\n" +
	"\x11BurnAssetResponse\x12:\n" +
	"\rburn_transfer\x18\x01 \x01(\v2\x15.taprpc.AssetTransferR\fburnTransfer\x123\n" +
	"\n" +
	"burn_proof\x18\x02 \x01(\v2\x14.taprpc.DecodedProofR\tburnProof\"z\n" +
	"\x10ListBurnsRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12*\n" +
	"\x11tweaked_group_key\x18\x03 \x01(\fR\x0ftweakedGroupKey\x12\x1f\n" +
	"\vanchor_txid\x18\x04 \x01(\fR\n" +
	"anchorTxid\"\x9f\x01\n" +
	"\tAssetBurn\x12\x12\n" +
	"\x04note\x18\x01 \x01(\tR\x04note\x12\x19\n" +
	"\basset_id\x18\x02 \x01(\fR\aassetId\x12*\n" +
	"\x11tweaked_group_key\x18\x03 \x01(\fR\x0ftweakedGroupKey\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x04R\x06amount\x12\x1f\n" +
	"\vanchor_txid\x18\x05 \x01(\fR\n" +
	"anchorTxid\"<\n" +
	"\x11ListBurnsResponse\x12'\n" +
	"\x05burns\x18\x01 \x03(\v2\x11.taprpc.AssetBurnR\x05burns\"A\n" +
	"\bOutPoint\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\fR\x04txid\x12!\n" +
	"\foutput_index\x18\x02 \x01(\rR\voutputIndex\"i\n" +
	"\x1dSubscribeReceiveEventsRequest\x12\x1f\n" +
	"\vfilter_addr\x18\x01 \x01(\tR\n" +
	"filterAddr\x12'\n" +
	"\x0fstart_timestamp\x18\x02 \x01(\x03R\x0estartTimestamp\"\xe8\x01\n" +
	"\fReceiveEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12&\n" +
	"\aaddress\x18\x02 \x01(\v2\f.taprpc.AddrR\aaddress\x12\x1a\n" +
	"\boutpoint\x18\x03 \x01(\tR\boutpoint\x12/\n" +
	"\x06status\x18\x04 \x01(\x0e2\x17.taprpc.AddrEventStatusR\x06status\x12/\n" +
	"\x13confirmation_height\x18\x05 \x01(\rR\x12confirmationHeight\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error\"k\n" +
	"\x1aSubscribeSendEventsRequest\x12*\n" +
	"\x11filter_script_key\x18\x01 \x01(\fR\x0ffilterScriptKey\x12!\n" +
	"\ffilter_label\x18\x02 \x01(\tR\vfilterLabel\"\xec\x03\n" +
	"\tSendEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"send_state\x18\x02 \x01(\tR\tsendState\x123\n" +
	"\vparcel_type\x18\x03 \x01(\x0e2\x12.taprpc.ParcelTypeR\n" +
	"parcelType\x12*\n" +
	"\taddresses\x18\x04 \x03(\v2\f.taprpc.AddrR\taddresses\x12'\n" +
	"\x0fvirtual_packets\x18\x05 \x03(\fR\x0evirtualPackets\x126\n" +
	"\x17passive_virtual_packets\x18\x06 \x03(\fR\x15passiveVirtualPackets\x12H\n" +
	"\x12anchor_transaction\x18\a \x01(\v2\x19.taprpc.AnchorTransactionR\x11anchorTransaction\x121\n" +
	"\btransfer\x18\b \x01(\v2\x15.taprpc.AssetTransferR\btransfer\x12\x14\n" +
	"\x05error\x18\t \x01(\tR\x05error\x12%\n" +
	"\x0etransfer_label\x18\n" +
	" \x01(\tR\rtransferLabel\x12&\n" +
	"\x0fnext_send_state\x18\v \x01(\tR\rnextSendState\"\x97\x02\n" +
	"\x11AnchorTransaction\x12\x1f\n" +
	"\vanchor_psbt\x18\x01 \x01(\fR\n" +
	"anchorPsbt\x12.\n" +
	"\x13change_output_index\x18\x02 \x01(\x05R\x11changeOutputIndex\x12&\n" +
	"\x0fchain_fees_sats\x18\x03 \x01(\x03R\rchainFeesSats\x122\n" +
	"\x16target_fee_rate_sat_kw\x18\x04 \x01(\x05R\x12targetFeeRateSatKw\x12:\n" +
	"\x10lnd_locked_utxos\x18\x05 \x03(\v2\x10.taprpc.OutPointR\x0elndLockedUtxos\x12\x19\n" +
	"\bfinal_tx\x18\x06 \x01(\fR\afinalTx\"\x9e\x01\n" +
	"\x17RegisterTransferRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12\x1b\n" +
	"\tgroup_key\x18\x02 \x01(\fR\bgroupKey\x12\x1d\n" +
	"\n" +
	"script_key\x18\x03 \x01(\fR\tscriptKey\x12,\n" +
	"\boutpoint\x18\x04 \x01(\v2\x10.taprpc.OutPointR\boutpoint\"T\n" +
	"\x18RegisterTransferResponse\x128\n" +
	"\x10registered_asset\x18\x01 \x01(\v2\r.taprpc.AssetR\x0fregisteredAsset*(\n" +
	"\tAssetType\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\x0f\n" +
	"\vCOLLECTIBLE\x10\x01*9\n" +
	"\rAssetMetaType\x12\x14\n" +
	"\x10META_TYPE_OPAQUE\x10\x00\x12\x12\n" +
	"\x0eMETA_TYPE_JSON\x10\x01*:\n" +
	"\fAssetVersion\x12\x14\n" +
	"\x10ASSET_VERSION_V0\x10\x00\x12\x14\n" +
	"\x10ASSET_VERSION_V1\x10\x01*R\n" +
	"\n" +
	"OutputType\x12\x16\n" +
	"\x12OUTPUT_TYPE_SIMPLE\x10\x00\x12\x1a\n" +
	"\x16OUTPUT_TYPE_SPLIT_ROOT\x10\x01\"\x04\b\x02\x10\x02\"\x04\b\x03\x10\x03\"\x04\b\x04\x10\x04*\x86\x01\n" +
	"\x13ProofDeliveryStatus\x12(\n" +
	"$PROOF_DELIVERY_STATUS_NOT_APPLICABLE\x10\x00\x12\"\n" +
	"\x1ePROOF_DELIVERY_STATUS_COMPLETE\x10\x01\x12!\n" +
	"\x1dPROOF_DELIVERY_STATUS_PENDING\x10\x02*U\n" +
	"\vAddrVersion\x12\x1c\n" +
	"\x18ADDR_VERSION_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fADDR_VERSION_V0\x10\x01\x12\x13\n" +
	"\x0fADDR_VERSION_V1\x10\x02*\xa9\x01\n" +
	"\rScriptKeyType\x12\x16\n" +
	"\x12SCRIPT_KEY_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10SCRIPT_KEY_BIP86\x10\x01\x12#\n" +
	"\x1fSCRIPT_KEY_SCRIPT_PATH_EXTERNAL\x10\x02\x12\x13\n" +
	"\x0fSCRIPT_KEY_BURN\x10\x03\x12\x18\n" +
	"\x14SCRIPT_KEY_TOMBSTONE\x10\x04\x12\x16\n" +
	"\x12SCRIPT_KEY_CHANNEL\x10\x05*\xd0\x01\n" +
	"\x0fAddrEventStatus\x12\x1d\n" +
	"\x19ADDR_EVENT_STATUS_UNKNOWN\x10\x00\x12*\n" +
	"&ADDR_EVENT_STATUS_TRANSACTION_DETECTED\x10\x01\x12+\n" +
	"'ADDR_EVENT_STATUS_TRANSACTION_CONFIRMED\x10\x02\x12$\n" +
	" ADDR_EVENT_STATUS_PROOF_RECEIVED\x10\x03\x12\x1f\n" +
	"\x1bADDR_EVENT_STATUS_COMPLETED\x10\x04*\x9b\x02\n" +
	"\tSendState\x12#\n" +
	"\x1fSEND_STATE_VIRTUAL_INPUT_SELECT\x10\x00\x12\x1b\n" +
	"\x17SEND_STATE_VIRTUAL_SIGN\x10\x01\x12\x1a\n" +
	"\x16SEND_STATE_ANCHOR_SIGN\x10\x02\x12\x1d\n" +
	"\x19SEND_STATE_LOG_COMMITMENT\x10\x03\x12\x18\n" +
	"\x14SEND_STATE_BROADCAST\x10\x04\x12 \n" +
	"\x1cSEND_STATE_WAIT_CONFIRMATION\x10\x05\x12\x1b\n" +
	"\x17SEND_STATE_STORE_PROOFS\x10\x06\x12\x1e\n" +
	"\x1aSEND_STATE_TRANSFER_PROOFS\x10\a\x12\x18\n" +
	"\x14SEND_STATE_COMPLETED\x10\b*x\n" +
	"\n" +
	"ParcelType\x12\x17\n" +
	"\x13PARCEL_TYPE_ADDRESS\x10\x00\x12\x1a\n" +
	"\x16PARCEL_TYPE_PRE_SIGNED\x10\x01\x12\x17\n" +
	"\x13PARCEL_TYPE_PENDING\x10\x02\x12\x1c\n" +
	"\x18PARCEL_TYPE_PRE_ANCHORED\x10\x032\xd2\f\n" +
	"\rTaprootAssets\x12A\n" +
	"\n" +
	"ListAssets\x12\x18.taprpc.ListAssetRequest\x1a\x19.taprpc.ListAssetResponse\x12@\n" +
	"\tListUtxos\x12\x18.taprpc.ListUtxosRequest\x1a\x19.taprpc.ListUtxosResponse\x12C\n" +
	"\n" +
	"ListGroups\x12\x19.taprpc.ListGroupsRequest\x1a\x1a.taprpc.ListGroupsResponse\x12I\n" +
	"\fListBalances\x12\x1b.taprpc.ListBalancesRequest\x1a\x1c.taprpc.ListBalancesResponse\x12L\n" +
	"\rListTransfers\x12\x1c.taprpc.ListTransfersRequest\x1a\x1d.taprpc.ListTransfersResponse\x127\n" +
	"\n" +
	"StopDaemon\x12\x13.taprpc.StopRequest\x1a\x14.taprpc.StopResponse\x12C\n" +
	"\n" +
	"DebugLevel\x12\x19.taprpc.DebugLevelRequest\x1a\x1a.taprpc.DebugLevelResponse\x12A\n" +
	"\n" +
	"QueryAddrs\x12\x18.taprpc.QueryAddrRequest\x1a\x19.taprpc.QueryAddrResponse\x12/\n" +
	"\aNewAddr\x12\x16.taprpc.NewAddrRequest\x1a\f.taprpc.Addr\x125\n" +
	"\n" +
	"DecodeAddr\x12\x19.taprpc.DecodeAddrRequest\x1a\f.taprpc.Addr\x12I\n" +
	"\fAddrReceives\x12\x1b.taprpc.AddrReceivesRequest\x1a\x1c.taprpc.AddrReceivesResponse\x12=\n" +
	"\vVerifyProof\x12\x11.taprpc.ProofFile\x1a\x1b.taprpc.VerifyProofResponse\x12F\n" +
	"\vDecodeProof\x12\x1a.taprpc.DecodeProofRequest\x1a\x1b.taprpc.DecodeProofResponse\x12<\n" +
	"\vExportProof\x12\x1a.taprpc.ExportProofRequest\x1a\x11.taprpc.ProofFile\x12R\n" +
	"\x0fUnpackProofFile\x12\x1e.taprpc.UnpackProofFileRequest\x1a\x1f.taprpc.UnpackProofFileResponse\x12@\n" +
	"\tSendAsset\x12\x18.taprpc.SendAssetRequest\x1a\x19.taprpc.SendAssetResponse\x12@\n" +
	"\tBurnAsset\x12\x18.taprpc.BurnAssetRequest\x1a\x19.taprpc.BurnAssetResponse\x12@\n" +
	"\tListBurns\x12\x18.taprpc.ListBurnsRequest\x1a\x19.taprpc.ListBurnsResponse\x12:\n" +
	"\aGetInfo\x12\x16.taprpc.GetInfoRequest\x1a\x17.taprpc.GetInfoResponse\x12O\n" +
	"\x0eFetchAssetMeta\x12\x1d.taprpc.FetchAssetMetaRequest\x1a\x1e.taprpc.FetchAssetMetaResponse\x12W\n" +
	"\x16SubscribeReceiveEvents\x12%.taprpc.SubscribeReceiveEventsRequest\x1a\x14.taprpc.ReceiveEvent0\x01\x12N\n" +
	"\x13SubscribeSendEvents\x12\".taprpc.SubscribeSendEventsRequest\x1a\x11.taprpc.SendEvent0\x01\x12U\n" +
	"\x10RegisterTransfer\x12\x1f.taprpc.RegisterTransferRequest\x1a .taprpc.RegisterTransferResponseB0Z.github.com/lightninglabs/taproot-assets/taprpcb\x06proto3"

var (
	file_taprootassets_proto_rawDescOnce sync.Once
	file_taprootassets_proto_rawDescData []byte
)

func file_taprootassets_proto_rawDescGZIP() []byte {
	file_taprootassets_proto_rawDescOnce.Do(func() {
		file_taprootassets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_taprootassets_proto_rawDesc), len(file_taprootassets_proto_rawDesc)))
	})
	return file_taprootassets_proto_rawDescData
}

var file_taprootassets_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_taprootassets_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_taprootassets_proto_goTypes = []any{
	(AssetType)(0),                        // 0: taprpc.AssetType
	(AssetMetaType)(0),                    // 1: taprpc.AssetMetaType
	(AssetVersion)(0),                     // 2: taprpc.AssetVersion
	(OutputType)(0),                       // 3: taprpc.OutputType
	(ProofDeliveryStatus)(0),              // 4: taprpc.ProofDeliveryStatus
	(AddrVersion)(0),                      // 5: taprpc.AddrVersion
	(ScriptKeyType)(0),                    // 6: taprpc.ScriptKeyType
	(AddrEventStatus)(0),                  // 7: taprpc.AddrEventStatus
	(SendState)(0),                        // 8: taprpc.SendState
	(ParcelType)(0),                       // 9: taprpc.ParcelType
	(*AssetMeta)(nil),                     // 10: taprpc.AssetMeta
	(*ListAssetRequest)(nil),              // 11: taprpc.ListAssetRequest
	(*AnchorInfo)(nil),                    // 12: taprpc.AnchorInfo
	(*GenesisInfo)(nil),                   // 13: taprpc.GenesisInfo
	(*ExternalKey)(nil),                   // 14: taprpc.ExternalKey
	(*GroupKeyRequest)(nil),               // 15: taprpc.GroupKeyRequest
	(*TxOut)(nil),                         // 16: taprpc.TxOut
	(*GroupVirtualTx)(nil),                // 17: taprpc.GroupVirtualTx
	(*GroupWitness)(nil),                  // 18: taprpc.GroupWitness
	(*AssetGroup)(nil),                    // 19: taprpc.AssetGroup
	(*GroupKeyReveal)(nil),                // 20: taprpc.GroupKeyReveal
	(*GenesisReveal)(nil),                 // 21: taprpc.GenesisReveal
	(*DecimalDisplay)(nil),                // 22: taprpc.DecimalDisplay
	(*Asset)(nil),                         // 23: taprpc.Asset
	(*PrevWitness)(nil),                   // 24: taprpc.PrevWitness
	(*SplitCommitment)(nil),               // 25: taprpc.SplitCommitment
	(*ListAssetResponse)(nil),             // 26: taprpc.ListAssetResponse
	(*ListUtxosRequest)(nil),              // 27: taprpc.ListUtxosRequest
	(*ManagedUtxo)(nil),                   // 28: taprpc.ManagedUtxo
	(*ListUtxosResponse)(nil),             // 29: taprpc.ListUtxosResponse
	(*ListGroupsRequest)(nil),             // 30: taprpc.ListGroupsRequest
	(*AssetHumanReadable)(nil),            // 31: taprpc.AssetHumanReadable
	(*GroupedAssets)(nil),                 // 32: taprpc.GroupedAssets
	(*ListGroupsResponse)(nil),            // 33: taprpc.ListGroupsResponse
	(*ListBalancesRequest)(nil),           // 34: taprpc.ListBalancesRequest
	(*AssetBalance)(nil),                  // 35: taprpc.AssetBalance
	(*AssetGroupBalance)(nil),             // 36: taprpc.AssetGroupBalance
	(*ListBalancesResponse)(nil),          // 37: taprpc.ListBalancesResponse
	(*ListTransfersRequest)(nil),          // 38: taprpc.ListTransfersRequest
	(*ListTransfersResponse)(nil),         // 39: taprpc.ListTransfersResponse
	(*ChainHash)(nil),                     // 40: taprpc.ChainHash
	(*AssetTransfer)(nil),                 // 41: taprpc.AssetTransfer
	(*TransferInput)(nil),                 // 42: taprpc.TransferInput
	(*TransferOutputAnchor)(nil),          // 43: taprpc.TransferOutputAnchor
	(*TransferOutput)(nil),                // 44: taprpc.TransferOutput
	(*StopRequest)(nil),                   // 45: taprpc.StopRequest
	(*StopResponse)(nil),                  // 46: taprpc.StopResponse
	(*DebugLevelRequest)(nil),             // 47: taprpc.DebugLevelRequest
	(*DebugLevelResponse)(nil),            // 48: taprpc.DebugLevelResponse
	(*Addr)(nil),                          // 49: taprpc.Addr
	(*QueryAddrRequest)(nil),              // 50: taprpc.QueryAddrRequest
	(*QueryAddrResponse)(nil),             // 51: taprpc.QueryAddrResponse
	(*NewAddrRequest)(nil),                // 52: taprpc.NewAddrRequest
	(*ScriptKeyTypeQuery)(nil),            // 53: taprpc.ScriptKeyTypeQuery
	(*ScriptKey)(nil),                     // 54: taprpc.ScriptKey
	(*KeyLocator)(nil),                    // 55: taprpc.KeyLocator
	(*KeyDescriptor)(nil),                 // 56: taprpc.KeyDescriptor
	(*TapscriptFullTree)(nil),             // 57: taprpc.TapscriptFullTree
	(*TapLeaf)(nil),                       // 58: taprpc.TapLeaf
	(*TapBranch)(nil),                     // 59: taprpc.TapBranch
	(*DecodeAddrRequest)(nil),             // 60: taprpc.DecodeAddrRequest
	(*ProofFile)(nil),                     // 61: taprpc.ProofFile
	(*DecodedProof)(nil),                  // 62: taprpc.DecodedProof
	(*VerifyProofResponse)(nil),           // 63: taprpc.VerifyProofResponse
	(*DecodeProofRequest)(nil),            // 64: taprpc.DecodeProofRequest
	(*DecodeProofResponse)(nil),           // 65: taprpc.DecodeProofResponse
	(*ExportProofRequest)(nil),            // 66: taprpc.ExportProofRequest
	(*UnpackProofFileRequest)(nil),        // 67: taprpc.UnpackProofFileRequest
	(*UnpackProofFileResponse)(nil),       // 68: taprpc.UnpackProofFileResponse
	(*AddrEvent)(nil),                     // 69: taprpc.AddrEvent
	(*AddrReceivesRequest)(nil),           // 70: taprpc.AddrReceivesRequest
	(*AddrReceivesResponse)(nil),          // 71: taprpc.AddrReceivesResponse
	(*SendAssetRequest)(nil),              // 72: taprpc.SendAssetRequest
	(*PrevInputAsset)(nil),                // 73: taprpc.PrevInputAsset
	(*SendAssetResponse)(nil),             // 74: taprpc.SendAssetResponse
	(*GetInfoRequest)(nil),                // 75: taprpc.GetInfoRequest
	(*GetInfoResponse)(nil),               // 76: taprpc.GetInfoResponse
	(*FetchAssetMetaRequest)(nil),         // 77: taprpc.FetchAssetMetaRequest
	(*FetchAssetMetaResponse)(nil),        // 78: taprpc.FetchAssetMetaResponse
	(*BurnAssetRequest)(nil),              // 79: taprpc.BurnAssetRequest
	(*BurnAssetResponse)(nil),             // 80: taprpc.BurnAssetResponse
	(*ListBurnsRequest)(nil),              // 81: taprpc.ListBurnsRequest
	(*AssetBurn)(nil),                     // 82: taprpc.AssetBurn
	(*ListBurnsResponse)(nil),             // 83: taprpc.ListBurnsResponse
	(*OutPoint)(nil),                      // 84: taprpc.OutPoint
	(*SubscribeReceiveEventsRequest)(nil), // 85: taprpc.SubscribeReceiveEventsRequest
	(*ReceiveEvent)(nil),                  // 86: taprpc.ReceiveEvent
	(*SubscribeSendEventsRequest)(nil),    // 87: taprpc.SubscribeSendEventsRequest
	(*SendEvent)(nil),                     // 88: taprpc.SendEvent
	(*AnchorTransaction)(nil),             // 89: taprpc.AnchorTransaction
	(*RegisterTransferRequest)(nil),       // 90: taprpc.RegisterTransferRequest
	(*RegisterTransferResponse)(nil),      // 91: taprpc.RegisterTransferResponse
	nil,                                   // 92: taprpc.ListUtxosResponse.ManagedUtxosEntry
	nil,                                   // 93: taprpc.ListGroupsResponse.GroupsEntry
	nil,                                   // 94: taprpc.ListBalancesResponse.AssetBalancesEntry
	nil,                                   // 95: taprpc.ListBalancesResponse.AssetGroupBalancesEntry
}
var file_taprootassets_proto_depIdxs = []int32{
	1,   // 0: taprpc.AssetMeta.type:type_name -> taprpc.AssetMetaType
	54,  // 1: taprpc.ListAssetRequest.script_key:type_name -> taprpc.ScriptKey
	84,  // 2: taprpc.ListAssetRequest.anchor_outpoint:type_name -> taprpc.OutPoint
	53,  // 3: taprpc.ListAssetRequest.script_key_type:type_name -> taprpc.ScriptKeyTypeQuery
	0,   // 4: taprpc.GenesisInfo.asset_type:type_name -> taprpc.AssetType
	56,  // 5: taprpc.GroupKeyRequest.raw_key:type_name -> taprpc.KeyDescriptor
	13,  // 6: taprpc.GroupKeyRequest.anchor_genesis:type_name -> taprpc.GenesisInfo
	14,  // 7: taprpc.GroupKeyRequest.external_key:type_name -> taprpc.ExternalKey
	16,  // 8: taprpc.GroupVirtualTx.prev_out:type_name -> taprpc.TxOut
	13,  // 9: taprpc.GenesisReveal.genesis_base_reveal:type_name -> taprpc.GenesisInfo
	2,   // 10: taprpc.Asset.version:type_name -> taprpc.AssetVersion
	13,  // 11: taprpc.Asset.asset_genesis:type_name -> taprpc.GenesisInfo
	19,  // 12: taprpc.Asset.asset_group:type_name -> taprpc.AssetGroup
	12,  // 13: taprpc.Asset.chain_anchor:type_name -> taprpc.AnchorInfo
	24,  // 14: taprpc.Asset.prev_witnesses:type_name -> taprpc.PrevWitness
	22,  // 15: taprpc.Asset.decimal_display:type_name -> taprpc.DecimalDisplay
	6,   // 16: taprpc.Asset.script_key_type:type_name -> taprpc.ScriptKeyType
	73,  // 17: taprpc.PrevWitness.prev_id:type_name -> taprpc.PrevInputAsset
	25,  // 18: taprpc.PrevWitness.split_commitment:type_name -> taprpc.SplitCommitment
	23,  // 19: taprpc.SplitCommitment.root_asset:type_name -> taprpc.Asset
	23,  // 20: taprpc.ListAssetResponse.assets:type_name -> taprpc.Asset
	53,  // 21: taprpc.ListUtxosRequest.script_key_type:type_name -> taprpc.ScriptKeyTypeQuery
	23,  // 22: taprpc.ManagedUtxo.assets:type_name -> taprpc.Asset
	92,  // 23: taprpc.ListUtxosResponse.managed_utxos:type_name -> taprpc.ListUtxosResponse.ManagedUtxosEntry
	0,   // 24: taprpc.AssetHumanReadable.type:type_name -> taprpc.AssetType
	2,   // 25: taprpc.AssetHumanReadable.version:type_name -> taprpc.AssetVersion
	31,  // 26: taprpc.GroupedAssets.assets:type_name -> taprpc.AssetHumanReadable
	93,  // 27: taprpc.ListGroupsResponse.groups:type_name -> taprpc.ListGroupsResponse.GroupsEntry
	53,  // 28: taprpc.ListBalancesRequest.script_key_type:type_name -> taprpc.ScriptKeyTypeQuery
	13,  // 29: taprpc.AssetBalance.asset_genesis:type_name -> taprpc.GenesisInfo
	94,  // 30: taprpc.ListBalancesResponse.asset_balances:type_name -> taprpc.ListBalancesResponse.AssetBalancesEntry
	95,  // 31: taprpc.ListBalancesResponse.asset_group_balances:type_name -> taprpc.ListBalancesResponse.AssetGroupBalancesEntry
	41,  // 32: taprpc.ListTransfersResponse.transfers:type_name -> taprpc.AssetTransfer
	42,  // 33: taprpc.AssetTransfer.inputs:type_name -> taprpc.TransferInput
	44,  // 34: taprpc.AssetTransfer.outputs:type_name -> taprpc.TransferOutput
	40,  // 35: taprpc.AssetTransfer.anchor_tx_block_hash:type_name -> taprpc.ChainHash
	43,  // 36: taprpc.TransferOutput.anchor:type_name -> taprpc.TransferOutputAnchor
	3,   // 37: taprpc.TransferOutput.output_type:type_name -> taprpc.OutputType
	2,   // 38: taprpc.TransferOutput.asset_version:type_name -> taprpc.AssetVersion
	4,   // 39: taprpc.TransferOutput.proof_delivery_status:type_name -> taprpc.ProofDeliveryStatus
	0,   // 40: taprpc.Addr.asset_type:type_name -> taprpc.AssetType
	2,   // 41: taprpc.Addr.asset_version:type_name -> taprpc.AssetVersion
	5,   // 42: taprpc.Addr.address_version:type_name -> taprpc.AddrVersion
	49,  // 43: taprpc.QueryAddrResponse.addrs:type_name -> taprpc.Addr
	54,  // 44: taprpc.NewAddrRequest.script_key:type_name -> taprpc.ScriptKey
	56,  // 45: taprpc.NewAddrRequest.internal_key:type_name -> taprpc.KeyDescriptor
	2,   // 46: taprpc.NewAddrRequest.asset_version:type_name -> taprpc.AssetVersion
	5,   // 47: taprpc.NewAddrRequest.address_version:type_name -> taprpc.AddrVersion
	6,   // 48: taprpc.ScriptKeyTypeQuery.explicit_type:type_name -> taprpc.ScriptKeyType
	56,  // 49: taprpc.ScriptKey.key_desc:type_name -> taprpc.KeyDescriptor
	6,   // 50: taprpc.ScriptKey.type:type_name -> taprpc.ScriptKeyType
	55,  // 51: taprpc.KeyDescriptor.key_loc:type_name -> taprpc.KeyLocator
	58,  // 52: taprpc.TapscriptFullTree.all_leaves:type_name -> taprpc.TapLeaf
	23,  // 53: taprpc.DecodedProof.asset:type_name -> taprpc.Asset
	10,  // 54: taprpc.DecodedProof.meta_reveal:type_name -> taprpc.AssetMeta
	21,  // 55: taprpc.DecodedProof.genesis_reveal:type_name -> taprpc.GenesisReveal
	20,  // 56: taprpc.DecodedProof.group_key_reveal:type_name -> taprpc.GroupKeyReveal
	62,  // 57: taprpc.VerifyProofResponse.decoded_proof:type_name -> taprpc.DecodedProof
	62,  // 58: taprpc.DecodeProofResponse.decoded_proof:type_name -> taprpc.DecodedProof
	84,  // 59: taprpc.ExportProofRequest.outpoint:type_name -> taprpc.OutPoint
	49,  // 60: taprpc.AddrEvent.addr:type_name -> taprpc.Addr
	7,   // 61: taprpc.AddrEvent.status:type_name -> taprpc.AddrEventStatus
	7,   // 62: taprpc.AddrReceivesRequest.filter_status:type_name -> taprpc.AddrEventStatus
	69,  // 63: taprpc.AddrReceivesResponse.events:type_name -> taprpc.AddrEvent
	41,  // 64: taprpc.SendAssetResponse.transfer:type_name -> taprpc.AssetTransfer
	10,  // 65: taprpc.FetchAssetMetaResponse.asset_metas:type_name -> taprpc.AssetMeta
	41,  // 66: taprpc.BurnAssetResponse.burn_transfer:type_name -> taprpc.AssetTransfer
	62,  // 67: taprpc.BurnAssetResponse.burn_proof:type_name -> taprpc.DecodedProof
	82,  // 68: taprpc.ListBurnsResponse.burns:type_name -> taprpc.AssetBurn
	49,  // 69: taprpc.ReceiveEvent.address:type_name -> taprpc.Addr
	7,   // 70: taprpc.ReceiveEvent.status:type_name -> taprpc.AddrEventStatus
	9,   // 71: taprpc.SendEvent.parcel_type:type_name -> taprpc.ParcelType
	49,  // 72: taprpc.SendEvent.addresses:type_name -> taprpc.Addr
	89,  // 73: taprpc.SendEvent.anchor_transaction:type_name -> taprpc.AnchorTransaction
	41,  // 74: taprpc.SendEvent.transfer:type_name -> taprpc.AssetTransfer
	84,  // 75: taprpc.AnchorTransaction.lnd_locked_utxos:type_name -> taprpc.OutPoint
	84,  // 76: taprpc.RegisterTransferRequest.outpoint:type_name -> taprpc.OutPoint
	23,  // 77: taprpc.RegisterTransferResponse.registered_asset:type_name -> taprpc.Asset
	28,  // 78: taprpc.ListUtxosResponse.ManagedUtxosEntry.value:type_name -> taprpc.ManagedUtxo
	32,  // 79: taprpc.ListGroupsResponse.GroupsEntry.value:type_name -> taprpc.GroupedAssets
	35,  // 80: taprpc.ListBalancesResponse.AssetBalancesEntry.value:type_name -> taprpc.AssetBalance
	36,  // 81: taprpc.ListBalancesResponse.AssetGroupBalancesEntry.value:type_name -> taprpc.AssetGroupBalance
	11,  // 82: taprpc.TaprootAssets.ListAssets:input_type -> taprpc.ListAssetRequest
	27,  // 83: taprpc.TaprootAssets.ListUtxos:input_type -> taprpc.ListUtxosRequest
	30,  // 84: taprpc.TaprootAssets.ListGroups:input_type -> taprpc.ListGroupsRequest
	34,  // 85: taprpc.TaprootAssets.ListBalances:input_type -> taprpc.ListBalancesRequest
	38,  // 86: taprpc.TaprootAssets.ListTransfers:input_type -> taprpc.ListTransfersRequest
	45,  // 87: taprpc.TaprootAssets.StopDaemon:input_type -> taprpc.StopRequest
	47,  // 88: taprpc.TaprootAssets.DebugLevel:input_type -> taprpc.DebugLevelRequest
	50,  // 89: taprpc.TaprootAssets.QueryAddrs:input_type -> taprpc.QueryAddrRequest
	52,  // 90: taprpc.TaprootAssets.NewAddr:input_type -> taprpc.NewAddrRequest
	60,  // 91: taprpc.TaprootAssets.DecodeAddr:input_type -> taprpc.DecodeAddrRequest
	70,  // 92: taprpc.TaprootAssets.AddrReceives:input_type -> taprpc.AddrReceivesRequest
	61,  // 93: taprpc.TaprootAssets.VerifyProof:input_type -> taprpc.ProofFile
	64,  // 94: taprpc.TaprootAssets.DecodeProof:input_type -> taprpc.DecodeProofRequest
	66,  // 95: taprpc.TaprootAssets.ExportProof:input_type -> taprpc.ExportProofRequest
	67,  // 96: taprpc.TaprootAssets.UnpackProofFile:input_type -> taprpc.UnpackProofFileRequest
	72,  // 97: taprpc.TaprootAssets.SendAsset:input_type -> taprpc.SendAssetRequest
	79,  // 98: taprpc.TaprootAssets.BurnAsset:input_type -> taprpc.BurnAssetRequest
	81,  // 99: taprpc.TaprootAssets.ListBurns:input_type -> taprpc.ListBurnsRequest
	75,  // 100: taprpc.TaprootAssets.GetInfo:input_type -> taprpc.GetInfoRequest
	77,  // 101: taprpc.TaprootAssets.FetchAssetMeta:input_type -> taprpc.FetchAssetMetaRequest
	85,  // 102: taprpc.TaprootAssets.SubscribeReceiveEvents:input_type -> taprpc.SubscribeReceiveEventsRequest
	87,  // 103: taprpc.TaprootAssets.SubscribeSendEvents:input_type -> taprpc.SubscribeSendEventsRequest
	90,  // 104: taprpc.TaprootAssets.RegisterTransfer:input_type -> taprpc.RegisterTransferRequest
	26,  // 105: taprpc.TaprootAssets.ListAssets:output_type -> taprpc.ListAssetResponse
	29,  // 106: taprpc.TaprootAssets.ListUtxos:output_type -> taprpc.ListUtxosResponse
	33,  // 107: taprpc.TaprootAssets.ListGroups:output_type -> taprpc.ListGroupsResponse
	37,  // 108: taprpc.TaprootAssets.ListBalances:output_type -> taprpc.ListBalancesResponse
	39,  // 109: taprpc.TaprootAssets.ListTransfers:output_type -> taprpc.ListTransfersResponse
	46,  // 110: taprpc.TaprootAssets.StopDaemon:output_type -> taprpc.StopResponse
	48,  // 111: taprpc.TaprootAssets.DebugLevel:output_type -> taprpc.DebugLevelResponse
	51,  // 112: taprpc.TaprootAssets.QueryAddrs:output_type -> taprpc.QueryAddrResponse
	49,  // 113: taprpc.TaprootAssets.NewAddr:output_type -> taprpc.Addr
	49,  // 114: taprpc.TaprootAssets.DecodeAddr:output_type -> taprpc.Addr
	71,  // 115: taprpc.TaprootAssets.AddrReceives:output_type -> taprpc.AddrReceivesResponse
	63,  // 116: taprpc.TaprootAssets.VerifyProof:output_type -> taprpc.VerifyProofResponse
	65,  // 117: taprpc.TaprootAssets.DecodeProof:output_type -> taprpc.DecodeProofResponse
	61,  // 118: taprpc.TaprootAssets.ExportProof:output_type -> taprpc.ProofFile
	68,  // 119: taprpc.TaprootAssets.UnpackProofFile:output_type -> taprpc.UnpackProofFileResponse
	74,  // 120: taprpc.TaprootAssets.SendAsset:output_type -> taprpc.SendAssetResponse
	80,  // 121: taprpc.TaprootAssets.BurnAsset:output_type -> taprpc.BurnAssetResponse
	83,  // 122: taprpc.TaprootAssets.ListBurns:output_type -> taprpc.ListBurnsResponse
	76,  // 123: taprpc.TaprootAssets.GetInfo:output_type -> taprpc.GetInfoResponse
	78,  // 124: taprpc.TaprootAssets.FetchAssetMeta:output_type -> taprpc.FetchAssetMetaResponse
	86,  // 125: taprpc.TaprootAssets.SubscribeReceiveEvents:output_type -> taprpc.ReceiveEvent
	88,  // 126: taprpc.TaprootAssets.SubscribeSendEvents:output_type -> taprpc.SendEvent
	91,  // 127: taprpc.TaprootAssets.RegisterTransfer:output_type -> taprpc.RegisterTransferResponse
	105, // [105:128] is the sub-list for method output_type
	82,  // [82:105] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_taprootassets_proto_init() }
func file_taprootassets_proto_init() {
	if File_taprootassets_proto != nil {
		return
	}
	file_taprootassets_proto_msgTypes[24].OneofWrappers = []any{
		(*ListBalancesRequest_AssetId)(nil),
		(*ListBalancesRequest_GroupKey)(nil),
	}
	file_taprootassets_proto_msgTypes[43].OneofWrappers = []any{
		(*ScriptKeyTypeQuery_ExplicitType)(nil),
		(*ScriptKeyTypeQuery_AllTypes)(nil),
	}
	file_taprootassets_proto_msgTypes[67].OneofWrappers = []any{
		(*FetchAssetMetaRequest_AssetId)(nil),
		(*FetchAssetMetaRequest_MetaHash)(nil),
		(*FetchAssetMetaRequest_AssetIdStr)(nil),
		(*FetchAssetMetaRequest_MetaHashStr)(nil),
		(*FetchAssetMetaRequest_GroupKey)(nil),
		(*FetchAssetMetaRequest_GroupKeyStr)(nil),
	}
	file_taprootassets_proto_msgTypes[69].OneofWrappers = []any{
		(*BurnAssetRequest_AssetId)(nil),
		(*BurnAssetRequest_AssetIdStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_taprootassets_proto_rawDesc), len(file_taprootassets_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taprootassets_proto_goTypes,
		DependencyIndexes: file_taprootassets_proto_depIdxs,
		EnumInfos:         file_taprootassets_proto_enumTypes,
		MessageInfos:      file_taprootassets_proto_msgTypes,
	}.Build()
	File_taprootassets_proto = out.File
	file_taprootassets_proto_goTypes = nil
	file_taprootassets_proto_depIdxs = nil
}
