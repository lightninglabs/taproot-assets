// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: rfqrpc/rfq.proto

package rfqrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuoteRespStatus is an enum that represents the status of a quote response.
type QuoteRespStatus int32

const (
	// INVALID_ASSET_RATES indicates that at least one asset rate in the
	// quote response is invalid.
	QuoteRespStatus_INVALID_ASSET_RATES QuoteRespStatus = 0
	// INVALID_EXPIRY indicates that the expiry in the quote response is
	// invalid.
	QuoteRespStatus_INVALID_EXPIRY QuoteRespStatus = 1
	// PRICE_ORACLE_QUERY_ERR indicates that an error occurred when querying the
	// price oracle whilst evaluating the quote response.
	QuoteRespStatus_PRICE_ORACLE_QUERY_ERR QuoteRespStatus = 2
)

// Enum value maps for QuoteRespStatus.
var (
	QuoteRespStatus_name = map[int32]string{
		0: "INVALID_ASSET_RATES",
		1: "INVALID_EXPIRY",
		2: "PRICE_ORACLE_QUERY_ERR",
	}
	QuoteRespStatus_value = map[string]int32{
		"INVALID_ASSET_RATES":    0,
		"INVALID_EXPIRY":         1,
		"PRICE_ORACLE_QUERY_ERR": 2,
	}
)

func (x QuoteRespStatus) Enum() *QuoteRespStatus {
	p := new(QuoteRespStatus)
	*p = x
	return p
}

func (x QuoteRespStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuoteRespStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rfqrpc_rfq_proto_enumTypes[0].Descriptor()
}

func (QuoteRespStatus) Type() protoreflect.EnumType {
	return &file_rfqrpc_rfq_proto_enumTypes[0]
}

func (x QuoteRespStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuoteRespStatus.Descriptor instead.
func (QuoteRespStatus) EnumDescriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{0}
}

type AssetSpecifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Id:
	//
	//	*AssetSpecifier_AssetId
	//	*AssetSpecifier_AssetIdStr
	//	*AssetSpecifier_GroupKey
	//	*AssetSpecifier_GroupKeyStr
	Id            isAssetSpecifier_Id `protobuf_oneof:"id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetSpecifier) Reset() {
	*x = AssetSpecifier{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSpecifier) ProtoMessage() {}

func (x *AssetSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSpecifier.ProtoReflect.Descriptor instead.
func (*AssetSpecifier) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{0}
}

func (x *AssetSpecifier) GetId() isAssetSpecifier_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetSpecifier) GetAssetId() []byte {
	if x != nil {
		if x, ok := x.Id.(*AssetSpecifier_AssetId); ok {
			return x.AssetId
		}
	}
	return nil
}

func (x *AssetSpecifier) GetAssetIdStr() string {
	if x != nil {
		if x, ok := x.Id.(*AssetSpecifier_AssetIdStr); ok {
			return x.AssetIdStr
		}
	}
	return ""
}

func (x *AssetSpecifier) GetGroupKey() []byte {
	if x != nil {
		if x, ok := x.Id.(*AssetSpecifier_GroupKey); ok {
			return x.GroupKey
		}
	}
	return nil
}

func (x *AssetSpecifier) GetGroupKeyStr() string {
	if x != nil {
		if x, ok := x.Id.(*AssetSpecifier_GroupKeyStr); ok {
			return x.GroupKeyStr
		}
	}
	return ""
}

type isAssetSpecifier_Id interface {
	isAssetSpecifier_Id()
}

type AssetSpecifier_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type AssetSpecifier_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type AssetSpecifier_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type AssetSpecifier_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*AssetSpecifier_AssetId) isAssetSpecifier_Id() {}

func (*AssetSpecifier_AssetIdStr) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKey) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKeyStr) isAssetSpecifier_Id() {}

// FixedPoint is a scaled integer representation of a fractional number.
//
// This type consists of two integer fields: a coefficient and a scale.
// Using this format enables precise and consistent representation of fractional
// numbers while avoiding floating-point data types, which are prone to
// precision errors.
//
// The relationship between the fractional representation and its fixed-point
// representation is expressed as:
// ```
// V = F_c / (10^F_s)
// ```
// where:
//
// * `V` is the fractional value.
//
//   - `F_c` is the coefficient component of the fixed-point representation. It is
//     the scaled-up fractional value represented as an integer.
//
//   - `F_s` is the scale component. It is an integer specifying how
//     many decimal places `F_c` should be divided by to obtain the fractional
//     representation.
type FixedPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The coefficient is the fractional value scaled-up as an integer. This
	// integer is represented as a string as it may be too large to fit in a
	// uint64.
	Coefficient string `protobuf:"bytes,1,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	// The scale is the component that determines how many decimal places
	// the coefficient should be divided by to obtain the fractional value.
	Scale         uint32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedPoint) Reset() {
	*x = FixedPoint{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPoint) ProtoMessage() {}

func (x *FixedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedPoint.ProtoReflect.Descriptor instead.
func (*FixedPoint) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{1}
}

func (x *FixedPoint) GetCoefficient() string {
	if x != nil {
		return x.Coefficient
	}
	return ""
}

func (x *FixedPoint) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type AddAssetBuyOrderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// The maximum amount of the asset that the provider must be willing to
	// offer.
	AssetMaxAmt uint64 `protobuf:"varint,2,opt,name=asset_max_amt,json=assetMaxAmt,proto3" json:"asset_max_amt,omitempty"`
	// The unix timestamp in seconds after which the order is no longer valid.
	Expiry uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// peer_pub_key is an optional field for specifying the public key of the
	// intended recipient peer for the order.
	PeerPubKey []byte `protobuf:"bytes,4,opt,name=peer_pub_key,json=peerPubKey,proto3" json:"peer_pub_key,omitempty"`
	// timeout_seconds is the number of seconds to wait for the peer to respond
	// with an accepted quote (or a rejection).
	TimeoutSeconds uint32 `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// If set, the check if a channel with the given asset exists with the peer
	// will be skipped. An active channel with the peer is still required for
	// the RFQ negotiation to work. This flag shouldn't be set outside of test
	// scenarios.
	SkipAssetChannelCheck bool `protobuf:"varint,6,opt,name=skip_asset_channel_check,json=skipAssetChannelCheck,proto3" json:"skip_asset_channel_check,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AddAssetBuyOrderRequest) Reset() {
	*x = AddAssetBuyOrderRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetBuyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOrderRequest) ProtoMessage() {}

func (x *AddAssetBuyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOrderRequest.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{2}
}

func (x *AddAssetBuyOrderRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetBuyOrderRequest) GetAssetMaxAmt() uint64 {
	if x != nil {
		return x.AssetMaxAmt
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetPeerPubKey() []byte {
	if x != nil {
		return x.PeerPubKey
	}
	return nil
}

func (x *AddAssetBuyOrderRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetSkipAssetChannelCheck() bool {
	if x != nil {
		return x.SkipAssetChannelCheck
	}
	return false
}

type AddAssetBuyOrderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AddAssetBuyOrderResponse_AcceptedQuote
	//	*AddAssetBuyOrderResponse_InvalidQuote
	//	*AddAssetBuyOrderResponse_RejectedQuote
	Response      isAddAssetBuyOrderResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetBuyOrderResponse) Reset() {
	*x = AddAssetBuyOrderResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetBuyOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOrderResponse) ProtoMessage() {}

func (x *AddAssetBuyOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOrderResponse.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{3}
}

func (x *AddAssetBuyOrderResponse) GetResponse() isAddAssetBuyOrderResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetAcceptedQuote() *PeerAcceptedBuyQuote {
	if x != nil {
		if x, ok := x.Response.(*AddAssetBuyOrderResponse_AcceptedQuote); ok {
			return x.AcceptedQuote
		}
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetInvalidQuote() *InvalidQuoteResponse {
	if x != nil {
		if x, ok := x.Response.(*AddAssetBuyOrderResponse_InvalidQuote); ok {
			return x.InvalidQuote
		}
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetRejectedQuote() *RejectedQuoteResponse {
	if x != nil {
		if x, ok := x.Response.(*AddAssetBuyOrderResponse_RejectedQuote); ok {
			return x.RejectedQuote
		}
	}
	return nil
}

type isAddAssetBuyOrderResponse_Response interface {
	isAddAssetBuyOrderResponse_Response()
}

type AddAssetBuyOrderResponse_AcceptedQuote struct {
	// accepted_quote holds the quote received from the peer as a response
	// to our quote request.
	AcceptedQuote *PeerAcceptedBuyQuote `protobuf:"bytes,1,opt,name=accepted_quote,json=acceptedQuote,proto3,oneof"`
}

type AddAssetBuyOrderResponse_InvalidQuote struct {
	// invalid_quote is returned if the quote response received from the
	// peer was invalid or insufficient.
	InvalidQuote *InvalidQuoteResponse `protobuf:"bytes,2,opt,name=invalid_quote,json=invalidQuote,proto3,oneof"`
}

type AddAssetBuyOrderResponse_RejectedQuote struct {
	// rejected_quote is returned if the quote request was rejected by the
	// peer.
	RejectedQuote *RejectedQuoteResponse `protobuf:"bytes,3,opt,name=rejected_quote,json=rejectedQuote,proto3,oneof"`
}

func (*AddAssetBuyOrderResponse_AcceptedQuote) isAddAssetBuyOrderResponse_Response() {}

func (*AddAssetBuyOrderResponse_InvalidQuote) isAddAssetBuyOrderResponse_Response() {}

func (*AddAssetBuyOrderResponse_RejectedQuote) isAddAssetBuyOrderResponse_Response() {}

type AddAssetSellOrderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// The maximum msat amount that the responding peer must agree to pay
	// (units: millisats).
	PaymentMaxAmt uint64 `protobuf:"varint,2,opt,name=payment_max_amt,json=paymentMaxAmt,proto3" json:"payment_max_amt,omitempty"`
	// The unix timestamp in seconds after which the order is no longer valid.
	Expiry uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// peer_pub_key is an optional field for specifying the public key of the
	// intended recipient peer for the order.
	PeerPubKey []byte `protobuf:"bytes,4,opt,name=peer_pub_key,json=peerPubKey,proto3" json:"peer_pub_key,omitempty"`
	// timeout_seconds is the number of seconds to wait for the peer to respond
	// with an accepted quote (or a rejection).
	TimeoutSeconds uint32 `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// If set, the check if a channel with the given asset exists with the peer
	// will be skipped. An active channel with the peer is still required for
	// the RFQ negotiation to work. This flag shouldn't be set outside of test
	// scenarios.
	SkipAssetChannelCheck bool `protobuf:"varint,6,opt,name=skip_asset_channel_check,json=skipAssetChannelCheck,proto3" json:"skip_asset_channel_check,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AddAssetSellOrderRequest) Reset() {
	*x = AddAssetSellOrderRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetSellOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOrderRequest) ProtoMessage() {}

func (x *AddAssetSellOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOrderRequest.ProtoReflect.Descriptor instead.
func (*AddAssetSellOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{4}
}

func (x *AddAssetSellOrderRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetSellOrderRequest) GetPaymentMaxAmt() uint64 {
	if x != nil {
		return x.PaymentMaxAmt
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetPeerPubKey() []byte {
	if x != nil {
		return x.PeerPubKey
	}
	return nil
}

func (x *AddAssetSellOrderRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetSkipAssetChannelCheck() bool {
	if x != nil {
		return x.SkipAssetChannelCheck
	}
	return false
}

type AddAssetSellOrderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AddAssetSellOrderResponse_AcceptedQuote
	//	*AddAssetSellOrderResponse_InvalidQuote
	//	*AddAssetSellOrderResponse_RejectedQuote
	Response      isAddAssetSellOrderResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetSellOrderResponse) Reset() {
	*x = AddAssetSellOrderResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetSellOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOrderResponse) ProtoMessage() {}

func (x *AddAssetSellOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOrderResponse.ProtoReflect.Descriptor instead.
func (*AddAssetSellOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{5}
}

func (x *AddAssetSellOrderResponse) GetResponse() isAddAssetSellOrderResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetAcceptedQuote() *PeerAcceptedSellQuote {
	if x != nil {
		if x, ok := x.Response.(*AddAssetSellOrderResponse_AcceptedQuote); ok {
			return x.AcceptedQuote
		}
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetInvalidQuote() *InvalidQuoteResponse {
	if x != nil {
		if x, ok := x.Response.(*AddAssetSellOrderResponse_InvalidQuote); ok {
			return x.InvalidQuote
		}
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetRejectedQuote() *RejectedQuoteResponse {
	if x != nil {
		if x, ok := x.Response.(*AddAssetSellOrderResponse_RejectedQuote); ok {
			return x.RejectedQuote
		}
	}
	return nil
}

type isAddAssetSellOrderResponse_Response interface {
	isAddAssetSellOrderResponse_Response()
}

type AddAssetSellOrderResponse_AcceptedQuote struct {
	// accepted_quote holds the quote received from the peer as a response
	// to our quote request.
	AcceptedQuote *PeerAcceptedSellQuote `protobuf:"bytes,1,opt,name=accepted_quote,json=acceptedQuote,proto3,oneof"`
}

type AddAssetSellOrderResponse_InvalidQuote struct {
	// invalid_quote is returned if the quote response received from the
	// peer was invalid or insufficient.
	InvalidQuote *InvalidQuoteResponse `protobuf:"bytes,2,opt,name=invalid_quote,json=invalidQuote,proto3,oneof"`
}

type AddAssetSellOrderResponse_RejectedQuote struct {
	// rejected_quote is returned if the quote request was rejected by the
	// peer.
	RejectedQuote *RejectedQuoteResponse `protobuf:"bytes,3,opt,name=rejected_quote,json=rejectedQuote,proto3,oneof"`
}

func (*AddAssetSellOrderResponse_AcceptedQuote) isAddAssetSellOrderResponse_Response() {}

func (*AddAssetSellOrderResponse_InvalidQuote) isAddAssetSellOrderResponse_Response() {}

func (*AddAssetSellOrderResponse_RejectedQuote) isAddAssetSellOrderResponse_Response() {}

type AddAssetSellOfferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// max_units is the maximum amount of the asset to sell.
	MaxUnits      uint64 `protobuf:"varint,2,opt,name=max_units,json=maxUnits,proto3" json:"max_units,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetSellOfferRequest) Reset() {
	*x = AddAssetSellOfferRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetSellOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOfferRequest) ProtoMessage() {}

func (x *AddAssetSellOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOfferRequest.ProtoReflect.Descriptor instead.
func (*AddAssetSellOfferRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{6}
}

func (x *AddAssetSellOfferRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetSellOfferRequest) GetMaxUnits() uint64 {
	if x != nil {
		return x.MaxUnits
	}
	return 0
}

type AddAssetSellOfferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetSellOfferResponse) Reset() {
	*x = AddAssetSellOfferResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetSellOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOfferResponse) ProtoMessage() {}

func (x *AddAssetSellOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOfferResponse.ProtoReflect.Descriptor instead.
func (*AddAssetSellOfferResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{7}
}

type AddAssetBuyOfferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// max_units is the maximum amount of the asset to buy.
	MaxUnits      uint64 `protobuf:"varint,2,opt,name=max_units,json=maxUnits,proto3" json:"max_units,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetBuyOfferRequest) Reset() {
	*x = AddAssetBuyOfferRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetBuyOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOfferRequest) ProtoMessage() {}

func (x *AddAssetBuyOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOfferRequest.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOfferRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{8}
}

func (x *AddAssetBuyOfferRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetBuyOfferRequest) GetMaxUnits() uint64 {
	if x != nil {
		return x.MaxUnits
	}
	return 0
}

type AddAssetBuyOfferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAssetBuyOfferResponse) Reset() {
	*x = AddAssetBuyOfferResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAssetBuyOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOfferResponse) ProtoMessage() {}

func (x *AddAssetBuyOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOfferResponse.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOfferResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{9}
}

type QueryPeerAcceptedQuotesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPeerAcceptedQuotesRequest) Reset() {
	*x = QueryPeerAcceptedQuotesRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPeerAcceptedQuotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPeerAcceptedQuotesRequest) ProtoMessage() {}

func (x *QueryPeerAcceptedQuotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPeerAcceptedQuotesRequest.ProtoReflect.Descriptor instead.
func (*QueryPeerAcceptedQuotesRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{10}
}

type PeerAcceptedBuyQuote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The short channel ID of the channel over which the payment for the quote
	// should be made.
	Scid uint64 `protobuf:"varint,3,opt,name=scid,proto3" json:"scid,omitempty"`
	// The maximum exchange amount denoted in the subject asset. This includes
	// the user-configured maximum routing fees, so the actual payment amount
	// will be less than this. This just defines the maximum volume that the
	// edge node has accepted to divest with the given rate.
	AssetMaxAmount uint64 `protobuf:"varint,4,opt,name=asset_max_amount,json=assetMaxAmount,proto3" json:"asset_max_amount,omitempty"`
	// ask_asset_rate is the asset to BTC conversion rate represented as a
	// fixed-point number.
	AskAssetRate *FixedPoint `protobuf:"bytes,5,opt,name=ask_asset_rate,json=askAssetRate,proto3" json:"ask_asset_rate,omitempty"`
	// The unix timestamp in seconds after which the quote is no longer valid.
	Expiry uint64 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The smallest amount of asset units that can be transported within a
	// single HTLC over the Lightning Network with the given rate. This is the
	// asset unit equivalent of 354 satoshis, which is the minimum amount for an
	// HTLC to be above the dust limit.
	MinTransportableUnits uint64 `protobuf:"varint,7,opt,name=min_transportable_units,json=minTransportableUnits,proto3" json:"min_transportable_units,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PeerAcceptedBuyQuote) Reset() {
	*x = PeerAcceptedBuyQuote{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAcceptedBuyQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedBuyQuote) ProtoMessage() {}

func (x *PeerAcceptedBuyQuote) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedBuyQuote.ProtoReflect.Descriptor instead.
func (*PeerAcceptedBuyQuote) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{11}
}

func (x *PeerAcceptedBuyQuote) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *PeerAcceptedBuyQuote) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PeerAcceptedBuyQuote) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *PeerAcceptedBuyQuote) GetAssetMaxAmount() uint64 {
	if x != nil {
		return x.AssetMaxAmount
	}
	return 0
}

func (x *PeerAcceptedBuyQuote) GetAskAssetRate() *FixedPoint {
	if x != nil {
		return x.AskAssetRate
	}
	return nil
}

func (x *PeerAcceptedBuyQuote) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PeerAcceptedBuyQuote) GetMinTransportableUnits() uint64 {
	if x != nil {
		return x.MinTransportableUnits
	}
	return 0
}

type PeerAcceptedSellQuote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// scid is the short channel ID of the channel over which the payment for
	// the quote should be made.
	Scid uint64 `protobuf:"varint,3,opt,name=scid,proto3" json:"scid,omitempty"`
	// asset_amount is the amount of the subject asset.
	AssetAmount uint64 `protobuf:"varint,4,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// bid_asset_rate is the asset to BTC conversion rate represented as a
	// fixed-point number.
	BidAssetRate *FixedPoint `protobuf:"bytes,5,opt,name=bid_asset_rate,json=bidAssetRate,proto3" json:"bid_asset_rate,omitempty"`
	// The unix timestamp in seconds after which the quote is no longer valid.
	Expiry uint64 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The minimum amount of milli-satoshis that need to be sent out in order to
	// transport a single asset unit over the Lightning Network with the given
	// rate. This is the base amount of 354,000 milli-satoshi (the minimum
	// amount for a non-dust HTLC) plus the equivalent of one asset unit in
	// milli-satoshis.
	MinTransportableMsat uint64 `protobuf:"varint,7,opt,name=min_transportable_msat,json=minTransportableMsat,proto3" json:"min_transportable_msat,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PeerAcceptedSellQuote) Reset() {
	*x = PeerAcceptedSellQuote{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAcceptedSellQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedSellQuote) ProtoMessage() {}

func (x *PeerAcceptedSellQuote) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedSellQuote.ProtoReflect.Descriptor instead.
func (*PeerAcceptedSellQuote) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{12}
}

func (x *PeerAcceptedSellQuote) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *PeerAcceptedSellQuote) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PeerAcceptedSellQuote) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetBidAssetRate() *FixedPoint {
	if x != nil {
		return x.BidAssetRate
	}
	return nil
}

func (x *PeerAcceptedSellQuote) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetMinTransportableMsat() uint64 {
	if x != nil {
		return x.MinTransportableMsat
	}
	return 0
}

// InvalidQuoteResponse is a message that is returned when a quote response is
// invalid or insufficient.
type InvalidQuoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status is the status of the quote response.
	Status QuoteRespStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rfqrpc.QuoteRespStatus" json:"status,omitempty"`
	// peer is the quote counterparty peer.
	Peer string `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	// id is the unique identifier of the quote request.
	Id            []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidQuoteResponse) Reset() {
	*x = InvalidQuoteResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidQuoteResponse) ProtoMessage() {}

func (x *InvalidQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidQuoteResponse.ProtoReflect.Descriptor instead.
func (*InvalidQuoteResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{13}
}

func (x *InvalidQuoteResponse) GetStatus() QuoteRespStatus {
	if x != nil {
		return x.Status
	}
	return QuoteRespStatus_INVALID_ASSET_RATES
}

func (x *InvalidQuoteResponse) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *InvalidQuoteResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// RejectedQuoteResponse is a message that is returned when a quote request is
// rejected by the peer.
type RejectedQuoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// peer is the quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// id is the unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// error_message is a human-readable error message.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// error_code is a machine-readable error code.
	ErrorCode     uint32 `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectedQuoteResponse) Reset() {
	*x = RejectedQuoteResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectedQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectedQuoteResponse) ProtoMessage() {}

func (x *RejectedQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectedQuoteResponse.ProtoReflect.Descriptor instead.
func (*RejectedQuoteResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{14}
}

func (x *RejectedQuoteResponse) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *RejectedQuoteResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RejectedQuoteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RejectedQuoteResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type QueryPeerAcceptedQuotesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// buy_quotes is a list of asset buy quotes which were requested by our
	// node and have been accepted by our peers.
	BuyQuotes []*PeerAcceptedBuyQuote `protobuf:"bytes,1,rep,name=buy_quotes,json=buyQuotes,proto3" json:"buy_quotes,omitempty"`
	// sell_quotes is a list of asset sell quotes which were requested by our
	// node and have been accepted by our peers.
	SellQuotes    []*PeerAcceptedSellQuote `protobuf:"bytes,2,rep,name=sell_quotes,json=sellQuotes,proto3" json:"sell_quotes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPeerAcceptedQuotesResponse) Reset() {
	*x = QueryPeerAcceptedQuotesResponse{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPeerAcceptedQuotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPeerAcceptedQuotesResponse) ProtoMessage() {}

func (x *QueryPeerAcceptedQuotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPeerAcceptedQuotesResponse.ProtoReflect.Descriptor instead.
func (*QueryPeerAcceptedQuotesResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{15}
}

func (x *QueryPeerAcceptedQuotesResponse) GetBuyQuotes() []*PeerAcceptedBuyQuote {
	if x != nil {
		return x.BuyQuotes
	}
	return nil
}

func (x *QueryPeerAcceptedQuotesResponse) GetSellQuotes() []*PeerAcceptedSellQuote {
	if x != nil {
		return x.SellQuotes
	}
	return nil
}

type SubscribeRfqEventNtfnsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRfqEventNtfnsRequest) Reset() {
	*x = SubscribeRfqEventNtfnsRequest{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRfqEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRfqEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeRfqEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRfqEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRfqEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{16}
}

type PeerAcceptedBuyQuoteEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The asset buy quote that was accepted by out peer.
	PeerAcceptedBuyQuote *PeerAcceptedBuyQuote `protobuf:"bytes,2,opt,name=peer_accepted_buy_quote,json=peerAcceptedBuyQuote,proto3" json:"peer_accepted_buy_quote,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PeerAcceptedBuyQuoteEvent) Reset() {
	*x = PeerAcceptedBuyQuoteEvent{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAcceptedBuyQuoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedBuyQuoteEvent) ProtoMessage() {}

func (x *PeerAcceptedBuyQuoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedBuyQuoteEvent.ProtoReflect.Descriptor instead.
func (*PeerAcceptedBuyQuoteEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{17}
}

func (x *PeerAcceptedBuyQuoteEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PeerAcceptedBuyQuoteEvent) GetPeerAcceptedBuyQuote() *PeerAcceptedBuyQuote {
	if x != nil {
		return x.PeerAcceptedBuyQuote
	}
	return nil
}

type PeerAcceptedSellQuoteEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The asset sell quote that was accepted by out peer.
	PeerAcceptedSellQuote *PeerAcceptedSellQuote `protobuf:"bytes,2,opt,name=peer_accepted_sell_quote,json=peerAcceptedSellQuote,proto3" json:"peer_accepted_sell_quote,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PeerAcceptedSellQuoteEvent) Reset() {
	*x = PeerAcceptedSellQuoteEvent{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAcceptedSellQuoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedSellQuoteEvent) ProtoMessage() {}

func (x *PeerAcceptedSellQuoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedSellQuoteEvent.ProtoReflect.Descriptor instead.
func (*PeerAcceptedSellQuoteEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{18}
}

func (x *PeerAcceptedSellQuoteEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PeerAcceptedSellQuoteEvent) GetPeerAcceptedSellQuote() *PeerAcceptedSellQuote {
	if x != nil {
		return x.PeerAcceptedSellQuote
	}
	return nil
}

type AcceptHtlcEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// scid is the short channel ID of the channel over which the payment for
	// the quote is made.
	Scid          uint64 `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptHtlcEvent) Reset() {
	*x = AcceptHtlcEvent{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptHtlcEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptHtlcEvent) ProtoMessage() {}

func (x *AcceptHtlcEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptHtlcEvent.ProtoReflect.Descriptor instead.
func (*AcceptHtlcEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{19}
}

func (x *AcceptHtlcEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AcceptHtlcEvent) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

type RfqEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*RfqEvent_PeerAcceptedBuyQuote
	//	*RfqEvent_PeerAcceptedSellQuote
	//	*RfqEvent_AcceptHtlc
	Event         isRfqEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RfqEvent) Reset() {
	*x = RfqEvent{}
	mi := &file_rfqrpc_rfq_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RfqEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfqEvent) ProtoMessage() {}

func (x *RfqEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfqEvent.ProtoReflect.Descriptor instead.
func (*RfqEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{20}
}

func (x *RfqEvent) GetEvent() isRfqEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *RfqEvent) GetPeerAcceptedBuyQuote() *PeerAcceptedBuyQuoteEvent {
	if x != nil {
		if x, ok := x.Event.(*RfqEvent_PeerAcceptedBuyQuote); ok {
			return x.PeerAcceptedBuyQuote
		}
	}
	return nil
}

func (x *RfqEvent) GetPeerAcceptedSellQuote() *PeerAcceptedSellQuoteEvent {
	if x != nil {
		if x, ok := x.Event.(*RfqEvent_PeerAcceptedSellQuote); ok {
			return x.PeerAcceptedSellQuote
		}
	}
	return nil
}

func (x *RfqEvent) GetAcceptHtlc() *AcceptHtlcEvent {
	if x != nil {
		if x, ok := x.Event.(*RfqEvent_AcceptHtlc); ok {
			return x.AcceptHtlc
		}
	}
	return nil
}

type isRfqEvent_Event interface {
	isRfqEvent_Event()
}

type RfqEvent_PeerAcceptedBuyQuote struct {
	// peer_accepted_buy_quote is an event that is emitted when a peer
	// accepted (incoming) asset buy quote message is received.
	PeerAcceptedBuyQuote *PeerAcceptedBuyQuoteEvent `protobuf:"bytes,1,opt,name=peer_accepted_buy_quote,json=peerAcceptedBuyQuote,proto3,oneof"`
}

type RfqEvent_PeerAcceptedSellQuote struct {
	// peer_accepted_sell_offer is an event that is emitted when a peer
	// accepted (incoming) asset sell quote message is received.
	PeerAcceptedSellQuote *PeerAcceptedSellQuoteEvent `protobuf:"bytes,2,opt,name=peer_accepted_sell_quote,json=peerAcceptedSellQuote,proto3,oneof"`
}

type RfqEvent_AcceptHtlc struct {
	// accept_htlc is an event that is sent when a HTLC is accepted by the
	// RFQ service.
	AcceptHtlc *AcceptHtlcEvent `protobuf:"bytes,3,opt,name=accept_htlc,json=acceptHtlc,proto3,oneof"`
}

func (*RfqEvent_PeerAcceptedBuyQuote) isRfqEvent_Event() {}

func (*RfqEvent_PeerAcceptedSellQuote) isRfqEvent_Event() {}

func (*RfqEvent_AcceptHtlc) isRfqEvent_Event() {}

var File_rfqrpc_rfq_proto protoreflect.FileDescriptor

const file_rfqrpc_rfq_proto_rawDesc = "" +
	"\n" +
	"\x10rfqrpc/rfq.proto\x12\x06rfqrpc\"\x9c\x01\n" +
	"\x0eAssetSpecifier\x12\x1b\n" +
	"\basset_id\x18\x01 \x01(\fH\x00R\aassetId\x12\"\n" +
	"\fasset_id_str\x18\x02 \x01(\tH\x00R\n" +
	"assetIdStr\x12\x1d\n" +
	"\tgroup_key\x18\x03 \x01(\fH\x00R\bgroupKey\x12$\n" +
	"\rgroup_key_str\x18\x04 \x01(\tH\x00R\vgroupKeyStrB\x04\n" +
	"\x02id\"D\n" +
	"\n" +
	"FixedPoint\x12 \n" +
	"\vcoefficient\x18\x01 \x01(\tR\vcoefficient\x12\x14\n" +
	"\x05scale\x18\x02 \x01(\rR\x05scale\"\x9a\x02\n" +
	"\x17AddAssetBuyOrderRequest\x12?\n" +
	"\x0fasset_specifier\x18\x01 \x01(\v2\x16.rfqrpc.AssetSpecifierR\x0eassetSpecifier\x12\"\n" +
	"\rasset_max_amt\x18\x02 \x01(\x04R\vassetMaxAmt\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\x04R\x06expiry\x12 \n" +
	"\fpeer_pub_key\x18\x04 \x01(\fR\n" +
	"peerPubKey\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\rR\x0etimeoutSeconds\x127\n" +
	"\x18skip_asset_channel_check\x18\x06 \x01(\bR\x15skipAssetChannelCheck\"\xfa\x01\n" +
	"\x18AddAssetBuyOrderResponse\x12E\n" +
	"\x0eaccepted_quote\x18\x01 \x01(\v2\x1c.rfqrpc.PeerAcceptedBuyQuoteH\x00R\racceptedQuote\x12C\n" +
	"\rinvalid_quote\x18\x02 \x01(\v2\x1c.rfqrpc.InvalidQuoteResponseH\x00R\finvalidQuote\x12F\n" +
	"\x0erejected_quote\x18\x03 \x01(\v2\x1d.rfqrpc.RejectedQuoteResponseH\x00R\rrejectedQuoteB\n" +
	"\n" +
	"\bresponse\"\x9f\x02\n" +
	"\x18AddAssetSellOrderRequest\x12?\n" +
	"\x0fasset_specifier\x18\x01 \x01(\v2\x16.rfqrpc.AssetSpecifierR\x0eassetSpecifier\x12&\n" +
	"\x0fpayment_max_amt\x18\x02 \x01(\x04R\rpaymentMaxAmt\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\x04R\x06expiry\x12 \n" +
	"\fpeer_pub_key\x18\x04 \x01(\fR\n" +
	"peerPubKey\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\rR\x0etimeoutSeconds\x127\n" +
	"\x18skip_asset_channel_check\x18\x06 \x01(\bR\x15skipAssetChannelCheck\"\xfc\x01\n" +
	"\x19AddAssetSellOrderResponse\x12F\n" +
	"\x0eaccepted_quote\x18\x01 \x01(\v2\x1d.rfqrpc.PeerAcceptedSellQuoteH\x00R\racceptedQuote\x12C\n" +
	"\rinvalid_quote\x18\x02 \x01(\v2\x1c.rfqrpc.InvalidQuoteResponseH\x00R\finvalidQuote\x12F\n" +
	"\x0erejected_quote\x18\x03 \x01(\v2\x1d.rfqrpc.RejectedQuoteResponseH\x00R\rrejectedQuoteB\n" +
	"\n" +
	"\bresponse\"x\n" +
	"\x18AddAssetSellOfferRequest\x12?\n" +
	"\x0fasset_specifier\x18\x01 \x01(\v2\x16.rfqrpc.AssetSpecifierR\x0eassetSpecifier\x12\x1b\n" +
	"\tmax_units\x18\x02 \x01(\x04R\bmaxUnits\"\x1b\n" +
	"\x19AddAssetSellOfferResponse\"w\n" +
	"\x17AddAssetBuyOfferRequest\x12?\n" +
	"\x0fasset_specifier\x18\x01 \x01(\v2\x16.rfqrpc.AssetSpecifierR\x0eassetSpecifier\x12\x1b\n" +
	"\tmax_units\x18\x02 \x01(\x04R\bmaxUnits\"\x1a\n" +
	"\x18AddAssetBuyOfferResponse\" \n" +
	"\x1eQueryPeerAcceptedQuotesRequest\"\x82\x02\n" +
	"\x14PeerAcceptedBuyQuote\x12\x12\n" +
	"\x04peer\x18\x01 \x01(\tR\x04peer\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\fR\x02id\x12\x12\n" +
	"\x04scid\x18\x03 \x01(\x04R\x04scid\x12(\n" +
	"\x10asset_max_amount\x18\x04 \x01(\x04R\x0eassetMaxAmount\x128\n" +
	"\x0eask_asset_rate\x18\x05 \x01(\v2\x12.rfqrpc.FixedPointR\faskAssetRate\x12\x16\n" +
	"\x06expiry\x18\x06 \x01(\x04R\x06expiry\x126\n" +
	"\x17min_transportable_units\x18\a \x01(\x04R\x15minTransportableUnits\"\xfa\x01\n" +
	"\x15PeerAcceptedSellQuote\x12\x12\n" +
	"\x04peer\x18\x01 \x01(\tR\x04peer\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\fR\x02id\x12\x12\n" +
	"\x04scid\x18\x03 \x01(\x04R\x04scid\x12!\n" +
	"\fasset_amount\x18\x04 \x01(\x04R\vassetAmount\x128\n" +
	"\x0ebid_asset_rate\x18\x05 \x01(\v2\x12.rfqrpc.FixedPointR\fbidAssetRate\x12\x16\n" +
	"\x06expiry\x18\x06 \x01(\x04R\x06expiry\x124\n" +
	"\x16min_transportable_msat\x18\a \x01(\x04R\x14minTransportableMsat\"k\n" +
	"\x14InvalidQuoteResponse\x12/\n" +
	"\x06status\x18\x01 \x01(\x0e2\x17.rfqrpc.QuoteRespStatusR\x06status\x12\x12\n" +
	"\x04peer\x18\x02 \x01(\tR\x04peer\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\fR\x02id\"\x7f\n" +
	"\x15RejectedQuoteResponse\x12\x12\n" +
	"\x04peer\x18\x01 \x01(\tR\x04peer\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\fR\x02id\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_code\x18\x04 \x01(\rR\terrorCode\"\x9e\x01\n" +
	"\x1fQueryPeerAcceptedQuotesResponse\x12;\n" +
	"\n" +
	"buy_quotes\x18\x01 \x03(\v2\x1c.rfqrpc.PeerAcceptedBuyQuoteR\tbuyQuotes\x12>\n" +
	"\vsell_quotes\x18\x02 \x03(\v2\x1d.rfqrpc.PeerAcceptedSellQuoteR\n" +
	"sellQuotes\"\x1f\n" +
	"\x1dSubscribeRfqEventNtfnsRequest\"\x8e\x01\n" +
	"\x19PeerAcceptedBuyQuoteEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12S\n" +
	"\x17peer_accepted_buy_quote\x18\x02 \x01(\v2\x1c.rfqrpc.PeerAcceptedBuyQuoteR\x14peerAcceptedBuyQuote\"\x92\x01\n" +
	"\x1aPeerAcceptedSellQuoteEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12V\n" +
	"\x18peer_accepted_sell_quote\x18\x02 \x01(\v2\x1d.rfqrpc.PeerAcceptedSellQuoteR\x15peerAcceptedSellQuote\"C\n" +
	"\x0fAcceptHtlcEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12\x12\n" +
	"\x04scid\x18\x02 \x01(\x04R\x04scid\"\x8a\x02\n" +
	"\bRfqEvent\x12Z\n" +
	"\x17peer_accepted_buy_quote\x18\x01 \x01(\v2!.rfqrpc.PeerAcceptedBuyQuoteEventH\x00R\x14peerAcceptedBuyQuote\x12]\n" +
	"\x18peer_accepted_sell_quote\x18\x02 \x01(\v2\".rfqrpc.PeerAcceptedSellQuoteEventH\x00R\x15peerAcceptedSellQuote\x12:\n" +
	"\vaccept_htlc\x18\x03 \x01(\v2\x17.rfqrpc.AcceptHtlcEventH\x00R\n" +
	"acceptHtlcB\a\n" +
	"\x05event*Z\n" +
	"\x0fQuoteRespStatus\x12\x17\n" +
	"\x13INVALID_ASSET_RATES\x10\x00\x12\x12\n" +
	"\x0eINVALID_EXPIRY\x10\x01\x12\x1a\n" +
	"\x16PRICE_ORACLE_QUERY_ERR\x10\x022\xa8\x04\n" +
	"\x03Rfq\x12U\n" +
	"\x10AddAssetBuyOrder\x12\x1f.rfqrpc.AddAssetBuyOrderRequest\x1a .rfqrpc.AddAssetBuyOrderResponse\x12X\n" +
	"\x11AddAssetSellOrder\x12 .rfqrpc.AddAssetSellOrderRequest\x1a!.rfqrpc.AddAssetSellOrderResponse\x12X\n" +
	"\x11AddAssetSellOffer\x12 .rfqrpc.AddAssetSellOfferRequest\x1a!.rfqrpc.AddAssetSellOfferResponse\x12U\n" +
	"\x10AddAssetBuyOffer\x12\x1f.rfqrpc.AddAssetBuyOfferRequest\x1a .rfqrpc.AddAssetBuyOfferResponse\x12j\n" +
	"\x17QueryPeerAcceptedQuotes\x12&.rfqrpc.QueryPeerAcceptedQuotesRequest\x1a'.rfqrpc.QueryPeerAcceptedQuotesResponse\x12S\n" +
	"\x16SubscribeRfqEventNtfns\x12%.rfqrpc.SubscribeRfqEventNtfnsRequest\x1a\x10.rfqrpc.RfqEvent0\x01B7Z5github.com/lightninglabs/taproot-assets/taprpc/rfqrpcb\x06proto3"

var (
	file_rfqrpc_rfq_proto_rawDescOnce sync.Once
	file_rfqrpc_rfq_proto_rawDescData []byte
)

func file_rfqrpc_rfq_proto_rawDescGZIP() []byte {
	file_rfqrpc_rfq_proto_rawDescOnce.Do(func() {
		file_rfqrpc_rfq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rfqrpc_rfq_proto_rawDesc), len(file_rfqrpc_rfq_proto_rawDesc)))
	})
	return file_rfqrpc_rfq_proto_rawDescData
}

var file_rfqrpc_rfq_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rfqrpc_rfq_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_rfqrpc_rfq_proto_goTypes = []any{
	(QuoteRespStatus)(0),                    // 0: rfqrpc.QuoteRespStatus
	(*AssetSpecifier)(nil),                  // 1: rfqrpc.AssetSpecifier
	(*FixedPoint)(nil),                      // 2: rfqrpc.FixedPoint
	(*AddAssetBuyOrderRequest)(nil),         // 3: rfqrpc.AddAssetBuyOrderRequest
	(*AddAssetBuyOrderResponse)(nil),        // 4: rfqrpc.AddAssetBuyOrderResponse
	(*AddAssetSellOrderRequest)(nil),        // 5: rfqrpc.AddAssetSellOrderRequest
	(*AddAssetSellOrderResponse)(nil),       // 6: rfqrpc.AddAssetSellOrderResponse
	(*AddAssetSellOfferRequest)(nil),        // 7: rfqrpc.AddAssetSellOfferRequest
	(*AddAssetSellOfferResponse)(nil),       // 8: rfqrpc.AddAssetSellOfferResponse
	(*AddAssetBuyOfferRequest)(nil),         // 9: rfqrpc.AddAssetBuyOfferRequest
	(*AddAssetBuyOfferResponse)(nil),        // 10: rfqrpc.AddAssetBuyOfferResponse
	(*QueryPeerAcceptedQuotesRequest)(nil),  // 11: rfqrpc.QueryPeerAcceptedQuotesRequest
	(*PeerAcceptedBuyQuote)(nil),            // 12: rfqrpc.PeerAcceptedBuyQuote
	(*PeerAcceptedSellQuote)(nil),           // 13: rfqrpc.PeerAcceptedSellQuote
	(*InvalidQuoteResponse)(nil),            // 14: rfqrpc.InvalidQuoteResponse
	(*RejectedQuoteResponse)(nil),           // 15: rfqrpc.RejectedQuoteResponse
	(*QueryPeerAcceptedQuotesResponse)(nil), // 16: rfqrpc.QueryPeerAcceptedQuotesResponse
	(*SubscribeRfqEventNtfnsRequest)(nil),   // 17: rfqrpc.SubscribeRfqEventNtfnsRequest
	(*PeerAcceptedBuyQuoteEvent)(nil),       // 18: rfqrpc.PeerAcceptedBuyQuoteEvent
	(*PeerAcceptedSellQuoteEvent)(nil),      // 19: rfqrpc.PeerAcceptedSellQuoteEvent
	(*AcceptHtlcEvent)(nil),                 // 20: rfqrpc.AcceptHtlcEvent
	(*RfqEvent)(nil),                        // 21: rfqrpc.RfqEvent
}
var file_rfqrpc_rfq_proto_depIdxs = []int32{
	1,  // 0: rfqrpc.AddAssetBuyOrderRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	12, // 1: rfqrpc.AddAssetBuyOrderResponse.accepted_quote:type_name -> rfqrpc.PeerAcceptedBuyQuote
	14, // 2: rfqrpc.AddAssetBuyOrderResponse.invalid_quote:type_name -> rfqrpc.InvalidQuoteResponse
	15, // 3: rfqrpc.AddAssetBuyOrderResponse.rejected_quote:type_name -> rfqrpc.RejectedQuoteResponse
	1,  // 4: rfqrpc.AddAssetSellOrderRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	13, // 5: rfqrpc.AddAssetSellOrderResponse.accepted_quote:type_name -> rfqrpc.PeerAcceptedSellQuote
	14, // 6: rfqrpc.AddAssetSellOrderResponse.invalid_quote:type_name -> rfqrpc.InvalidQuoteResponse
	15, // 7: rfqrpc.AddAssetSellOrderResponse.rejected_quote:type_name -> rfqrpc.RejectedQuoteResponse
	1,  // 8: rfqrpc.AddAssetSellOfferRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	1,  // 9: rfqrpc.AddAssetBuyOfferRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	2,  // 10: rfqrpc.PeerAcceptedBuyQuote.ask_asset_rate:type_name -> rfqrpc.FixedPoint
	2,  // 11: rfqrpc.PeerAcceptedSellQuote.bid_asset_rate:type_name -> rfqrpc.FixedPoint
	0,  // 12: rfqrpc.InvalidQuoteResponse.status:type_name -> rfqrpc.QuoteRespStatus
	12, // 13: rfqrpc.QueryPeerAcceptedQuotesResponse.buy_quotes:type_name -> rfqrpc.PeerAcceptedBuyQuote
	13, // 14: rfqrpc.QueryPeerAcceptedQuotesResponse.sell_quotes:type_name -> rfqrpc.PeerAcceptedSellQuote
	12, // 15: rfqrpc.PeerAcceptedBuyQuoteEvent.peer_accepted_buy_quote:type_name -> rfqrpc.PeerAcceptedBuyQuote
	13, // 16: rfqrpc.PeerAcceptedSellQuoteEvent.peer_accepted_sell_quote:type_name -> rfqrpc.PeerAcceptedSellQuote
	18, // 17: rfqrpc.RfqEvent.peer_accepted_buy_quote:type_name -> rfqrpc.PeerAcceptedBuyQuoteEvent
	19, // 18: rfqrpc.RfqEvent.peer_accepted_sell_quote:type_name -> rfqrpc.PeerAcceptedSellQuoteEvent
	20, // 19: rfqrpc.RfqEvent.accept_htlc:type_name -> rfqrpc.AcceptHtlcEvent
	3,  // 20: rfqrpc.Rfq.AddAssetBuyOrder:input_type -> rfqrpc.AddAssetBuyOrderRequest
	5,  // 21: rfqrpc.Rfq.AddAssetSellOrder:input_type -> rfqrpc.AddAssetSellOrderRequest
	7,  // 22: rfqrpc.Rfq.AddAssetSellOffer:input_type -> rfqrpc.AddAssetSellOfferRequest
	9,  // 23: rfqrpc.Rfq.AddAssetBuyOffer:input_type -> rfqrpc.AddAssetBuyOfferRequest
	11, // 24: rfqrpc.Rfq.QueryPeerAcceptedQuotes:input_type -> rfqrpc.QueryPeerAcceptedQuotesRequest
	17, // 25: rfqrpc.Rfq.SubscribeRfqEventNtfns:input_type -> rfqrpc.SubscribeRfqEventNtfnsRequest
	4,  // 26: rfqrpc.Rfq.AddAssetBuyOrder:output_type -> rfqrpc.AddAssetBuyOrderResponse
	6,  // 27: rfqrpc.Rfq.AddAssetSellOrder:output_type -> rfqrpc.AddAssetSellOrderResponse
	8,  // 28: rfqrpc.Rfq.AddAssetSellOffer:output_type -> rfqrpc.AddAssetSellOfferResponse
	10, // 29: rfqrpc.Rfq.AddAssetBuyOffer:output_type -> rfqrpc.AddAssetBuyOfferResponse
	16, // 30: rfqrpc.Rfq.QueryPeerAcceptedQuotes:output_type -> rfqrpc.QueryPeerAcceptedQuotesResponse
	21, // 31: rfqrpc.Rfq.SubscribeRfqEventNtfns:output_type -> rfqrpc.RfqEvent
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rfqrpc_rfq_proto_init() }
func file_rfqrpc_rfq_proto_init() {
	if File_rfqrpc_rfq_proto != nil {
		return
	}
	file_rfqrpc_rfq_proto_msgTypes[0].OneofWrappers = []any{
		(*AssetSpecifier_AssetId)(nil),
		(*AssetSpecifier_AssetIdStr)(nil),
		(*AssetSpecifier_GroupKey)(nil),
		(*AssetSpecifier_GroupKeyStr)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[3].OneofWrappers = []any{
		(*AddAssetBuyOrderResponse_AcceptedQuote)(nil),
		(*AddAssetBuyOrderResponse_InvalidQuote)(nil),
		(*AddAssetBuyOrderResponse_RejectedQuote)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[5].OneofWrappers = []any{
		(*AddAssetSellOrderResponse_AcceptedQuote)(nil),
		(*AddAssetSellOrderResponse_InvalidQuote)(nil),
		(*AddAssetSellOrderResponse_RejectedQuote)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[20].OneofWrappers = []any{
		(*RfqEvent_PeerAcceptedBuyQuote)(nil),
		(*RfqEvent_PeerAcceptedSellQuote)(nil),
		(*RfqEvent_AcceptHtlc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rfqrpc_rfq_proto_rawDesc), len(file_rfqrpc_rfq_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rfqrpc_rfq_proto_goTypes,
		DependencyIndexes: file_rfqrpc_rfq_proto_depIdxs,
		EnumInfos:         file_rfqrpc_rfq_proto_enumTypes,
		MessageInfos:      file_rfqrpc_rfq_proto_msgTypes,
	}.Build()
	File_rfqrpc_rfq_proto = out.File
	file_rfqrpc_rfq_proto_goTypes = nil
	file_rfqrpc_rfq_proto_depIdxs = nil
}
