// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: rfqrpc/rfq.proto

package rfqrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuoteRespStatus is an enum that represents the status of a quote response.
type QuoteRespStatus int32

const (
	// INVALID_RATE_TICK indicates that the rate tick in the quote response is
	// invalid.
	QuoteRespStatus_INVALID_RATE_TICK QuoteRespStatus = 0
	// INVALID_EXPIRY indicates that the expiry in the quote response is
	// invalid.
	QuoteRespStatus_INVALID_EXPIRY QuoteRespStatus = 1
	// PRICE_ORACLE_QUERY_ERR indicates that an error occurred when querying the
	// price oracle whilst evaluating the quote response.
	QuoteRespStatus_PRICE_ORACLE_QUERY_ERR QuoteRespStatus = 2
)

// Enum value maps for QuoteRespStatus.
var (
	QuoteRespStatus_name = map[int32]string{
		0: "INVALID_RATE_TICK",
		1: "INVALID_EXPIRY",
		2: "PRICE_ORACLE_QUERY_ERR",
	}
	QuoteRespStatus_value = map[string]int32{
		"INVALID_RATE_TICK":      0,
		"INVALID_EXPIRY":         1,
		"PRICE_ORACLE_QUERY_ERR": 2,
	}
)

func (x QuoteRespStatus) Enum() *QuoteRespStatus {
	p := new(QuoteRespStatus)
	*p = x
	return p
}

func (x QuoteRespStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuoteRespStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rfqrpc_rfq_proto_enumTypes[0].Descriptor()
}

func (QuoteRespStatus) Type() protoreflect.EnumType {
	return &file_rfqrpc_rfq_proto_enumTypes[0]
}

func (x QuoteRespStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuoteRespStatus.Descriptor instead.
func (QuoteRespStatus) EnumDescriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{0}
}

type AssetSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*AssetSpecifier_AssetId
	//	*AssetSpecifier_AssetIdStr
	//	*AssetSpecifier_GroupKey
	//	*AssetSpecifier_GroupKeyStr
	Id isAssetSpecifier_Id `protobuf_oneof:"id"`
}

func (x *AssetSpecifier) Reset() {
	*x = AssetSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSpecifier) ProtoMessage() {}

func (x *AssetSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSpecifier.ProtoReflect.Descriptor instead.
func (*AssetSpecifier) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{0}
}

func (m *AssetSpecifier) GetId() isAssetSpecifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AssetSpecifier) GetAssetId() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *AssetSpecifier) GetAssetIdStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *AssetSpecifier) GetGroupKey() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *AssetSpecifier) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isAssetSpecifier_Id interface {
	isAssetSpecifier_Id()
}

type AssetSpecifier_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type AssetSpecifier_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type AssetSpecifier_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type AssetSpecifier_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*AssetSpecifier_AssetId) isAssetSpecifier_Id() {}

func (*AssetSpecifier_AssetIdStr) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKey) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKeyStr) isAssetSpecifier_Id() {}

// FixedPoint is a scaled integer representation of a fractional number.
//
// This type consists of two integer fields: a coefficient and a scale.
// Using this format enables precise and consistent representation of fractional
// numbers while avoiding floating-point data types, which are prone to
// precision errors.
//
// The relationship between the fractional representation and its fixed-point
// representation is expressed as:
// ```
// V = F_c / (10^F_s)
// ```
// where:
//
// * `V` is the fractional value.
//
//   - `F_c` is the coefficient component of the fixed-point representation. It is
//     the scaled-up fractional value represented as an integer.
//
//   - `F_s` is the scale component. It is an integer specifying how
//     many decimal places `F_c` should be divided by to obtain the fractional
//     representation.
type FixedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coefficient is the fractional value scaled-up as an integer. This
	// integer is represented as a string as it may be too large to fit in a
	// uint64.
	Coefficient string `protobuf:"bytes,1,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	// The scale is the component that determines how many decimal places
	// the coefficient should be divided by to obtain the fractional value.
	Scale uint32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *FixedPoint) Reset() {
	*x = FixedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPoint) ProtoMessage() {}

func (x *FixedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedPoint.ProtoReflect.Descriptor instead.
func (*FixedPoint) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{1}
}

func (x *FixedPoint) GetCoefficient() string {
	if x != nil {
		return x.Coefficient
	}
	return ""
}

func (x *FixedPoint) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type AddAssetBuyOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// The minimum amount of the asset to buy.
	MinAssetAmount uint64 `protobuf:"varint,2,opt,name=min_asset_amount,json=minAssetAmount,proto3" json:"min_asset_amount,omitempty"`
	// The maximum amount BTC to spend (units: millisats).
	MaxBid uint64 `protobuf:"varint,3,opt,name=max_bid,json=maxBid,proto3" json:"max_bid,omitempty"`
	// The unix timestamp in seconds after which the order is no longer valid.
	Expiry uint64 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// peer_pub_key is an optional field for specifying the public key of the
	// intended recipient peer for the order.
	PeerPubKey []byte `protobuf:"bytes,5,opt,name=peer_pub_key,json=peerPubKey,proto3" json:"peer_pub_key,omitempty"`
	// timeout_seconds is the number of seconds to wait for the peer to respond
	// with an accepted quote (or a rejection).
	TimeoutSeconds uint32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *AddAssetBuyOrderRequest) Reset() {
	*x = AddAssetBuyOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetBuyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOrderRequest) ProtoMessage() {}

func (x *AddAssetBuyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOrderRequest.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{2}
}

func (x *AddAssetBuyOrderRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetBuyOrderRequest) GetMinAssetAmount() uint64 {
	if x != nil {
		return x.MinAssetAmount
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetMaxBid() uint64 {
	if x != nil {
		return x.MaxBid
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AddAssetBuyOrderRequest) GetPeerPubKey() []byte {
	if x != nil {
		return x.PeerPubKey
	}
	return nil
}

func (x *AddAssetBuyOrderRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type AddAssetBuyOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AddAssetBuyOrderResponse_AcceptedQuote
	//	*AddAssetBuyOrderResponse_InvalidQuote
	//	*AddAssetBuyOrderResponse_RejectedQuote
	Response isAddAssetBuyOrderResponse_Response `protobuf_oneof:"response"`
}

func (x *AddAssetBuyOrderResponse) Reset() {
	*x = AddAssetBuyOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetBuyOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOrderResponse) ProtoMessage() {}

func (x *AddAssetBuyOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOrderResponse.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{3}
}

func (m *AddAssetBuyOrderResponse) GetResponse() isAddAssetBuyOrderResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetAcceptedQuote() *PeerAcceptedBuyQuote {
	if x, ok := x.GetResponse().(*AddAssetBuyOrderResponse_AcceptedQuote); ok {
		return x.AcceptedQuote
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetInvalidQuote() *InvalidQuoteResponse {
	if x, ok := x.GetResponse().(*AddAssetBuyOrderResponse_InvalidQuote); ok {
		return x.InvalidQuote
	}
	return nil
}

func (x *AddAssetBuyOrderResponse) GetRejectedQuote() *RejectedQuoteResponse {
	if x, ok := x.GetResponse().(*AddAssetBuyOrderResponse_RejectedQuote); ok {
		return x.RejectedQuote
	}
	return nil
}

type isAddAssetBuyOrderResponse_Response interface {
	isAddAssetBuyOrderResponse_Response()
}

type AddAssetBuyOrderResponse_AcceptedQuote struct {
	// accepted_quote holds the quote received from the peer as a response
	// to our quote request.
	AcceptedQuote *PeerAcceptedBuyQuote `protobuf:"bytes,1,opt,name=accepted_quote,json=acceptedQuote,proto3,oneof"`
}

type AddAssetBuyOrderResponse_InvalidQuote struct {
	// invalid_quote is returned if the quote response received from the
	// peer was invalid or insufficient.
	InvalidQuote *InvalidQuoteResponse `protobuf:"bytes,2,opt,name=invalid_quote,json=invalidQuote,proto3,oneof"`
}

type AddAssetBuyOrderResponse_RejectedQuote struct {
	// rejected_quote is returned if the quote request was rejected by the
	// peer.
	RejectedQuote *RejectedQuoteResponse `protobuf:"bytes,3,opt,name=rejected_quote,json=rejectedQuote,proto3,oneof"`
}

func (*AddAssetBuyOrderResponse_AcceptedQuote) isAddAssetBuyOrderResponse_Response() {}

func (*AddAssetBuyOrderResponse_InvalidQuote) isAddAssetBuyOrderResponse_Response() {}

func (*AddAssetBuyOrderResponse_RejectedQuote) isAddAssetBuyOrderResponse_Response() {}

type AddAssetSellOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// The maximum amount of the asset to sell.
	MaxAssetAmount uint64 `protobuf:"varint,2,opt,name=max_asset_amount,json=maxAssetAmount,proto3" json:"max_asset_amount,omitempty"`
	// The minimum amount of BTC to accept (units: millisats).
	MinAsk uint64 `protobuf:"varint,3,opt,name=min_ask,json=minAsk,proto3" json:"min_ask,omitempty"`
	// The unix timestamp in seconds after which the order is no longer valid.
	Expiry uint64 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// peer_pub_key is an optional field for specifying the public key of the
	// intended recipient peer for the order.
	PeerPubKey []byte `protobuf:"bytes,5,opt,name=peer_pub_key,json=peerPubKey,proto3" json:"peer_pub_key,omitempty"`
	// timeout_seconds is the number of seconds to wait for the peer to respond
	// with an accepted quote (or a rejection).
	TimeoutSeconds uint32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *AddAssetSellOrderRequest) Reset() {
	*x = AddAssetSellOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetSellOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOrderRequest) ProtoMessage() {}

func (x *AddAssetSellOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOrderRequest.ProtoReflect.Descriptor instead.
func (*AddAssetSellOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{4}
}

func (x *AddAssetSellOrderRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetSellOrderRequest) GetMaxAssetAmount() uint64 {
	if x != nil {
		return x.MaxAssetAmount
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetMinAsk() uint64 {
	if x != nil {
		return x.MinAsk
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AddAssetSellOrderRequest) GetPeerPubKey() []byte {
	if x != nil {
		return x.PeerPubKey
	}
	return nil
}

func (x *AddAssetSellOrderRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type AddAssetSellOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AddAssetSellOrderResponse_AcceptedQuote
	//	*AddAssetSellOrderResponse_InvalidQuote
	//	*AddAssetSellOrderResponse_RejectedQuote
	Response isAddAssetSellOrderResponse_Response `protobuf_oneof:"response"`
}

func (x *AddAssetSellOrderResponse) Reset() {
	*x = AddAssetSellOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetSellOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOrderResponse) ProtoMessage() {}

func (x *AddAssetSellOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOrderResponse.ProtoReflect.Descriptor instead.
func (*AddAssetSellOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{5}
}

func (m *AddAssetSellOrderResponse) GetResponse() isAddAssetSellOrderResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetAcceptedQuote() *PeerAcceptedSellQuote {
	if x, ok := x.GetResponse().(*AddAssetSellOrderResponse_AcceptedQuote); ok {
		return x.AcceptedQuote
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetInvalidQuote() *InvalidQuoteResponse {
	if x, ok := x.GetResponse().(*AddAssetSellOrderResponse_InvalidQuote); ok {
		return x.InvalidQuote
	}
	return nil
}

func (x *AddAssetSellOrderResponse) GetRejectedQuote() *RejectedQuoteResponse {
	if x, ok := x.GetResponse().(*AddAssetSellOrderResponse_RejectedQuote); ok {
		return x.RejectedQuote
	}
	return nil
}

type isAddAssetSellOrderResponse_Response interface {
	isAddAssetSellOrderResponse_Response()
}

type AddAssetSellOrderResponse_AcceptedQuote struct {
	// accepted_quote holds the quote received from the peer as a response
	// to our quote request.
	AcceptedQuote *PeerAcceptedSellQuote `protobuf:"bytes,1,opt,name=accepted_quote,json=acceptedQuote,proto3,oneof"`
}

type AddAssetSellOrderResponse_InvalidQuote struct {
	// invalid_quote is returned if the quote response received from the
	// peer was invalid or insufficient.
	InvalidQuote *InvalidQuoteResponse `protobuf:"bytes,2,opt,name=invalid_quote,json=invalidQuote,proto3,oneof"`
}

type AddAssetSellOrderResponse_RejectedQuote struct {
	// rejected_quote is returned if the quote request was rejected by the
	// peer.
	RejectedQuote *RejectedQuoteResponse `protobuf:"bytes,3,opt,name=rejected_quote,json=rejectedQuote,proto3,oneof"`
}

func (*AddAssetSellOrderResponse_AcceptedQuote) isAddAssetSellOrderResponse_Response() {}

func (*AddAssetSellOrderResponse_InvalidQuote) isAddAssetSellOrderResponse_Response() {}

func (*AddAssetSellOrderResponse_RejectedQuote) isAddAssetSellOrderResponse_Response() {}

type AddAssetSellOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// max_units is the maximum amount of the asset to sell.
	MaxUnits uint64 `protobuf:"varint,2,opt,name=max_units,json=maxUnits,proto3" json:"max_units,omitempty"`
}

func (x *AddAssetSellOfferRequest) Reset() {
	*x = AddAssetSellOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetSellOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOfferRequest) ProtoMessage() {}

func (x *AddAssetSellOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOfferRequest.ProtoReflect.Descriptor instead.
func (*AddAssetSellOfferRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{6}
}

func (x *AddAssetSellOfferRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetSellOfferRequest) GetMaxUnits() uint64 {
	if x != nil {
		return x.MaxUnits
	}
	return 0
}

type AddAssetSellOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAssetSellOfferResponse) Reset() {
	*x = AddAssetSellOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetSellOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetSellOfferResponse) ProtoMessage() {}

func (x *AddAssetSellOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetSellOfferResponse.ProtoReflect.Descriptor instead.
func (*AddAssetSellOfferResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{7}
}

type AddAssetBuyOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset_specifier is the subject asset.
	AssetSpecifier *AssetSpecifier `protobuf:"bytes,1,opt,name=asset_specifier,json=assetSpecifier,proto3" json:"asset_specifier,omitempty"`
	// max_units is the maximum amount of the asset to buy.
	MaxUnits uint64 `protobuf:"varint,2,opt,name=max_units,json=maxUnits,proto3" json:"max_units,omitempty"`
}

func (x *AddAssetBuyOfferRequest) Reset() {
	*x = AddAssetBuyOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetBuyOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOfferRequest) ProtoMessage() {}

func (x *AddAssetBuyOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOfferRequest.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOfferRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{8}
}

func (x *AddAssetBuyOfferRequest) GetAssetSpecifier() *AssetSpecifier {
	if x != nil {
		return x.AssetSpecifier
	}
	return nil
}

func (x *AddAssetBuyOfferRequest) GetMaxUnits() uint64 {
	if x != nil {
		return x.MaxUnits
	}
	return 0
}

type AddAssetBuyOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAssetBuyOfferResponse) Reset() {
	*x = AddAssetBuyOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetBuyOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetBuyOfferResponse) ProtoMessage() {}

func (x *AddAssetBuyOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetBuyOfferResponse.ProtoReflect.Descriptor instead.
func (*AddAssetBuyOfferResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{9}
}

type QueryPeerAcceptedQuotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryPeerAcceptedQuotesRequest) Reset() {
	*x = QueryPeerAcceptedQuotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPeerAcceptedQuotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPeerAcceptedQuotesRequest) ProtoMessage() {}

func (x *QueryPeerAcceptedQuotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPeerAcceptedQuotesRequest.ProtoReflect.Descriptor instead.
func (*QueryPeerAcceptedQuotesRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{10}
}

type PeerAcceptedBuyQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// scid is the short channel ID of the channel over which the payment for
	// the quote should be made.
	Scid uint64 `protobuf:"varint,3,opt,name=scid,proto3" json:"scid,omitempty"`
	// asset_amount is the amount of the subject asset.
	AssetAmount uint64 `protobuf:"varint,4,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// ask_asset_rate is the asset to BTC conversion rate represented as a
	// fixed-point number.
	AskAssetRate *FixedPoint `protobuf:"bytes,5,opt,name=ask_asset_rate,json=askAssetRate,proto3" json:"ask_asset_rate,omitempty"`
	// The unix timestamp in seconds after which the quote is no longer valid.
	Expiry uint64 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PeerAcceptedBuyQuote) Reset() {
	*x = PeerAcceptedBuyQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerAcceptedBuyQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedBuyQuote) ProtoMessage() {}

func (x *PeerAcceptedBuyQuote) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedBuyQuote.ProtoReflect.Descriptor instead.
func (*PeerAcceptedBuyQuote) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{11}
}

func (x *PeerAcceptedBuyQuote) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *PeerAcceptedBuyQuote) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PeerAcceptedBuyQuote) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *PeerAcceptedBuyQuote) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *PeerAcceptedBuyQuote) GetAskAssetRate() *FixedPoint {
	if x != nil {
		return x.AskAssetRate
	}
	return nil
}

func (x *PeerAcceptedBuyQuote) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type PeerAcceptedSellQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// scid is the short channel ID of the channel over which the payment for
	// the quote should be made.
	Scid uint64 `protobuf:"varint,3,opt,name=scid,proto3" json:"scid,omitempty"`
	// asset_amount is the amount of the subject asset.
	AssetAmount uint64 `protobuf:"varint,4,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// bid_price is the price in milli-satoshi per asset unit.
	BidPrice uint64 `protobuf:"varint,5,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	// The unix timestamp in seconds after which the quote is no longer valid.
	Expiry uint64 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PeerAcceptedSellQuote) Reset() {
	*x = PeerAcceptedSellQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerAcceptedSellQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedSellQuote) ProtoMessage() {}

func (x *PeerAcceptedSellQuote) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedSellQuote.ProtoReflect.Descriptor instead.
func (*PeerAcceptedSellQuote) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{12}
}

func (x *PeerAcceptedSellQuote) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *PeerAcceptedSellQuote) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PeerAcceptedSellQuote) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetBidPrice() uint64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *PeerAcceptedSellQuote) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

// InvalidQuoteResponse is a message that is returned when a quote response is
// invalid or insufficient.
type InvalidQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is the status of the quote response.
	Status QuoteRespStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rfqrpc.QuoteRespStatus" json:"status,omitempty"`
	// peer is the quote counterparty peer.
	Peer string `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	// id is the unique identifier of the quote request.
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InvalidQuoteResponse) Reset() {
	*x = InvalidQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidQuoteResponse) ProtoMessage() {}

func (x *InvalidQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidQuoteResponse.ProtoReflect.Descriptor instead.
func (*InvalidQuoteResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{13}
}

func (x *InvalidQuoteResponse) GetStatus() QuoteRespStatus {
	if x != nil {
		return x.Status
	}
	return QuoteRespStatus_INVALID_RATE_TICK
}

func (x *InvalidQuoteResponse) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *InvalidQuoteResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// RejectedQuoteResponse is a message that is returned when a quote request is
// rejected by the peer.
type RejectedQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// peer is the quote counterparty peer.
	Peer string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// id is the unique identifier of the quote request.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// error_message is a human-readable error message.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// error_code is a machine-readable error code.
	ErrorCode uint32 `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *RejectedQuoteResponse) Reset() {
	*x = RejectedQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectedQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectedQuoteResponse) ProtoMessage() {}

func (x *RejectedQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectedQuoteResponse.ProtoReflect.Descriptor instead.
func (*RejectedQuoteResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{14}
}

func (x *RejectedQuoteResponse) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *RejectedQuoteResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RejectedQuoteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RejectedQuoteResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type QueryPeerAcceptedQuotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buy_quotes is a list of asset buy quotes which were requested by our
	// node and have been accepted by our peers.
	BuyQuotes []*PeerAcceptedBuyQuote `protobuf:"bytes,1,rep,name=buy_quotes,json=buyQuotes,proto3" json:"buy_quotes,omitempty"`
	// sell_quotes is a list of asset sell quotes which were requested by our
	// node and have been accepted by our peers.
	SellQuotes []*PeerAcceptedSellQuote `protobuf:"bytes,2,rep,name=sell_quotes,json=sellQuotes,proto3" json:"sell_quotes,omitempty"`
}

func (x *QueryPeerAcceptedQuotesResponse) Reset() {
	*x = QueryPeerAcceptedQuotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPeerAcceptedQuotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPeerAcceptedQuotesResponse) ProtoMessage() {}

func (x *QueryPeerAcceptedQuotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPeerAcceptedQuotesResponse.ProtoReflect.Descriptor instead.
func (*QueryPeerAcceptedQuotesResponse) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{15}
}

func (x *QueryPeerAcceptedQuotesResponse) GetBuyQuotes() []*PeerAcceptedBuyQuote {
	if x != nil {
		return x.BuyQuotes
	}
	return nil
}

func (x *QueryPeerAcceptedQuotesResponse) GetSellQuotes() []*PeerAcceptedSellQuote {
	if x != nil {
		return x.SellQuotes
	}
	return nil
}

type SubscribeRfqEventNtfnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeRfqEventNtfnsRequest) Reset() {
	*x = SubscribeRfqEventNtfnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRfqEventNtfnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRfqEventNtfnsRequest) ProtoMessage() {}

func (x *SubscribeRfqEventNtfnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRfqEventNtfnsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRfqEventNtfnsRequest) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{16}
}

type PeerAcceptedBuyQuoteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The asset buy quote that was accepted by out peer.
	PeerAcceptedBuyQuote *PeerAcceptedBuyQuote `protobuf:"bytes,2,opt,name=peer_accepted_buy_quote,json=peerAcceptedBuyQuote,proto3" json:"peer_accepted_buy_quote,omitempty"`
}

func (x *PeerAcceptedBuyQuoteEvent) Reset() {
	*x = PeerAcceptedBuyQuoteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerAcceptedBuyQuoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedBuyQuoteEvent) ProtoMessage() {}

func (x *PeerAcceptedBuyQuoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedBuyQuoteEvent.ProtoReflect.Descriptor instead.
func (*PeerAcceptedBuyQuoteEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{17}
}

func (x *PeerAcceptedBuyQuoteEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PeerAcceptedBuyQuoteEvent) GetPeerAcceptedBuyQuote() *PeerAcceptedBuyQuote {
	if x != nil {
		return x.PeerAcceptedBuyQuote
	}
	return nil
}

type PeerAcceptedSellQuoteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The asset sell quote that was accepted by out peer.
	PeerAcceptedSellQuote *PeerAcceptedSellQuote `protobuf:"bytes,2,opt,name=peer_accepted_sell_quote,json=peerAcceptedSellQuote,proto3" json:"peer_accepted_sell_quote,omitempty"`
}

func (x *PeerAcceptedSellQuoteEvent) Reset() {
	*x = PeerAcceptedSellQuoteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerAcceptedSellQuoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAcceptedSellQuoteEvent) ProtoMessage() {}

func (x *PeerAcceptedSellQuoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAcceptedSellQuoteEvent.ProtoReflect.Descriptor instead.
func (*PeerAcceptedSellQuoteEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{18}
}

func (x *PeerAcceptedSellQuoteEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PeerAcceptedSellQuoteEvent) GetPeerAcceptedSellQuote() *PeerAcceptedSellQuote {
	if x != nil {
		return x.PeerAcceptedSellQuote
	}
	return nil
}

type AcceptHtlcEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp in microseconds.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// scid is the short channel ID of the channel over which the payment for
	// the quote is made.
	Scid uint64 `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
}

func (x *AcceptHtlcEvent) Reset() {
	*x = AcceptHtlcEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptHtlcEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptHtlcEvent) ProtoMessage() {}

func (x *AcceptHtlcEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptHtlcEvent.ProtoReflect.Descriptor instead.
func (*AcceptHtlcEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{19}
}

func (x *AcceptHtlcEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AcceptHtlcEvent) GetScid() uint64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

type RfqEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*RfqEvent_PeerAcceptedBuyQuote
	//	*RfqEvent_PeerAcceptedSellQuote
	//	*RfqEvent_AcceptHtlc
	Event isRfqEvent_Event `protobuf_oneof:"event"`
}

func (x *RfqEvent) Reset() {
	*x = RfqEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfqrpc_rfq_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RfqEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RfqEvent) ProtoMessage() {}

func (x *RfqEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rfqrpc_rfq_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RfqEvent.ProtoReflect.Descriptor instead.
func (*RfqEvent) Descriptor() ([]byte, []int) {
	return file_rfqrpc_rfq_proto_rawDescGZIP(), []int{20}
}

func (m *RfqEvent) GetEvent() isRfqEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RfqEvent) GetPeerAcceptedBuyQuote() *PeerAcceptedBuyQuoteEvent {
	if x, ok := x.GetEvent().(*RfqEvent_PeerAcceptedBuyQuote); ok {
		return x.PeerAcceptedBuyQuote
	}
	return nil
}

func (x *RfqEvent) GetPeerAcceptedSellQuote() *PeerAcceptedSellQuoteEvent {
	if x, ok := x.GetEvent().(*RfqEvent_PeerAcceptedSellQuote); ok {
		return x.PeerAcceptedSellQuote
	}
	return nil
}

func (x *RfqEvent) GetAcceptHtlc() *AcceptHtlcEvent {
	if x, ok := x.GetEvent().(*RfqEvent_AcceptHtlc); ok {
		return x.AcceptHtlc
	}
	return nil
}

type isRfqEvent_Event interface {
	isRfqEvent_Event()
}

type RfqEvent_PeerAcceptedBuyQuote struct {
	// peer_accepted_buy_quote is an event that is emitted when a peer
	// accepted (incoming) asset buy quote message is received.
	PeerAcceptedBuyQuote *PeerAcceptedBuyQuoteEvent `protobuf:"bytes,1,opt,name=peer_accepted_buy_quote,json=peerAcceptedBuyQuote,proto3,oneof"`
}

type RfqEvent_PeerAcceptedSellQuote struct {
	// peer_accepted_sell_offer is an event that is emitted when a peer
	// accepted (incoming) asset sell quote message is received.
	PeerAcceptedSellQuote *PeerAcceptedSellQuoteEvent `protobuf:"bytes,2,opt,name=peer_accepted_sell_quote,json=peerAcceptedSellQuote,proto3,oneof"`
}

type RfqEvent_AcceptHtlc struct {
	// accept_htlc is an event that is sent when a HTLC is accepted by the
	// RFQ service.
	AcceptHtlc *AcceptHtlcEvent `protobuf:"bytes,3,opt,name=accept_htlc,json=acceptHtlc,proto3,oneof"`
}

func (*RfqEvent_PeerAcceptedBuyQuote) isRfqEvent_Event() {}

func (*RfqEvent_PeerAcceptedSellQuote) isRfqEvent_Event() {}

func (*RfqEvent_AcceptHtlc) isRfqEvent_Event() {}

var File_rfqrpc_rfq_proto protoreflect.FileDescriptor

var file_rfqrpc_rfq_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x66, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x0a, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0x80, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x75, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x81, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x41, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x66, 0x71, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x78, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x19,
	0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x17, 0x41, 0x64, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75,
	0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc3, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x63, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0c, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x22, 0x6b, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a,
	0x15, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x75, 0x79, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x09, 0x62, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x66, 0x71, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x19, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x53, 0x0a, 0x17,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x14, 0x70, 0x65, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x56,
	0x0a, 0x18, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x15, 0x70, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x74, 0x6c, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x63, 0x69, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x08,
	0x52, 0x66, 0x71, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x66, 0x71, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42,
	0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x70, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x75, 0x79, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x68, 0x74,
	0x6c, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x42,
	0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x58, 0x0a, 0x0f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x02, 0x32, 0xa8, 0x04, 0x0a, 0x03, 0x52, 0x66, 0x71, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x42, 0x75, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x66, 0x71, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x79, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x66, 0x71,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x66, 0x71, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66,
	0x6e, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x66, 0x71, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x66, 0x71, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x66, 0x71, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x37, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f,
	0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2f,
	0x72, 0x66, 0x71, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rfqrpc_rfq_proto_rawDescOnce sync.Once
	file_rfqrpc_rfq_proto_rawDescData = file_rfqrpc_rfq_proto_rawDesc
)

func file_rfqrpc_rfq_proto_rawDescGZIP() []byte {
	file_rfqrpc_rfq_proto_rawDescOnce.Do(func() {
		file_rfqrpc_rfq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rfqrpc_rfq_proto_rawDescData)
	})
	return file_rfqrpc_rfq_proto_rawDescData
}

var file_rfqrpc_rfq_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rfqrpc_rfq_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_rfqrpc_rfq_proto_goTypes = []interface{}{
	(QuoteRespStatus)(0),                    // 0: rfqrpc.QuoteRespStatus
	(*AssetSpecifier)(nil),                  // 1: rfqrpc.AssetSpecifier
	(*FixedPoint)(nil),                      // 2: rfqrpc.FixedPoint
	(*AddAssetBuyOrderRequest)(nil),         // 3: rfqrpc.AddAssetBuyOrderRequest
	(*AddAssetBuyOrderResponse)(nil),        // 4: rfqrpc.AddAssetBuyOrderResponse
	(*AddAssetSellOrderRequest)(nil),        // 5: rfqrpc.AddAssetSellOrderRequest
	(*AddAssetSellOrderResponse)(nil),       // 6: rfqrpc.AddAssetSellOrderResponse
	(*AddAssetSellOfferRequest)(nil),        // 7: rfqrpc.AddAssetSellOfferRequest
	(*AddAssetSellOfferResponse)(nil),       // 8: rfqrpc.AddAssetSellOfferResponse
	(*AddAssetBuyOfferRequest)(nil),         // 9: rfqrpc.AddAssetBuyOfferRequest
	(*AddAssetBuyOfferResponse)(nil),        // 10: rfqrpc.AddAssetBuyOfferResponse
	(*QueryPeerAcceptedQuotesRequest)(nil),  // 11: rfqrpc.QueryPeerAcceptedQuotesRequest
	(*PeerAcceptedBuyQuote)(nil),            // 12: rfqrpc.PeerAcceptedBuyQuote
	(*PeerAcceptedSellQuote)(nil),           // 13: rfqrpc.PeerAcceptedSellQuote
	(*InvalidQuoteResponse)(nil),            // 14: rfqrpc.InvalidQuoteResponse
	(*RejectedQuoteResponse)(nil),           // 15: rfqrpc.RejectedQuoteResponse
	(*QueryPeerAcceptedQuotesResponse)(nil), // 16: rfqrpc.QueryPeerAcceptedQuotesResponse
	(*SubscribeRfqEventNtfnsRequest)(nil),   // 17: rfqrpc.SubscribeRfqEventNtfnsRequest
	(*PeerAcceptedBuyQuoteEvent)(nil),       // 18: rfqrpc.PeerAcceptedBuyQuoteEvent
	(*PeerAcceptedSellQuoteEvent)(nil),      // 19: rfqrpc.PeerAcceptedSellQuoteEvent
	(*AcceptHtlcEvent)(nil),                 // 20: rfqrpc.AcceptHtlcEvent
	(*RfqEvent)(nil),                        // 21: rfqrpc.RfqEvent
}
var file_rfqrpc_rfq_proto_depIdxs = []int32{
	1,  // 0: rfqrpc.AddAssetBuyOrderRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	12, // 1: rfqrpc.AddAssetBuyOrderResponse.accepted_quote:type_name -> rfqrpc.PeerAcceptedBuyQuote
	14, // 2: rfqrpc.AddAssetBuyOrderResponse.invalid_quote:type_name -> rfqrpc.InvalidQuoteResponse
	15, // 3: rfqrpc.AddAssetBuyOrderResponse.rejected_quote:type_name -> rfqrpc.RejectedQuoteResponse
	1,  // 4: rfqrpc.AddAssetSellOrderRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	13, // 5: rfqrpc.AddAssetSellOrderResponse.accepted_quote:type_name -> rfqrpc.PeerAcceptedSellQuote
	14, // 6: rfqrpc.AddAssetSellOrderResponse.invalid_quote:type_name -> rfqrpc.InvalidQuoteResponse
	15, // 7: rfqrpc.AddAssetSellOrderResponse.rejected_quote:type_name -> rfqrpc.RejectedQuoteResponse
	1,  // 8: rfqrpc.AddAssetSellOfferRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	1,  // 9: rfqrpc.AddAssetBuyOfferRequest.asset_specifier:type_name -> rfqrpc.AssetSpecifier
	2,  // 10: rfqrpc.PeerAcceptedBuyQuote.ask_asset_rate:type_name -> rfqrpc.FixedPoint
	0,  // 11: rfqrpc.InvalidQuoteResponse.status:type_name -> rfqrpc.QuoteRespStatus
	12, // 12: rfqrpc.QueryPeerAcceptedQuotesResponse.buy_quotes:type_name -> rfqrpc.PeerAcceptedBuyQuote
	13, // 13: rfqrpc.QueryPeerAcceptedQuotesResponse.sell_quotes:type_name -> rfqrpc.PeerAcceptedSellQuote
	12, // 14: rfqrpc.PeerAcceptedBuyQuoteEvent.peer_accepted_buy_quote:type_name -> rfqrpc.PeerAcceptedBuyQuote
	13, // 15: rfqrpc.PeerAcceptedSellQuoteEvent.peer_accepted_sell_quote:type_name -> rfqrpc.PeerAcceptedSellQuote
	18, // 16: rfqrpc.RfqEvent.peer_accepted_buy_quote:type_name -> rfqrpc.PeerAcceptedBuyQuoteEvent
	19, // 17: rfqrpc.RfqEvent.peer_accepted_sell_quote:type_name -> rfqrpc.PeerAcceptedSellQuoteEvent
	20, // 18: rfqrpc.RfqEvent.accept_htlc:type_name -> rfqrpc.AcceptHtlcEvent
	3,  // 19: rfqrpc.Rfq.AddAssetBuyOrder:input_type -> rfqrpc.AddAssetBuyOrderRequest
	5,  // 20: rfqrpc.Rfq.AddAssetSellOrder:input_type -> rfqrpc.AddAssetSellOrderRequest
	7,  // 21: rfqrpc.Rfq.AddAssetSellOffer:input_type -> rfqrpc.AddAssetSellOfferRequest
	9,  // 22: rfqrpc.Rfq.AddAssetBuyOffer:input_type -> rfqrpc.AddAssetBuyOfferRequest
	11, // 23: rfqrpc.Rfq.QueryPeerAcceptedQuotes:input_type -> rfqrpc.QueryPeerAcceptedQuotesRequest
	17, // 24: rfqrpc.Rfq.SubscribeRfqEventNtfns:input_type -> rfqrpc.SubscribeRfqEventNtfnsRequest
	4,  // 25: rfqrpc.Rfq.AddAssetBuyOrder:output_type -> rfqrpc.AddAssetBuyOrderResponse
	6,  // 26: rfqrpc.Rfq.AddAssetSellOrder:output_type -> rfqrpc.AddAssetSellOrderResponse
	8,  // 27: rfqrpc.Rfq.AddAssetSellOffer:output_type -> rfqrpc.AddAssetSellOfferResponse
	10, // 28: rfqrpc.Rfq.AddAssetBuyOffer:output_type -> rfqrpc.AddAssetBuyOfferResponse
	16, // 29: rfqrpc.Rfq.QueryPeerAcceptedQuotes:output_type -> rfqrpc.QueryPeerAcceptedQuotesResponse
	21, // 30: rfqrpc.Rfq.SubscribeRfqEventNtfns:output_type -> rfqrpc.RfqEvent
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_rfqrpc_rfq_proto_init() }
func file_rfqrpc_rfq_proto_init() {
	if File_rfqrpc_rfq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rfqrpc_rfq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetBuyOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetBuyOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetSellOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetSellOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetSellOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetSellOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetBuyOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetBuyOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPeerAcceptedQuotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerAcceptedBuyQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerAcceptedSellQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectedQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPeerAcceptedQuotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRfqEventNtfnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerAcceptedBuyQuoteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerAcceptedSellQuoteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptHtlcEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfqrpc_rfq_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RfqEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rfqrpc_rfq_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AssetSpecifier_AssetId)(nil),
		(*AssetSpecifier_AssetIdStr)(nil),
		(*AssetSpecifier_GroupKey)(nil),
		(*AssetSpecifier_GroupKeyStr)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AddAssetBuyOrderResponse_AcceptedQuote)(nil),
		(*AddAssetBuyOrderResponse_InvalidQuote)(nil),
		(*AddAssetBuyOrderResponse_RejectedQuote)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AddAssetSellOrderResponse_AcceptedQuote)(nil),
		(*AddAssetSellOrderResponse_InvalidQuote)(nil),
		(*AddAssetSellOrderResponse_RejectedQuote)(nil),
	}
	file_rfqrpc_rfq_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*RfqEvent_PeerAcceptedBuyQuote)(nil),
		(*RfqEvent_PeerAcceptedSellQuote)(nil),
		(*RfqEvent_AcceptHtlc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rfqrpc_rfq_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rfqrpc_rfq_proto_goTypes,
		DependencyIndexes: file_rfqrpc_rfq_proto_depIdxs,
		EnumInfos:         file_rfqrpc_rfq_proto_enumTypes,
		MessageInfos:      file_rfqrpc_rfq_proto_msgTypes,
	}.Build()
	File_rfqrpc_rfq_proto = out.File
	file_rfqrpc_rfq_proto_rawDesc = nil
	file_rfqrpc_rfq_proto_goTypes = nil
	file_rfqrpc_rfq_proto_depIdxs = nil
}
