// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rfqrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RfqClient is the client API for Rfq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RfqClient interface {
	// tapcli: `rfq buyorder`
	// AddAssetBuyOrder is used to add a buy order for a specific asset. If a buy
	// order already exists for the asset, it will be updated.
	//
	// A buy order instructs the RFQ (Request For Quote) system to request a quote
	// from a peer for the acquisition of an asset.
	//
	// The normal use of a buy order is as follows:
	// 1. Alice, operating a wallet node, wants to receive a Tap asset as payment
	// by issuing a Lightning invoice.
	// 2. Alice has an asset channel established with Bob's edge node.
	// 3. Before issuing the invoice, Alice needs to agree on an exchange rate with
	// Bob, who will facilitate the asset transfer.
	// 4. To obtain the best exchange rate, Alice creates a buy order specifying
	// the desired asset.
	// 5. Alice's RFQ subsystem processes the buy order and sends buy requests to
	// relevant peers to find the best rate. In this example, Bob is the only
	// available peer.
	// 6. Once Bob provides a satisfactory quote, Alice accepts it.
	// 7. Alice issues the Lightning invoice, which Charlie will pay.
	// 8. Instead of paying Alice directly, Charlie pays Bob.
	// 9. Bob then forwards the agreed amount of the Tap asset to Alice over their
	// asset channel.
	AddAssetBuyOrder(ctx context.Context, in *AddAssetBuyOrderRequest, opts ...grpc.CallOption) (*AddAssetBuyOrderResponse, error)
	// tapcli: `rfq sellorder`
	// AddAssetSellOrder is used to add a sell order for a specific asset. If a
	// sell order already exists for the asset, it will be updated.
	AddAssetSellOrder(ctx context.Context, in *AddAssetSellOrderRequest, opts ...grpc.CallOption) (*AddAssetSellOrderResponse, error)
	// tapcli: `rfq selloffer`
	// AddAssetSellOffer is used to add a sell offer for a specific asset. If a
	// sell offer already exists for the asset, it will be updated.
	AddAssetSellOffer(ctx context.Context, in *AddAssetSellOfferRequest, opts ...grpc.CallOption) (*AddAssetSellOfferResponse, error)
	// tapcli: `rfq buyoffer`
	// AddAssetBuyOffer is used to add a buy offer for a specific asset. If a
	// buy offer already exists for the asset, it will be updated.
	//
	// A buy offer is used by the node to selectively accept or reject incoming
	// asset sell quote requests before price is considered.
	AddAssetBuyOffer(ctx context.Context, in *AddAssetBuyOfferRequest, opts ...grpc.CallOption) (*AddAssetBuyOfferResponse, error)
	// tapcli: `rfq acceptedquotes`
	// QueryPeerAcceptedQuotes is used to query for quotes that were requested by
	// our node and have been accepted our peers.
	QueryPeerAcceptedQuotes(ctx context.Context, in *QueryPeerAcceptedQuotesRequest, opts ...grpc.CallOption) (*QueryPeerAcceptedQuotesResponse, error)
	// SubscribeRfqEventNtfns is used to subscribe to RFQ events.
	SubscribeRfqEventNtfns(ctx context.Context, in *SubscribeRfqEventNtfnsRequest, opts ...grpc.CallOption) (Rfq_SubscribeRfqEventNtfnsClient, error)
	// tapcli: `rfq forwardinghistory`
	// QueryForwardingHistory is used to query the forwarding history of the node.
	// This includes all asset forwards that have been accepted and processed.
	QueryForwardingHistory(ctx context.Context, in *QueryForwardingHistoryRequest, opts ...grpc.CallOption) (*QueryForwardingHistoryResponse, error)
}

type rfqClient struct {
	cc grpc.ClientConnInterface
}

func NewRfqClient(cc grpc.ClientConnInterface) RfqClient {
	return &rfqClient{cc}
}

func (c *rfqClient) AddAssetBuyOrder(ctx context.Context, in *AddAssetBuyOrderRequest, opts ...grpc.CallOption) (*AddAssetBuyOrderResponse, error) {
	out := new(AddAssetBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/AddAssetBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) AddAssetSellOrder(ctx context.Context, in *AddAssetSellOrderRequest, opts ...grpc.CallOption) (*AddAssetSellOrderResponse, error) {
	out := new(AddAssetSellOrderResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/AddAssetSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) AddAssetSellOffer(ctx context.Context, in *AddAssetSellOfferRequest, opts ...grpc.CallOption) (*AddAssetSellOfferResponse, error) {
	out := new(AddAssetSellOfferResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/AddAssetSellOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) AddAssetBuyOffer(ctx context.Context, in *AddAssetBuyOfferRequest, opts ...grpc.CallOption) (*AddAssetBuyOfferResponse, error) {
	out := new(AddAssetBuyOfferResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/AddAssetBuyOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) QueryPeerAcceptedQuotes(ctx context.Context, in *QueryPeerAcceptedQuotesRequest, opts ...grpc.CallOption) (*QueryPeerAcceptedQuotesResponse, error) {
	out := new(QueryPeerAcceptedQuotesResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/QueryPeerAcceptedQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) SubscribeRfqEventNtfns(ctx context.Context, in *SubscribeRfqEventNtfnsRequest, opts ...grpc.CallOption) (Rfq_SubscribeRfqEventNtfnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rfq_ServiceDesc.Streams[0], "/rfqrpc.Rfq/SubscribeRfqEventNtfns", opts...)
	if err != nil {
		return nil, err
	}
	x := &rfqSubscribeRfqEventNtfnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rfq_SubscribeRfqEventNtfnsClient interface {
	Recv() (*RfqEvent, error)
	grpc.ClientStream
}

type rfqSubscribeRfqEventNtfnsClient struct {
	grpc.ClientStream
}

func (x *rfqSubscribeRfqEventNtfnsClient) Recv() (*RfqEvent, error) {
	m := new(RfqEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rfqClient) QueryForwardingHistory(ctx context.Context, in *QueryForwardingHistoryRequest, opts ...grpc.CallOption) (*QueryForwardingHistoryResponse, error) {
	out := new(QueryForwardingHistoryResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/QueryForwardingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RfqServer is the server API for Rfq service.
// All implementations must embed UnimplementedRfqServer
// for forward compatibility
type RfqServer interface {
	// tapcli: `rfq buyorder`
	// AddAssetBuyOrder is used to add a buy order for a specific asset. If a buy
	// order already exists for the asset, it will be updated.
	//
	// A buy order instructs the RFQ (Request For Quote) system to request a quote
	// from a peer for the acquisition of an asset.
	//
	// The normal use of a buy order is as follows:
	// 1. Alice, operating a wallet node, wants to receive a Tap asset as payment
	// by issuing a Lightning invoice.
	// 2. Alice has an asset channel established with Bob's edge node.
	// 3. Before issuing the invoice, Alice needs to agree on an exchange rate with
	// Bob, who will facilitate the asset transfer.
	// 4. To obtain the best exchange rate, Alice creates a buy order specifying
	// the desired asset.
	// 5. Alice's RFQ subsystem processes the buy order and sends buy requests to
	// relevant peers to find the best rate. In this example, Bob is the only
	// available peer.
	// 6. Once Bob provides a satisfactory quote, Alice accepts it.
	// 7. Alice issues the Lightning invoice, which Charlie will pay.
	// 8. Instead of paying Alice directly, Charlie pays Bob.
	// 9. Bob then forwards the agreed amount of the Tap asset to Alice over their
	// asset channel.
	AddAssetBuyOrder(context.Context, *AddAssetBuyOrderRequest) (*AddAssetBuyOrderResponse, error)
	// tapcli: `rfq sellorder`
	// AddAssetSellOrder is used to add a sell order for a specific asset. If a
	// sell order already exists for the asset, it will be updated.
	AddAssetSellOrder(context.Context, *AddAssetSellOrderRequest) (*AddAssetSellOrderResponse, error)
	// tapcli: `rfq selloffer`
	// AddAssetSellOffer is used to add a sell offer for a specific asset. If a
	// sell offer already exists for the asset, it will be updated.
	AddAssetSellOffer(context.Context, *AddAssetSellOfferRequest) (*AddAssetSellOfferResponse, error)
	// tapcli: `rfq buyoffer`
	// AddAssetBuyOffer is used to add a buy offer for a specific asset. If a
	// buy offer already exists for the asset, it will be updated.
	//
	// A buy offer is used by the node to selectively accept or reject incoming
	// asset sell quote requests before price is considered.
	AddAssetBuyOffer(context.Context, *AddAssetBuyOfferRequest) (*AddAssetBuyOfferResponse, error)
	// tapcli: `rfq acceptedquotes`
	// QueryPeerAcceptedQuotes is used to query for quotes that were requested by
	// our node and have been accepted our peers.
	QueryPeerAcceptedQuotes(context.Context, *QueryPeerAcceptedQuotesRequest) (*QueryPeerAcceptedQuotesResponse, error)
	// SubscribeRfqEventNtfns is used to subscribe to RFQ events.
	SubscribeRfqEventNtfns(*SubscribeRfqEventNtfnsRequest, Rfq_SubscribeRfqEventNtfnsServer) error
	// tapcli: `rfq forwardinghistory`
	// QueryForwardingHistory is used to query the forwarding history of the node.
	// This includes all asset forwards that have been accepted and processed.
	QueryForwardingHistory(context.Context, *QueryForwardingHistoryRequest) (*QueryForwardingHistoryResponse, error)
	mustEmbedUnimplementedRfqServer()
}

// UnimplementedRfqServer must be embedded to have forward compatible implementations.
type UnimplementedRfqServer struct {
}

func (UnimplementedRfqServer) AddAssetBuyOrder(context.Context, *AddAssetBuyOrderRequest) (*AddAssetBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetBuyOrder not implemented")
}
func (UnimplementedRfqServer) AddAssetSellOrder(context.Context, *AddAssetSellOrderRequest) (*AddAssetSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetSellOrder not implemented")
}
func (UnimplementedRfqServer) AddAssetSellOffer(context.Context, *AddAssetSellOfferRequest) (*AddAssetSellOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetSellOffer not implemented")
}
func (UnimplementedRfqServer) AddAssetBuyOffer(context.Context, *AddAssetBuyOfferRequest) (*AddAssetBuyOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetBuyOffer not implemented")
}
func (UnimplementedRfqServer) QueryPeerAcceptedQuotes(context.Context, *QueryPeerAcceptedQuotesRequest) (*QueryPeerAcceptedQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPeerAcceptedQuotes not implemented")
}
func (UnimplementedRfqServer) SubscribeRfqEventNtfns(*SubscribeRfqEventNtfnsRequest, Rfq_SubscribeRfqEventNtfnsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRfqEventNtfns not implemented")
}
func (UnimplementedRfqServer) QueryForwardingHistory(context.Context, *QueryForwardingHistoryRequest) (*QueryForwardingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryForwardingHistory not implemented")
}
func (UnimplementedRfqServer) mustEmbedUnimplementedRfqServer() {}

// UnsafeRfqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RfqServer will
// result in compilation errors.
type UnsafeRfqServer interface {
	mustEmbedUnimplementedRfqServer()
}

func RegisterRfqServer(s grpc.ServiceRegistrar, srv RfqServer) {
	s.RegisterService(&Rfq_ServiceDesc, srv)
}

func _Rfq_AddAssetBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetBuyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).AddAssetBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/AddAssetBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).AddAssetBuyOrder(ctx, req.(*AddAssetBuyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_AddAssetSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).AddAssetSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/AddAssetSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).AddAssetSellOrder(ctx, req.(*AddAssetSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_AddAssetSellOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetSellOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).AddAssetSellOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/AddAssetSellOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).AddAssetSellOffer(ctx, req.(*AddAssetSellOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_AddAssetBuyOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetBuyOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).AddAssetBuyOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/AddAssetBuyOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).AddAssetBuyOffer(ctx, req.(*AddAssetBuyOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_QueryPeerAcceptedQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPeerAcceptedQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).QueryPeerAcceptedQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/QueryPeerAcceptedQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).QueryPeerAcceptedQuotes(ctx, req.(*QueryPeerAcceptedQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_SubscribeRfqEventNtfns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRfqEventNtfnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RfqServer).SubscribeRfqEventNtfns(m, &rfqSubscribeRfqEventNtfnsServer{stream})
}

type Rfq_SubscribeRfqEventNtfnsServer interface {
	Send(*RfqEvent) error
	grpc.ServerStream
}

type rfqSubscribeRfqEventNtfnsServer struct {
	grpc.ServerStream
}

func (x *rfqSubscribeRfqEventNtfnsServer) Send(m *RfqEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Rfq_QueryForwardingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForwardingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).QueryForwardingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/QueryForwardingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).QueryForwardingHistory(ctx, req.(*QueryForwardingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rfq_ServiceDesc is the grpc.ServiceDesc for Rfq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rfq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfqrpc.Rfq",
	HandlerType: (*RfqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAssetBuyOrder",
			Handler:    _Rfq_AddAssetBuyOrder_Handler,
		},
		{
			MethodName: "AddAssetSellOrder",
			Handler:    _Rfq_AddAssetSellOrder_Handler,
		},
		{
			MethodName: "AddAssetSellOffer",
			Handler:    _Rfq_AddAssetSellOffer_Handler,
		},
		{
			MethodName: "AddAssetBuyOffer",
			Handler:    _Rfq_AddAssetBuyOffer_Handler,
		},
		{
			MethodName: "QueryPeerAcceptedQuotes",
			Handler:    _Rfq_QueryPeerAcceptedQuotes_Handler,
		},
		{
			MethodName: "QueryForwardingHistory",
			Handler:    _Rfq_QueryForwardingHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRfqEventNtfns",
			Handler:       _Rfq_SubscribeRfqEventNtfns_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rfqrpc/rfq.proto",
}
