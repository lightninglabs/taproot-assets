{
  "swagger": "2.0",
  "info": {
    "title": "assetwalletrpc/assetwallet.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AssetWallet"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taproot-assets/wallet/internal-key/next": {
      "post": {
        "summary": "NextInternalKey derives the next internal key for the given key family and\nstores it as an internal key in the database to make sure it is identified\nas a local key later on when importing proofs. While an internal key can\nalso be used as the internal key of a script key, it is recommended to use\nthe NextScriptKey RPC instead, to make sure the tweaked Taproot output key\nis also recognized as a local key.",
        "operationId": "AssetWallet_NextInternalKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextInternalKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextInternalKeyRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/internal-key/{internal_key}": {
      "get": {
        "summary": "QueryInternalKey returns the key descriptor for the given internal key.",
        "operationId": "AssetWallet_QueryInternalKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcQueryInternalKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "internal_key",
            "description": "The internal key to look for. This can either be the 32-byte x-only raw\ninternal key or the 33-byte raw internal key with the parity byte.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/ownership/prove": {
      "post": {
        "summary": "tapcli: `proofs proveownership`\nProveAssetOwnership creates an ownership proof embedded in an asset\ntransition proof. That ownership proof is a signed virtual transaction\nspending the asset with a valid witness to prove the prover owns the keys\nthat can spend the asset.",
        "operationId": "AssetWallet_ProveAssetOwnership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcProveAssetOwnershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcProveAssetOwnershipRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/ownership/verify": {
      "post": {
        "summary": "tapcli: `proofs verifyownership`\nVerifyAssetOwnership verifies the asset ownership proof embedded in the\ngiven transition proof of an asset and returns true if the proof is valid.",
        "operationId": "AssetWallet_VerifyAssetOwnership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcVerifyAssetOwnershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcVerifyAssetOwnershipRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/script-key/next": {
      "post": {
        "summary": "NextScriptKey derives the next script key (and its corresponding internal\nkey) and stores them both in the database to make sure they are identified\nas local keys later on when importing proofs.",
        "operationId": "AssetWallet_NextScriptKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextScriptKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcNextScriptKeyRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/script-key/{tweaked_script_key}": {
      "get": {
        "summary": "QueryScriptKey returns the full script key descriptor for the given tweaked\nscript key.",
        "operationId": "AssetWallet_QueryScriptKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcQueryScriptKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tweaked_script_key",
            "description": "The tweaked script key to look for. This can either be the 32-byte\nx-only tweaked script key or the 33-byte tweaked script key with the\nparity byte.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/utxo-lease/delete": {
      "post": {
        "summary": "RemoveUTXOLease removes the lease/lock/reservation of the given managed\nUTXO.",
        "operationId": "AssetWallet_RemoveUTXOLease",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcRemoveUTXOLeaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcRemoveUTXOLeaseRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/virtual-psbt/anchor": {
      "post": {
        "summary": "AnchorVirtualPsbts merges and then commits multiple virtual transactions in\na single BTC level anchor transaction. This RPC should be used if the BTC\nlevel anchor transaction of the assets to be spent are encumbered by a\nnormal key and don't require any special spending conditions. For any custom\nspending conditions on the BTC level, the two RPCs CommitVirtualPsbts and\nPublishAndLogTransfer should be used instead (which in combination do the\nsame as this RPC but allow for more flexibility).",
        "operationId": "AssetWallet_AnchorVirtualPsbts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taprpcSendAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcAnchorVirtualPsbtsRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/virtual-psbt/commit": {
      "post": {
        "summary": "CommitVirtualPsbts creates the output commitments and proofs for the given\nvirtual transactions by committing them to the BTC level anchor transaction.\nIn addition, the BTC level anchor transaction is funded and prepared up to\nthe point where it is ready to be signed.",
        "operationId": "AssetWallet_CommitVirtualPsbts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcCommitVirtualPsbtsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcCommitVirtualPsbtsRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/virtual-psbt/fund": {
      "post": {
        "summary": "FundVirtualPsbt selects inputs from the available asset commitments to fund\na virtual transaction matching the template.",
        "operationId": "AssetWallet_FundVirtualPsbt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcFundVirtualPsbtResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcFundVirtualPsbtRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/virtual-psbt/log-transfer": {
      "post": {
        "summary": "PublishAndLogTransfer accepts a fully committed and signed anchor\ntransaction and publishes it to the Bitcoin network. It also logs the\ntransfer of the given active and passive assets in the database and ships\nany outgoing proofs to the counterparties.",
        "operationId": "AssetWallet_PublishAndLogTransfer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taprpcSendAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcPublishAndLogRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    },
    "/v1/taproot-assets/wallet/virtual-psbt/sign": {
      "post": {
        "summary": "SignVirtualPsbt signs the inputs of a virtual transaction and prepares the\ncommitments of the inputs and outputs.",
        "operationId": "AssetWallet_SignVirtualPsbt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/assetwalletrpcSignVirtualPsbtResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/assetwalletrpcSignVirtualPsbtRequest"
            }
          }
        ],
        "tags": [
          "AssetWallet"
        ]
      }
    }
  },
  "definitions": {
    "assetwalletrpcAnchorVirtualPsbtsRequest": {
      "type": "object",
      "properties": {
        "virtual_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The list of virtual transactions that should be merged and committed to in\nthe BTC level anchor transaction."
        }
      }
    },
    "assetwalletrpcCommitVirtualPsbtsRequest": {
      "type": "object",
      "properties": {
        "virtual_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The list of virtual transactions that should be mapped to the given BTC\nlevel anchor transaction template. The virtual transactions are expected to\nbe signed (or use ASSET_VERSION_V1 with segregated witness to allow for\nsigning after committing) and ready to be committed to the anchor\ntransaction."
        },
        "passive_asset_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The list of passive virtual transactions that are anchored in the same BTC\nlevel anchor transaction inputs as the \"active\" assets above. These can be\nobtained by calling FundVirtualPsbt and using the passive assets returned.\nThe virtual transactions are expected to be signed (or use ASSET_VERSION_V1\nwith segregated witness to allow for signing after committing) and ready to\nbe committed to the anchor transaction.\nThe main difference to the \"active\" assets above is that the passive assets\nwill not get their own entry in the transfer table of the database, since\nthey are just carried along and not directly affected by the direct user\naction."
        },
        "anchor_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The template of the BTC level anchor transaction that the virtual\ntransactions should be mapped to. The template is expected to already\ncontain all asset related inputs and outputs corresponding to the virtual\ntransactions given above. This can be achieved by using\ntapfreighter.PrepareAnchoringTemplate for example."
        },
        "existing_output_index": {
          "type": "integer",
          "format": "int32",
          "description": "Use the existing output within the anchor PSBT with the specified\nindex as the change output. Any leftover change will be added to the\nalready specified amount of that output. To add a new change output to\nthe PSBT, set the \"add\" field below instead."
        },
        "add": {
          "type": "boolean",
          "description": "Add a new P2TR change output to the PSBT if required."
        },
        "target_conf": {
          "type": "integer",
          "format": "int64",
          "description": "The target number of blocks that the transaction should be confirmed in."
        },
        "sat_per_vbyte": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate, expressed in sat/vbyte, that should be used to fund the\nBTC level anchor transaction."
        }
      }
    },
    "assetwalletrpcCommitVirtualPsbtsResponse": {
      "type": "object",
      "properties": {
        "anchor_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded BTC level anchor transaction with all outputs updated to commit\nto the virtual transactions given. The transaction is ready to be signed,\nunless some of the asset inputs don't belong to this daemon, in which case\nthe anchor input derivation info must be added to those inputs first."
        },
        "virtual_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The updated virtual transactions that now contain the state transition\nproofs for being committed to the BTC level anchor transaction above. If the\nassets in the virtual transaction outputs are ASSET_VERSION_V1 and not yet\nsigned, then the proofs need to be updated to include the witness before\nthey become fully valid."
        },
        "passive_asset_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The updated passive virtual transactions that were committed to the same BTC\nlevel anchor transaction as the \"active\" virtual transactions given. If the\nassets in the virtual transaction outputs are ASSET_VERSION_V1 and not yet\nsigned, then the proofs need to be updated to include the witness before\nthey become fully valid."
        },
        "change_output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the (added) change output or -1 if no change was left over."
        },
        "lnd_locked_utxos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taprpcOutPoint"
          },
          "description": "The list of UTXO lock leases that were acquired for the inputs in the funded\nPSBT packet from lnd. Only inputs added to the PSBT by this RPC are locked,\ninputs that were already present in the PSBT are not locked."
        }
      }
    },
    "assetwalletrpcFundVirtualPsbtRequest": {
      "type": "object",
      "properties": {
        "psbt": {
          "type": "string",
          "format": "byte",
          "description": "Use an existing PSBT packet as the template for the funded PSBT."
        },
        "raw": {
          "$ref": "#/definitions/assetwalletrpcTxTemplate",
          "description": "Use the asset outputs and optional asset inputs from this raw template."
        }
      }
    },
    "assetwalletrpcFundVirtualPsbtResponse": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded but not yet signed virtual PSBT packet."
        },
        "change_output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the added change output or -1 if no change was left over."
        },
        "passive_asset_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The list of passive virtual transactions that are anchored in the same BTC\nlevel anchor transaction inputs as the funded \"active\" asset above. These\nassets can be ignored when using the AnchorVirtualPsbts RPC, since they are\nretrieved, signed and committed automatically in that method. But the\npassive assets have to be included in the CommitVirtualPsbts RPC which is\nused when custom BTC level anchor transactions are created.\nThe main difference to the \"active\" asset above is that the passive assets\nwill not get their own entry in the transfer table of the database, since\nthey are just carried along and not directly affected by the direct user\naction."
        }
      }
    },
    "assetwalletrpcNextInternalKeyRequest": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "assetwalletrpcNextInternalKeyResponse": {
      "type": "object",
      "properties": {
        "internal_key": {
          "$ref": "#/definitions/taprpcKeyDescriptor"
        }
      }
    },
    "assetwalletrpcNextScriptKeyRequest": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "assetwalletrpcNextScriptKeyResponse": {
      "type": "object",
      "properties": {
        "script_key": {
          "$ref": "#/definitions/taprpcScriptKey"
        }
      }
    },
    "assetwalletrpcPrevId": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/taprpcOutPoint",
          "description": "The bitcoin anchor output on chain that contains the input asset."
        },
        "id": {
          "type": "string",
          "format": "byte",
          "description": "The asset ID of the previous asset tree."
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The tweaked Taproot output key committing to the possible spending\nconditions of the asset."
        }
      }
    },
    "assetwalletrpcProveAssetOwnershipRequest": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string",
          "format": "byte"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        },
        "outpoint": {
          "$ref": "#/definitions/taprpcOutPoint"
        }
      }
    },
    "assetwalletrpcProveAssetOwnershipResponse": {
      "type": "object",
      "properties": {
        "proof_with_witness": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "assetwalletrpcPublishAndLogRequest": {
      "type": "object",
      "properties": {
        "anchor_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded BTC level anchor transaction with all outputs updated to commit\nto the virtual transactions given. The transaction is ready to be signed,\nunless some of the asset inputs don't belong to this daemon, in which case\nthe anchor input derivation info must be added to those inputs first."
        },
        "virtual_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The updated virtual transactions that contain the state transition proofs\nof being committed to the BTC level anchor transaction above."
        },
        "passive_asset_psbts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The updated passive virtual transactions that contain the state transition\nproofs of being committed to the BTC level anchor transaction above."
        },
        "change_output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the (added) change output or -1 if no change was left over."
        },
        "lnd_locked_utxos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taprpcOutPoint"
          },
          "description": "The list of UTXO lock leases that were acquired for the inputs in the funded\nPSBT packet from lnd. Only inputs added to the PSBT by this RPC are locked,\ninputs that were already present in the PSBT are not locked."
        }
      }
    },
    "assetwalletrpcQueryInternalKeyResponse": {
      "type": "object",
      "properties": {
        "internal_key": {
          "$ref": "#/definitions/taprpcKeyDescriptor"
        }
      }
    },
    "assetwalletrpcQueryScriptKeyResponse": {
      "type": "object",
      "properties": {
        "script_key": {
          "$ref": "#/definitions/taprpcScriptKey"
        }
      }
    },
    "assetwalletrpcRemoveUTXOLeaseRequest": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/taprpcOutPoint",
          "description": "The outpoint of the UTXO to remove the lease for."
        }
      }
    },
    "assetwalletrpcRemoveUTXOLeaseResponse": {
      "type": "object"
    },
    "assetwalletrpcSignVirtualPsbtRequest": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The PSBT of the virtual transaction that should be signed. The PSBT must\ncontain all required inputs, outputs, UTXO data and custom fields required\nto identify the signing key."
        }
      }
    },
    "assetwalletrpcSignVirtualPsbtResponse": {
      "type": "object",
      "properties": {
        "signed_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The signed virtual transaction in PSBT format."
        },
        "signed_inputs": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The indices of signed inputs."
        }
      }
    },
    "assetwalletrpcTxTemplate": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/assetwalletrpcPrevId"
          },
          "description": "An optional list of inputs to use. Every input must be an asset UTXO known\nto the wallet. The sum of all inputs must be greater than or equal to the\nsum of all outputs.\n\nIf no inputs are specified, asset coin selection will be performed instead\nand inputs of sufficient value will be added to the resulting PSBT."
        },
        "recipients": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "description": "A map of all Taproot Asset addresses mapped to the anchor transaction's\noutput index that should be sent to."
        }
      }
    },
    "assetwalletrpcVerifyAssetOwnershipRequest": {
      "type": "object",
      "properties": {
        "proof_with_witness": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "assetwalletrpcVerifyAssetOwnershipResponse": {
      "type": "object",
      "properties": {
        "valid_proof": {
          "type": "boolean"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "taprpcAssetTransfer": {
      "type": "object",
      "properties": {
        "transfer_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "anchor_tx_hash": {
          "type": "string",
          "format": "byte",
          "description": "The new transaction that commits to the set of Taproot Assets found\nat the above new anchor point."
        },
        "anchor_tx_height_hint": {
          "type": "integer",
          "format": "int64"
        },
        "anchor_tx_chain_fees": {
          "type": "string",
          "format": "int64"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taprpcTransferInput"
          },
          "description": "Describes the set of spent assets."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taprpcTransferOutput"
          },
          "description": "Describes the set of newly created asset outputs."
        }
      }
    },
    "taprpcAssetVersion": {
      "type": "string",
      "enum": [
        "ASSET_VERSION_V0",
        "ASSET_VERSION_V1"
      ],
      "default": "ASSET_VERSION_V0",
      "description": " - ASSET_VERSION_V0: ASSET_VERSION_V0 is the default asset version. This version will include\nthe witness vector in the leaf for a tap commitment.\n - ASSET_VERSION_V1: ASSET_VERSION_V1 is the asset version that leaves out the witness vector\nfrom the MS-SMT leaf encoding."
    },
    "taprpcKeyDescriptor": {
      "type": "object",
      "properties": {
        "raw_key_bytes": {
          "type": "string",
          "format": "byte",
          "description": "The raw bytes of the key being identified."
        },
        "key_loc": {
          "$ref": "#/definitions/taprpcKeyLocator",
          "description": "The key locator that identifies which key to use for signing."
        }
      }
    },
    "taprpcKeyLocator": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int32",
          "description": "The family of key being identified."
        },
        "key_index": {
          "type": "integer",
          "format": "int32",
          "description": "The precise index of the key being identified."
        }
      }
    },
    "taprpcOutPoint": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes representing the transaction id."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output on the transaction."
        }
      }
    },
    "taprpcOutputType": {
      "type": "string",
      "enum": [
        "OUTPUT_TYPE_SIMPLE",
        "OUTPUT_TYPE_SPLIT_ROOT"
      ],
      "default": "OUTPUT_TYPE_SIMPLE",
      "description": " - OUTPUT_TYPE_SIMPLE: OUTPUT_TYPE_SIMPLE is a plain full-value or split output that is not a\nsplit root and does not carry passive assets. In case of a split, the\nasset of this output has a split commitment.\n - OUTPUT_TYPE_SPLIT_ROOT: OUTPUT_TYPE_SPLIT_ROOT is a split root output that carries the change\nfrom a split or a tombstone from a non-interactive full value send\noutput. In either case, the asset of this output has a tx witness."
    },
    "taprpcScriptKey": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte",
          "description": "The full Taproot output key the asset is locked to. This is either a BIP-86\nkey if the tap_tweak below is empty, or a key with the tap tweak applied to\nit."
        },
        "key_desc": {
          "$ref": "#/definitions/taprpcKeyDescriptor",
          "description": "The key descriptor describing the internal key of the above Taproot key."
        },
        "tap_tweak": {
          "type": "string",
          "format": "byte",
          "description": "The optional Taproot tweak to apply to the above internal key. If this is\nempty then a BIP-86 style tweak is applied to the internal key."
        }
      }
    },
    "taprpcSendAssetResponse": {
      "type": "object",
      "properties": {
        "transfer": {
          "$ref": "#/definitions/taprpcAssetTransfer"
        }
      }
    },
    "taprpcTransferInput": {
      "type": "object",
      "properties": {
        "anchor_point": {
          "type": "string",
          "description": "The old/current location of the Taproot Asset commitment that was spent\nas an input."
        },
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The ID of the asset that was spent."
        },
        "script_key": {
          "type": "string",
          "format": "byte",
          "description": "The script key of the asset that was spent."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of the asset that was spent."
        }
      }
    },
    "taprpcTransferOutput": {
      "type": "object",
      "properties": {
        "anchor": {
          "$ref": "#/definitions/taprpcTransferOutputAnchor"
        },
        "script_key": {
          "type": "string",
          "format": "byte"
        },
        "script_key_is_local": {
          "type": "boolean"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "new_proof_blob": {
          "type": "string",
          "format": "byte",
          "description": "The new individual transition proof (not a full proof file) that proves\nthe inclusion of the new asset within the new AnchorTx."
        },
        "split_commit_root_hash": {
          "type": "string",
          "format": "byte"
        },
        "output_type": {
          "$ref": "#/definitions/taprpcOutputType"
        },
        "asset_version": {
          "$ref": "#/definitions/taprpcAssetVersion"
        }
      }
    },
    "taprpcTransferOutputAnchor": {
      "type": "object",
      "properties": {
        "outpoint": {
          "type": "string",
          "description": "The new location of the Taproot Asset commitment that was created on\nchain."
        },
        "value": {
          "type": "string",
          "format": "int64"
        },
        "internal_key": {
          "type": "string",
          "format": "byte"
        },
        "taproot_asset_root": {
          "type": "string",
          "format": "byte"
        },
        "merkle_root": {
          "type": "string",
          "format": "byte"
        },
        "tapscript_sibling": {
          "type": "string",
          "format": "byte"
        },
        "num_passive_assets": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}
