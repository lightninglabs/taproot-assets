// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: assetwalletrpc/assetwallet.proto

package assetwalletrpc

import (
	context "context"
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetWallet_FundVirtualPsbt_FullMethodName       = "/assetwalletrpc.AssetWallet/FundVirtualPsbt"
	AssetWallet_SignVirtualPsbt_FullMethodName       = "/assetwalletrpc.AssetWallet/SignVirtualPsbt"
	AssetWallet_AnchorVirtualPsbts_FullMethodName    = "/assetwalletrpc.AssetWallet/AnchorVirtualPsbts"
	AssetWallet_CommitVirtualPsbts_FullMethodName    = "/assetwalletrpc.AssetWallet/CommitVirtualPsbts"
	AssetWallet_PublishAndLogTransfer_FullMethodName = "/assetwalletrpc.AssetWallet/PublishAndLogTransfer"
	AssetWallet_NextInternalKey_FullMethodName       = "/assetwalletrpc.AssetWallet/NextInternalKey"
	AssetWallet_NextScriptKey_FullMethodName         = "/assetwalletrpc.AssetWallet/NextScriptKey"
	AssetWallet_QueryInternalKey_FullMethodName      = "/assetwalletrpc.AssetWallet/QueryInternalKey"
	AssetWallet_QueryScriptKey_FullMethodName        = "/assetwalletrpc.AssetWallet/QueryScriptKey"
	AssetWallet_ProveAssetOwnership_FullMethodName   = "/assetwalletrpc.AssetWallet/ProveAssetOwnership"
	AssetWallet_VerifyAssetOwnership_FullMethodName  = "/assetwalletrpc.AssetWallet/VerifyAssetOwnership"
	AssetWallet_RemoveUTXOLease_FullMethodName       = "/assetwalletrpc.AssetWallet/RemoveUTXOLease"
	AssetWallet_DeclareScriptKey_FullMethodName      = "/assetwalletrpc.AssetWallet/DeclareScriptKey"
)

// AssetWalletClient is the client API for AssetWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetWalletClient interface {
	// FundVirtualPsbt selects inputs from the available asset commitments to fund
	// a virtual transaction matching the template.
	FundVirtualPsbt(ctx context.Context, in *FundVirtualPsbtRequest, opts ...grpc.CallOption) (*FundVirtualPsbtResponse, error)
	// SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
	// commitments of the inputs and outputs.
	SignVirtualPsbt(ctx context.Context, in *SignVirtualPsbtRequest, opts ...grpc.CallOption) (*SignVirtualPsbtResponse, error)
	// AnchorVirtualPsbts merges and then commits multiple virtual transactions in
	// a single BTC level anchor transaction. This RPC should be used if the BTC
	// level anchor transaction of the assets to be spent are encumbered by a
	// normal key and don't require any special spending conditions. For any custom
	// spending conditions on the BTC level, the two RPCs CommitVirtualPsbts and
	// PublishAndLogTransfer should be used instead (which in combination do the
	// same as this RPC but allow for more flexibility).
	AnchorVirtualPsbts(ctx context.Context, in *AnchorVirtualPsbtsRequest, opts ...grpc.CallOption) (*taprpc.SendAssetResponse, error)
	// CommitVirtualPsbts creates the output commitments and proofs for the given
	// virtual transactions by committing them to the BTC level anchor transaction.
	// In addition, the BTC level anchor transaction is funded and prepared up to
	// the point where it is ready to be signed.
	CommitVirtualPsbts(ctx context.Context, in *CommitVirtualPsbtsRequest, opts ...grpc.CallOption) (*CommitVirtualPsbtsResponse, error)
	// PublishAndLogTransfer accepts a fully committed and signed anchor
	// transaction and publishes it to the Bitcoin network. It also logs the
	// transfer of the given active and passive assets in the database and ships
	// any outgoing proofs to the counterparties.
	PublishAndLogTransfer(ctx context.Context, in *PublishAndLogRequest, opts ...grpc.CallOption) (*taprpc.SendAssetResponse, error)
	// NextInternalKey derives the next internal key for the given key family and
	// stores it as an internal key in the database to make sure it is identified
	// as a local key later on when importing proofs. While an internal key can
	// also be used as the internal key of a script key, it is recommended to use
	// the NextScriptKey RPC instead, to make sure the tweaked Taproot output key
	// is also recognized as a local key.
	NextInternalKey(ctx context.Context, in *NextInternalKeyRequest, opts ...grpc.CallOption) (*NextInternalKeyResponse, error)
	// NextScriptKey derives the next script key (and its corresponding internal
	// key) and stores them both in the database to make sure they are identified
	// as local keys later on when importing proofs.
	NextScriptKey(ctx context.Context, in *NextScriptKeyRequest, opts ...grpc.CallOption) (*NextScriptKeyResponse, error)
	// QueryInternalKey returns the key descriptor for the given internal key.
	QueryInternalKey(ctx context.Context, in *QueryInternalKeyRequest, opts ...grpc.CallOption) (*QueryInternalKeyResponse, error)
	// QueryScriptKey returns the full script key descriptor for the given tweaked
	// script key.
	QueryScriptKey(ctx context.Context, in *QueryScriptKeyRequest, opts ...grpc.CallOption) (*QueryScriptKeyResponse, error)
	// tapcli: `proofs proveownership`
	// ProveAssetOwnership creates an ownership proof embedded in an asset
	// transition proof. That ownership proof is a signed virtual transaction
	// spending the asset with a valid witness to prove the prover owns the keys
	// that can spend the asset.
	ProveAssetOwnership(ctx context.Context, in *ProveAssetOwnershipRequest, opts ...grpc.CallOption) (*ProveAssetOwnershipResponse, error)
	// tapcli: `proofs verifyownership`
	// VerifyAssetOwnership verifies the asset ownership proof embedded in the
	// given transition proof of an asset and returns true if the proof is valid.
	VerifyAssetOwnership(ctx context.Context, in *VerifyAssetOwnershipRequest, opts ...grpc.CallOption) (*VerifyAssetOwnershipResponse, error)
	// RemoveUTXOLease removes the lease/lock/reservation of the given managed
	// UTXO.
	RemoveUTXOLease(ctx context.Context, in *RemoveUTXOLeaseRequest, opts ...grpc.CallOption) (*RemoveUTXOLeaseResponse, error)
	// DeclareScriptKey declares a new script key to the wallet. This is useful
	// when the script key contains scripts, which would mean it wouldn't be
	// recognized by the wallet automatically. Declaring a script key will make any
	// assets sent to the script key be recognized as being local assets.
	DeclareScriptKey(ctx context.Context, in *DeclareScriptKeyRequest, opts ...grpc.CallOption) (*DeclareScriptKeyResponse, error)
}

type assetWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetWalletClient(cc grpc.ClientConnInterface) AssetWalletClient {
	return &assetWalletClient{cc}
}

func (c *assetWalletClient) FundVirtualPsbt(ctx context.Context, in *FundVirtualPsbtRequest, opts ...grpc.CallOption) (*FundVirtualPsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundVirtualPsbtResponse)
	err := c.cc.Invoke(ctx, AssetWallet_FundVirtualPsbt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) SignVirtualPsbt(ctx context.Context, in *SignVirtualPsbtRequest, opts ...grpc.CallOption) (*SignVirtualPsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignVirtualPsbtResponse)
	err := c.cc.Invoke(ctx, AssetWallet_SignVirtualPsbt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) AnchorVirtualPsbts(ctx context.Context, in *AnchorVirtualPsbtsRequest, opts ...grpc.CallOption) (*taprpc.SendAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(taprpc.SendAssetResponse)
	err := c.cc.Invoke(ctx, AssetWallet_AnchorVirtualPsbts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) CommitVirtualPsbts(ctx context.Context, in *CommitVirtualPsbtsRequest, opts ...grpc.CallOption) (*CommitVirtualPsbtsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitVirtualPsbtsResponse)
	err := c.cc.Invoke(ctx, AssetWallet_CommitVirtualPsbts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) PublishAndLogTransfer(ctx context.Context, in *PublishAndLogRequest, opts ...grpc.CallOption) (*taprpc.SendAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(taprpc.SendAssetResponse)
	err := c.cc.Invoke(ctx, AssetWallet_PublishAndLogTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) NextInternalKey(ctx context.Context, in *NextInternalKeyRequest, opts ...grpc.CallOption) (*NextInternalKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextInternalKeyResponse)
	err := c.cc.Invoke(ctx, AssetWallet_NextInternalKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) NextScriptKey(ctx context.Context, in *NextScriptKeyRequest, opts ...grpc.CallOption) (*NextScriptKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextScriptKeyResponse)
	err := c.cc.Invoke(ctx, AssetWallet_NextScriptKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) QueryInternalKey(ctx context.Context, in *QueryInternalKeyRequest, opts ...grpc.CallOption) (*QueryInternalKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryInternalKeyResponse)
	err := c.cc.Invoke(ctx, AssetWallet_QueryInternalKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) QueryScriptKey(ctx context.Context, in *QueryScriptKeyRequest, opts ...grpc.CallOption) (*QueryScriptKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryScriptKeyResponse)
	err := c.cc.Invoke(ctx, AssetWallet_QueryScriptKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) ProveAssetOwnership(ctx context.Context, in *ProveAssetOwnershipRequest, opts ...grpc.CallOption) (*ProveAssetOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProveAssetOwnershipResponse)
	err := c.cc.Invoke(ctx, AssetWallet_ProveAssetOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) VerifyAssetOwnership(ctx context.Context, in *VerifyAssetOwnershipRequest, opts ...grpc.CallOption) (*VerifyAssetOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAssetOwnershipResponse)
	err := c.cc.Invoke(ctx, AssetWallet_VerifyAssetOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) RemoveUTXOLease(ctx context.Context, in *RemoveUTXOLeaseRequest, opts ...grpc.CallOption) (*RemoveUTXOLeaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUTXOLeaseResponse)
	err := c.cc.Invoke(ctx, AssetWallet_RemoveUTXOLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetWalletClient) DeclareScriptKey(ctx context.Context, in *DeclareScriptKeyRequest, opts ...grpc.CallOption) (*DeclareScriptKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeclareScriptKeyResponse)
	err := c.cc.Invoke(ctx, AssetWallet_DeclareScriptKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetWalletServer is the server API for AssetWallet service.
// All implementations must embed UnimplementedAssetWalletServer
// for forward compatibility.
type AssetWalletServer interface {
	// FundVirtualPsbt selects inputs from the available asset commitments to fund
	// a virtual transaction matching the template.
	FundVirtualPsbt(context.Context, *FundVirtualPsbtRequest) (*FundVirtualPsbtResponse, error)
	// SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
	// commitments of the inputs and outputs.
	SignVirtualPsbt(context.Context, *SignVirtualPsbtRequest) (*SignVirtualPsbtResponse, error)
	// AnchorVirtualPsbts merges and then commits multiple virtual transactions in
	// a single BTC level anchor transaction. This RPC should be used if the BTC
	// level anchor transaction of the assets to be spent are encumbered by a
	// normal key and don't require any special spending conditions. For any custom
	// spending conditions on the BTC level, the two RPCs CommitVirtualPsbts and
	// PublishAndLogTransfer should be used instead (which in combination do the
	// same as this RPC but allow for more flexibility).
	AnchorVirtualPsbts(context.Context, *AnchorVirtualPsbtsRequest) (*taprpc.SendAssetResponse, error)
	// CommitVirtualPsbts creates the output commitments and proofs for the given
	// virtual transactions by committing them to the BTC level anchor transaction.
	// In addition, the BTC level anchor transaction is funded and prepared up to
	// the point where it is ready to be signed.
	CommitVirtualPsbts(context.Context, *CommitVirtualPsbtsRequest) (*CommitVirtualPsbtsResponse, error)
	// PublishAndLogTransfer accepts a fully committed and signed anchor
	// transaction and publishes it to the Bitcoin network. It also logs the
	// transfer of the given active and passive assets in the database and ships
	// any outgoing proofs to the counterparties.
	PublishAndLogTransfer(context.Context, *PublishAndLogRequest) (*taprpc.SendAssetResponse, error)
	// NextInternalKey derives the next internal key for the given key family and
	// stores it as an internal key in the database to make sure it is identified
	// as a local key later on when importing proofs. While an internal key can
	// also be used as the internal key of a script key, it is recommended to use
	// the NextScriptKey RPC instead, to make sure the tweaked Taproot output key
	// is also recognized as a local key.
	NextInternalKey(context.Context, *NextInternalKeyRequest) (*NextInternalKeyResponse, error)
	// NextScriptKey derives the next script key (and its corresponding internal
	// key) and stores them both in the database to make sure they are identified
	// as local keys later on when importing proofs.
	NextScriptKey(context.Context, *NextScriptKeyRequest) (*NextScriptKeyResponse, error)
	// QueryInternalKey returns the key descriptor for the given internal key.
	QueryInternalKey(context.Context, *QueryInternalKeyRequest) (*QueryInternalKeyResponse, error)
	// QueryScriptKey returns the full script key descriptor for the given tweaked
	// script key.
	QueryScriptKey(context.Context, *QueryScriptKeyRequest) (*QueryScriptKeyResponse, error)
	// tapcli: `proofs proveownership`
	// ProveAssetOwnership creates an ownership proof embedded in an asset
	// transition proof. That ownership proof is a signed virtual transaction
	// spending the asset with a valid witness to prove the prover owns the keys
	// that can spend the asset.
	ProveAssetOwnership(context.Context, *ProveAssetOwnershipRequest) (*ProveAssetOwnershipResponse, error)
	// tapcli: `proofs verifyownership`
	// VerifyAssetOwnership verifies the asset ownership proof embedded in the
	// given transition proof of an asset and returns true if the proof is valid.
	VerifyAssetOwnership(context.Context, *VerifyAssetOwnershipRequest) (*VerifyAssetOwnershipResponse, error)
	// RemoveUTXOLease removes the lease/lock/reservation of the given managed
	// UTXO.
	RemoveUTXOLease(context.Context, *RemoveUTXOLeaseRequest) (*RemoveUTXOLeaseResponse, error)
	// DeclareScriptKey declares a new script key to the wallet. This is useful
	// when the script key contains scripts, which would mean it wouldn't be
	// recognized by the wallet automatically. Declaring a script key will make any
	// assets sent to the script key be recognized as being local assets.
	DeclareScriptKey(context.Context, *DeclareScriptKeyRequest) (*DeclareScriptKeyResponse, error)
	mustEmbedUnimplementedAssetWalletServer()
}

// UnimplementedAssetWalletServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetWalletServer struct{}

func (UnimplementedAssetWalletServer) FundVirtualPsbt(context.Context, *FundVirtualPsbtRequest) (*FundVirtualPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundVirtualPsbt not implemented")
}
func (UnimplementedAssetWalletServer) SignVirtualPsbt(context.Context, *SignVirtualPsbtRequest) (*SignVirtualPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignVirtualPsbt not implemented")
}
func (UnimplementedAssetWalletServer) AnchorVirtualPsbts(context.Context, *AnchorVirtualPsbtsRequest) (*taprpc.SendAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorVirtualPsbts not implemented")
}
func (UnimplementedAssetWalletServer) CommitVirtualPsbts(context.Context, *CommitVirtualPsbtsRequest) (*CommitVirtualPsbtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVirtualPsbts not implemented")
}
func (UnimplementedAssetWalletServer) PublishAndLogTransfer(context.Context, *PublishAndLogRequest) (*taprpc.SendAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAndLogTransfer not implemented")
}
func (UnimplementedAssetWalletServer) NextInternalKey(context.Context, *NextInternalKeyRequest) (*NextInternalKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextInternalKey not implemented")
}
func (UnimplementedAssetWalletServer) NextScriptKey(context.Context, *NextScriptKeyRequest) (*NextScriptKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextScriptKey not implemented")
}
func (UnimplementedAssetWalletServer) QueryInternalKey(context.Context, *QueryInternalKeyRequest) (*QueryInternalKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInternalKey not implemented")
}
func (UnimplementedAssetWalletServer) QueryScriptKey(context.Context, *QueryScriptKeyRequest) (*QueryScriptKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryScriptKey not implemented")
}
func (UnimplementedAssetWalletServer) ProveAssetOwnership(context.Context, *ProveAssetOwnershipRequest) (*ProveAssetOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveAssetOwnership not implemented")
}
func (UnimplementedAssetWalletServer) VerifyAssetOwnership(context.Context, *VerifyAssetOwnershipRequest) (*VerifyAssetOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAssetOwnership not implemented")
}
func (UnimplementedAssetWalletServer) RemoveUTXOLease(context.Context, *RemoveUTXOLeaseRequest) (*RemoveUTXOLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUTXOLease not implemented")
}
func (UnimplementedAssetWalletServer) DeclareScriptKey(context.Context, *DeclareScriptKeyRequest) (*DeclareScriptKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclareScriptKey not implemented")
}
func (UnimplementedAssetWalletServer) mustEmbedUnimplementedAssetWalletServer() {}
func (UnimplementedAssetWalletServer) testEmbeddedByValue()                     {}

// UnsafeAssetWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetWalletServer will
// result in compilation errors.
type UnsafeAssetWalletServer interface {
	mustEmbedUnimplementedAssetWalletServer()
}

func RegisterAssetWalletServer(s grpc.ServiceRegistrar, srv AssetWalletServer) {
	// If the following call pancis, it indicates UnimplementedAssetWalletServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetWallet_ServiceDesc, srv)
}

func _AssetWallet_FundVirtualPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundVirtualPsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).FundVirtualPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_FundVirtualPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).FundVirtualPsbt(ctx, req.(*FundVirtualPsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_SignVirtualPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignVirtualPsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).SignVirtualPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_SignVirtualPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).SignVirtualPsbt(ctx, req.(*SignVirtualPsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_AnchorVirtualPsbts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorVirtualPsbtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).AnchorVirtualPsbts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_AnchorVirtualPsbts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).AnchorVirtualPsbts(ctx, req.(*AnchorVirtualPsbtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_CommitVirtualPsbts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVirtualPsbtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).CommitVirtualPsbts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_CommitVirtualPsbts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).CommitVirtualPsbts(ctx, req.(*CommitVirtualPsbtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_PublishAndLogTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAndLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).PublishAndLogTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_PublishAndLogTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).PublishAndLogTransfer(ctx, req.(*PublishAndLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_NextInternalKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextInternalKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).NextInternalKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_NextInternalKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).NextInternalKey(ctx, req.(*NextInternalKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_NextScriptKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextScriptKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).NextScriptKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_NextScriptKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).NextScriptKey(ctx, req.(*NextScriptKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_QueryInternalKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInternalKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).QueryInternalKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_QueryInternalKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).QueryInternalKey(ctx, req.(*QueryInternalKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_QueryScriptKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScriptKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).QueryScriptKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_QueryScriptKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).QueryScriptKey(ctx, req.(*QueryScriptKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_ProveAssetOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveAssetOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).ProveAssetOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_ProveAssetOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).ProveAssetOwnership(ctx, req.(*ProveAssetOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_VerifyAssetOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAssetOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).VerifyAssetOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_VerifyAssetOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).VerifyAssetOwnership(ctx, req.(*VerifyAssetOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_RemoveUTXOLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUTXOLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).RemoveUTXOLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_RemoveUTXOLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).RemoveUTXOLease(ctx, req.(*RemoveUTXOLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetWallet_DeclareScriptKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclareScriptKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetWalletServer).DeclareScriptKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetWallet_DeclareScriptKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetWalletServer).DeclareScriptKey(ctx, req.(*DeclareScriptKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetWallet_ServiceDesc is the grpc.ServiceDesc for AssetWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assetwalletrpc.AssetWallet",
	HandlerType: (*AssetWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundVirtualPsbt",
			Handler:    _AssetWallet_FundVirtualPsbt_Handler,
		},
		{
			MethodName: "SignVirtualPsbt",
			Handler:    _AssetWallet_SignVirtualPsbt_Handler,
		},
		{
			MethodName: "AnchorVirtualPsbts",
			Handler:    _AssetWallet_AnchorVirtualPsbts_Handler,
		},
		{
			MethodName: "CommitVirtualPsbts",
			Handler:    _AssetWallet_CommitVirtualPsbts_Handler,
		},
		{
			MethodName: "PublishAndLogTransfer",
			Handler:    _AssetWallet_PublishAndLogTransfer_Handler,
		},
		{
			MethodName: "NextInternalKey",
			Handler:    _AssetWallet_NextInternalKey_Handler,
		},
		{
			MethodName: "NextScriptKey",
			Handler:    _AssetWallet_NextScriptKey_Handler,
		},
		{
			MethodName: "QueryInternalKey",
			Handler:    _AssetWallet_QueryInternalKey_Handler,
		},
		{
			MethodName: "QueryScriptKey",
			Handler:    _AssetWallet_QueryScriptKey_Handler,
		},
		{
			MethodName: "ProveAssetOwnership",
			Handler:    _AssetWallet_ProveAssetOwnership_Handler,
		},
		{
			MethodName: "VerifyAssetOwnership",
			Handler:    _AssetWallet_VerifyAssetOwnership_Handler,
		},
		{
			MethodName: "RemoveUTXOLease",
			Handler:    _AssetWallet_RemoveUTXOLease_Handler,
		},
		{
			MethodName: "DeclareScriptKey",
			Handler:    _AssetWallet_DeclareScriptKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assetwalletrpc/assetwallet.proto",
}
