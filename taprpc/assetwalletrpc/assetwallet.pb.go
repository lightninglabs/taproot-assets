// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: assetwalletrpc/assetwallet.proto

package assetwalletrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinSelectType int32

const (
	// Use the default coin selection type, which currently allows script keys and
	// key spend paths.
	CoinSelectType_COIN_SELECT_DEFAULT CoinSelectType = 0
	// Explicitly only select inputs that are known to be BIP-086 compliant (have
	// a key-spend path only and no script tree).
	CoinSelectType_COIN_SELECT_BIP86_ONLY CoinSelectType = 1
	// Allow the selection of inputs that have a script tree spend path as well as
	// a key spend path.
	CoinSelectType_COIN_SELECT_SCRIPT_TREES_ALLOWED CoinSelectType = 2
)

// Enum value maps for CoinSelectType.
var (
	CoinSelectType_name = map[int32]string{
		0: "COIN_SELECT_DEFAULT",
		1: "COIN_SELECT_BIP86_ONLY",
		2: "COIN_SELECT_SCRIPT_TREES_ALLOWED",
	}
	CoinSelectType_value = map[string]int32{
		"COIN_SELECT_DEFAULT":              0,
		"COIN_SELECT_BIP86_ONLY":           1,
		"COIN_SELECT_SCRIPT_TREES_ALLOWED": 2,
	}
)

func (x CoinSelectType) Enum() *CoinSelectType {
	p := new(CoinSelectType)
	*p = x
	return p
}

func (x CoinSelectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinSelectType) Descriptor() protoreflect.EnumDescriptor {
	return file_assetwalletrpc_assetwallet_proto_enumTypes[0].Descriptor()
}

func (CoinSelectType) Type() protoreflect.EnumType {
	return &file_assetwalletrpc_assetwallet_proto_enumTypes[0]
}

func (x CoinSelectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinSelectType.Descriptor instead.
func (CoinSelectType) EnumDescriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{0}
}

type FundVirtualPsbtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Template:
	//
	//	*FundVirtualPsbtRequest_Psbt
	//	*FundVirtualPsbtRequest_Raw
	Template isFundVirtualPsbtRequest_Template `protobuf_oneof:"template"`
	// Specify the type of coins that should be selected. Defaults to allowing both
	// script trees and BIP-086 compliant inputs.
	CoinSelectType CoinSelectType `protobuf:"varint,3,opt,name=coin_select_type,json=coinSelectType,proto3,enum=assetwalletrpc.CoinSelectType" json:"coin_select_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FundVirtualPsbtRequest) Reset() {
	*x = FundVirtualPsbtRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundVirtualPsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundVirtualPsbtRequest) ProtoMessage() {}

func (x *FundVirtualPsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundVirtualPsbtRequest.ProtoReflect.Descriptor instead.
func (*FundVirtualPsbtRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{0}
}

func (x *FundVirtualPsbtRequest) GetTemplate() isFundVirtualPsbtRequest_Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *FundVirtualPsbtRequest) GetPsbt() []byte {
	if x != nil {
		if x, ok := x.Template.(*FundVirtualPsbtRequest_Psbt); ok {
			return x.Psbt
		}
	}
	return nil
}

func (x *FundVirtualPsbtRequest) GetRaw() *TxTemplate {
	if x != nil {
		if x, ok := x.Template.(*FundVirtualPsbtRequest_Raw); ok {
			return x.Raw
		}
	}
	return nil
}

func (x *FundVirtualPsbtRequest) GetCoinSelectType() CoinSelectType {
	if x != nil {
		return x.CoinSelectType
	}
	return CoinSelectType_COIN_SELECT_DEFAULT
}

type isFundVirtualPsbtRequest_Template interface {
	isFundVirtualPsbtRequest_Template()
}

type FundVirtualPsbtRequest_Psbt struct {
	// Use an existing PSBT packet as the template for the funded PSBT.
	Psbt []byte `protobuf:"bytes,1,opt,name=psbt,proto3,oneof"`
}

type FundVirtualPsbtRequest_Raw struct {
	// Use the asset outputs and optional asset inputs from this raw template.
	Raw *TxTemplate `protobuf:"bytes,2,opt,name=raw,proto3,oneof"`
}

func (*FundVirtualPsbtRequest_Psbt) isFundVirtualPsbtRequest_Template() {}

func (*FundVirtualPsbtRequest_Raw) isFundVirtualPsbtRequest_Template() {}

type FundVirtualPsbtResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The funded but not yet signed virtual PSBT packet.
	FundedPsbt []byte `protobuf:"bytes,1,opt,name=funded_psbt,json=fundedPsbt,proto3" json:"funded_psbt,omitempty"`
	// The index of the added change output or -1 if no change was left over.
	ChangeOutputIndex int32 `protobuf:"varint,2,opt,name=change_output_index,json=changeOutputIndex,proto3" json:"change_output_index,omitempty"`
	// The list of passive virtual transactions that are anchored in the same BTC
	// level anchor transaction inputs as the funded "active" asset above. These
	// assets can be ignored when using the AnchorVirtualPsbts RPC, since they are
	// retrieved, signed and committed automatically in that method. But the
	// passive assets have to be included in the CommitVirtualPsbts RPC which is
	// used when custom BTC level anchor transactions are created.
	// The main difference to the "active" asset above is that the passive assets
	// will not get their own entry in the transfer table of the database, since
	// they are just carried along and not directly affected by the direct user
	// action.
	PassiveAssetPsbts [][]byte `protobuf:"bytes,3,rep,name=passive_asset_psbts,json=passiveAssetPsbts,proto3" json:"passive_asset_psbts,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FundVirtualPsbtResponse) Reset() {
	*x = FundVirtualPsbtResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundVirtualPsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundVirtualPsbtResponse) ProtoMessage() {}

func (x *FundVirtualPsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundVirtualPsbtResponse.ProtoReflect.Descriptor instead.
func (*FundVirtualPsbtResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{1}
}

func (x *FundVirtualPsbtResponse) GetFundedPsbt() []byte {
	if x != nil {
		return x.FundedPsbt
	}
	return nil
}

func (x *FundVirtualPsbtResponse) GetChangeOutputIndex() int32 {
	if x != nil {
		return x.ChangeOutputIndex
	}
	return 0
}

func (x *FundVirtualPsbtResponse) GetPassiveAssetPsbts() [][]byte {
	if x != nil {
		return x.PassiveAssetPsbts
	}
	return nil
}

type TxTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An optional list of inputs to use. Every input must be an asset UTXO known
	// to the wallet. The sum of all inputs must be greater than or equal to the
	// sum of all outputs.
	//
	// If no inputs are specified, asset coin selection will be performed instead
	// and inputs of sufficient value will be added to the resulting PSBT.
	Inputs []*PrevId `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A map of all Taproot Asset addresses mapped to the anchor transaction's
	// output index that should be sent to.
	Recipients    map[string]uint64 `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxTemplate) Reset() {
	*x = TxTemplate{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTemplate) ProtoMessage() {}

func (x *TxTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTemplate.ProtoReflect.Descriptor instead.
func (*TxTemplate) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{2}
}

func (x *TxTemplate) GetInputs() []*PrevId {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TxTemplate) GetRecipients() map[string]uint64 {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type PrevId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bitcoin anchor output on chain that contains the input asset.
	Outpoint *taprpc.OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The asset ID of the previous asset tree.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The tweaked Taproot output key committing to the possible spending
	// conditions of the asset.
	ScriptKey     []byte `protobuf:"bytes,3,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrevId) Reset() {
	*x = PrevId{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrevId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevId) ProtoMessage() {}

func (x *PrevId) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevId.ProtoReflect.Descriptor instead.
func (*PrevId) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{3}
}

func (x *PrevId) GetOutpoint() *taprpc.OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *PrevId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PrevId) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type SignVirtualPsbtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The PSBT of the virtual transaction that should be signed. The PSBT must
	// contain all required inputs, outputs, UTXO data and custom fields required
	// to identify the signing key.
	FundedPsbt    []byte `protobuf:"bytes,1,opt,name=funded_psbt,json=fundedPsbt,proto3" json:"funded_psbt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignVirtualPsbtRequest) Reset() {
	*x = SignVirtualPsbtRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignVirtualPsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignVirtualPsbtRequest) ProtoMessage() {}

func (x *SignVirtualPsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignVirtualPsbtRequest.ProtoReflect.Descriptor instead.
func (*SignVirtualPsbtRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{4}
}

func (x *SignVirtualPsbtRequest) GetFundedPsbt() []byte {
	if x != nil {
		return x.FundedPsbt
	}
	return nil
}

type SignVirtualPsbtResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The signed virtual transaction in PSBT format.
	SignedPsbt []byte `protobuf:"bytes,1,opt,name=signed_psbt,json=signedPsbt,proto3" json:"signed_psbt,omitempty"`
	// The indices of signed inputs.
	SignedInputs  []uint32 `protobuf:"varint,2,rep,packed,name=signed_inputs,json=signedInputs,proto3" json:"signed_inputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignVirtualPsbtResponse) Reset() {
	*x = SignVirtualPsbtResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignVirtualPsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignVirtualPsbtResponse) ProtoMessage() {}

func (x *SignVirtualPsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignVirtualPsbtResponse.ProtoReflect.Descriptor instead.
func (*SignVirtualPsbtResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{5}
}

func (x *SignVirtualPsbtResponse) GetSignedPsbt() []byte {
	if x != nil {
		return x.SignedPsbt
	}
	return nil
}

func (x *SignVirtualPsbtResponse) GetSignedInputs() []uint32 {
	if x != nil {
		return x.SignedInputs
	}
	return nil
}

type AnchorVirtualPsbtsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of virtual transactions that should be merged and committed to in
	// the BTC level anchor transaction.
	VirtualPsbts  [][]byte `protobuf:"bytes,1,rep,name=virtual_psbts,json=virtualPsbts,proto3" json:"virtual_psbts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnchorVirtualPsbtsRequest) Reset() {
	*x = AnchorVirtualPsbtsRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnchorVirtualPsbtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorVirtualPsbtsRequest) ProtoMessage() {}

func (x *AnchorVirtualPsbtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorVirtualPsbtsRequest.ProtoReflect.Descriptor instead.
func (*AnchorVirtualPsbtsRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{6}
}

func (x *AnchorVirtualPsbtsRequest) GetVirtualPsbts() [][]byte {
	if x != nil {
		return x.VirtualPsbts
	}
	return nil
}

type CommitVirtualPsbtsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of virtual transactions that should be mapped to the given BTC
	// level anchor transaction template. The virtual transactions are expected to
	// be signed (or use ASSET_VERSION_V1 with segregated witness to allow for
	// signing after committing) and ready to be committed to the anchor
	// transaction.
	VirtualPsbts [][]byte `protobuf:"bytes,1,rep,name=virtual_psbts,json=virtualPsbts,proto3" json:"virtual_psbts,omitempty"`
	// The list of passive virtual transactions that are anchored in the same BTC
	// level anchor transaction inputs as the "active" assets above. These can be
	// obtained by calling FundVirtualPsbt and using the passive assets returned.
	// The virtual transactions are expected to be signed (or use ASSET_VERSION_V1
	// with segregated witness to allow for signing after committing) and ready to
	// be committed to the anchor transaction.
	// The main difference to the "active" assets above is that the passive assets
	// will not get their own entry in the transfer table of the database, since
	// they are just carried along and not directly affected by the direct user
	// action.
	PassiveAssetPsbts [][]byte `protobuf:"bytes,2,rep,name=passive_asset_psbts,json=passiveAssetPsbts,proto3" json:"passive_asset_psbts,omitempty"`
	// The template of the BTC level anchor transaction that the virtual
	// transactions should be mapped to. The template is expected to already
	// contain all asset related inputs and outputs corresponding to the virtual
	// transactions given above. This can be achieved by using
	// tapfreighter.PrepareAnchoringTemplate for example.
	AnchorPsbt []byte `protobuf:"bytes,3,opt,name=anchor_psbt,json=anchorPsbt,proto3" json:"anchor_psbt,omitempty"`
	// Types that are valid to be assigned to AnchorChangeOutput:
	//
	//	*CommitVirtualPsbtsRequest_ExistingOutputIndex
	//	*CommitVirtualPsbtsRequest_Add
	AnchorChangeOutput isCommitVirtualPsbtsRequest_AnchorChangeOutput `protobuf_oneof:"anchor_change_output"`
	// Types that are valid to be assigned to Fees:
	//
	//	*CommitVirtualPsbtsRequest_TargetConf
	//	*CommitVirtualPsbtsRequest_SatPerVbyte
	Fees isCommitVirtualPsbtsRequest_Fees `protobuf_oneof:"fees"`
	// The custom lock ID used to identify the lock lease for UTXOs that serve as
	// inputs in the BTC-level anchor transaction. If left empty, LND's default
	// lock ID will be used.
	CustomLockId []byte `protobuf:"bytes,8,opt,name=custom_lock_id,json=customLockId,proto3" json:"custom_lock_id,omitempty"`
	// If set, the UTXOs used as inputs in the BTC-level anchor transaction will be
	// locked for the specified number of seconds. If unset, LND's default lock
	// expiration of 10 minutes will be applied.
	LockExpirationSeconds uint64 `protobuf:"varint,9,opt,name=lock_expiration_seconds,json=lockExpirationSeconds,proto3" json:"lock_expiration_seconds,omitempty"`
	// If set, the psbt funding step will be skipped. This is useful if the intent
	// is to create a zero-fee transaction.
	SkipFunding   bool `protobuf:"varint,10,opt,name=skip_funding,json=skipFunding,proto3" json:"skip_funding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitVirtualPsbtsRequest) Reset() {
	*x = CommitVirtualPsbtsRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitVirtualPsbtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVirtualPsbtsRequest) ProtoMessage() {}

func (x *CommitVirtualPsbtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVirtualPsbtsRequest.ProtoReflect.Descriptor instead.
func (*CommitVirtualPsbtsRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{7}
}

func (x *CommitVirtualPsbtsRequest) GetVirtualPsbts() [][]byte {
	if x != nil {
		return x.VirtualPsbts
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetPassiveAssetPsbts() [][]byte {
	if x != nil {
		return x.PassiveAssetPsbts
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetAnchorPsbt() []byte {
	if x != nil {
		return x.AnchorPsbt
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetAnchorChangeOutput() isCommitVirtualPsbtsRequest_AnchorChangeOutput {
	if x != nil {
		return x.AnchorChangeOutput
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetExistingOutputIndex() int32 {
	if x != nil {
		if x, ok := x.AnchorChangeOutput.(*CommitVirtualPsbtsRequest_ExistingOutputIndex); ok {
			return x.ExistingOutputIndex
		}
	}
	return 0
}

func (x *CommitVirtualPsbtsRequest) GetAdd() bool {
	if x != nil {
		if x, ok := x.AnchorChangeOutput.(*CommitVirtualPsbtsRequest_Add); ok {
			return x.Add
		}
	}
	return false
}

func (x *CommitVirtualPsbtsRequest) GetFees() isCommitVirtualPsbtsRequest_Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetTargetConf() uint32 {
	if x != nil {
		if x, ok := x.Fees.(*CommitVirtualPsbtsRequest_TargetConf); ok {
			return x.TargetConf
		}
	}
	return 0
}

func (x *CommitVirtualPsbtsRequest) GetSatPerVbyte() uint64 {
	if x != nil {
		if x, ok := x.Fees.(*CommitVirtualPsbtsRequest_SatPerVbyte); ok {
			return x.SatPerVbyte
		}
	}
	return 0
}

func (x *CommitVirtualPsbtsRequest) GetCustomLockId() []byte {
	if x != nil {
		return x.CustomLockId
	}
	return nil
}

func (x *CommitVirtualPsbtsRequest) GetLockExpirationSeconds() uint64 {
	if x != nil {
		return x.LockExpirationSeconds
	}
	return 0
}

func (x *CommitVirtualPsbtsRequest) GetSkipFunding() bool {
	if x != nil {
		return x.SkipFunding
	}
	return false
}

type isCommitVirtualPsbtsRequest_AnchorChangeOutput interface {
	isCommitVirtualPsbtsRequest_AnchorChangeOutput()
}

type CommitVirtualPsbtsRequest_ExistingOutputIndex struct {
	// Use the existing output within the anchor PSBT with the specified
	// index as the change output. Any leftover change will be added to the
	// already specified amount of that output. To add a new change output to
	// the PSBT, set the "add" field below instead.
	ExistingOutputIndex int32 `protobuf:"varint,4,opt,name=existing_output_index,json=existingOutputIndex,proto3,oneof"`
}

type CommitVirtualPsbtsRequest_Add struct {
	// Add a new P2TR change output to the PSBT if required.
	Add bool `protobuf:"varint,5,opt,name=add,proto3,oneof"`
}

func (*CommitVirtualPsbtsRequest_ExistingOutputIndex) isCommitVirtualPsbtsRequest_AnchorChangeOutput() {
}

func (*CommitVirtualPsbtsRequest_Add) isCommitVirtualPsbtsRequest_AnchorChangeOutput() {}

type isCommitVirtualPsbtsRequest_Fees interface {
	isCommitVirtualPsbtsRequest_Fees()
}

type CommitVirtualPsbtsRequest_TargetConf struct {
	// The target number of blocks that the transaction should be confirmed in.
	TargetConf uint32 `protobuf:"varint,6,opt,name=target_conf,json=targetConf,proto3,oneof"`
}

type CommitVirtualPsbtsRequest_SatPerVbyte struct {
	// The fee rate, expressed in sat/vbyte, that should be used to fund the
	// BTC level anchor transaction.
	SatPerVbyte uint64 `protobuf:"varint,7,opt,name=sat_per_vbyte,json=satPerVbyte,proto3,oneof"`
}

func (*CommitVirtualPsbtsRequest_TargetConf) isCommitVirtualPsbtsRequest_Fees() {}

func (*CommitVirtualPsbtsRequest_SatPerVbyte) isCommitVirtualPsbtsRequest_Fees() {}

type CommitVirtualPsbtsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The funded BTC level anchor transaction with all outputs updated to commit
	// to the virtual transactions given. The transaction is ready to be signed,
	// unless some of the asset inputs don't belong to this daemon, in which case
	// the anchor input derivation info must be added to those inputs first.
	AnchorPsbt []byte `protobuf:"bytes,1,opt,name=anchor_psbt,json=anchorPsbt,proto3" json:"anchor_psbt,omitempty"`
	// The updated virtual transactions that now contain the state transition
	// proofs for being committed to the BTC level anchor transaction above. If the
	// assets in the virtual transaction outputs are ASSET_VERSION_V1 and not yet
	// signed, then the proofs need to be updated to include the witness before
	// they become fully valid.
	VirtualPsbts [][]byte `protobuf:"bytes,2,rep,name=virtual_psbts,json=virtualPsbts,proto3" json:"virtual_psbts,omitempty"`
	// The updated passive virtual transactions that were committed to the same BTC
	// level anchor transaction as the "active" virtual transactions given. If the
	// assets in the virtual transaction outputs are ASSET_VERSION_V1 and not yet
	// signed, then the proofs need to be updated to include the witness before
	// they become fully valid.
	PassiveAssetPsbts [][]byte `protobuf:"bytes,4,rep,name=passive_asset_psbts,json=passiveAssetPsbts,proto3" json:"passive_asset_psbts,omitempty"`
	// The index of the (added) change output or -1 if no change was left over.
	ChangeOutputIndex int32 `protobuf:"varint,5,opt,name=change_output_index,json=changeOutputIndex,proto3" json:"change_output_index,omitempty"`
	// The list of UTXO lock leases that were acquired for the inputs in the funded
	// PSBT packet from lnd. Only inputs added to the PSBT by this RPC are locked,
	// inputs that were already present in the PSBT are not locked.
	LndLockedUtxos []*taprpc.OutPoint `protobuf:"bytes,6,rep,name=lnd_locked_utxos,json=lndLockedUtxos,proto3" json:"lnd_locked_utxos,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommitVirtualPsbtsResponse) Reset() {
	*x = CommitVirtualPsbtsResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitVirtualPsbtsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVirtualPsbtsResponse) ProtoMessage() {}

func (x *CommitVirtualPsbtsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVirtualPsbtsResponse.ProtoReflect.Descriptor instead.
func (*CommitVirtualPsbtsResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{8}
}

func (x *CommitVirtualPsbtsResponse) GetAnchorPsbt() []byte {
	if x != nil {
		return x.AnchorPsbt
	}
	return nil
}

func (x *CommitVirtualPsbtsResponse) GetVirtualPsbts() [][]byte {
	if x != nil {
		return x.VirtualPsbts
	}
	return nil
}

func (x *CommitVirtualPsbtsResponse) GetPassiveAssetPsbts() [][]byte {
	if x != nil {
		return x.PassiveAssetPsbts
	}
	return nil
}

func (x *CommitVirtualPsbtsResponse) GetChangeOutputIndex() int32 {
	if x != nil {
		return x.ChangeOutputIndex
	}
	return 0
}

func (x *CommitVirtualPsbtsResponse) GetLndLockedUtxos() []*taprpc.OutPoint {
	if x != nil {
		return x.LndLockedUtxos
	}
	return nil
}

type PublishAndLogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The funded BTC level anchor transaction with all outputs updated to commit
	// to the virtual transactions given. The transaction is ready to be signed,
	// unless some of the asset inputs don't belong to this daemon, in which case
	// the anchor input derivation info must be added to those inputs first.
	AnchorPsbt []byte `protobuf:"bytes,1,opt,name=anchor_psbt,json=anchorPsbt,proto3" json:"anchor_psbt,omitempty"`
	// The updated virtual transactions that contain the state transition proofs
	// of being committed to the BTC level anchor transaction above.
	VirtualPsbts [][]byte `protobuf:"bytes,2,rep,name=virtual_psbts,json=virtualPsbts,proto3" json:"virtual_psbts,omitempty"`
	// The updated passive virtual transactions that contain the state transition
	// proofs of being committed to the BTC level anchor transaction above.
	PassiveAssetPsbts [][]byte `protobuf:"bytes,3,rep,name=passive_asset_psbts,json=passiveAssetPsbts,proto3" json:"passive_asset_psbts,omitempty"`
	// The index of the (added) change output or -1 if no change was left over.
	ChangeOutputIndex int32 `protobuf:"varint,4,opt,name=change_output_index,json=changeOutputIndex,proto3" json:"change_output_index,omitempty"`
	// The list of UTXO lock leases that were acquired for the inputs in the funded
	// PSBT packet from lnd. Only inputs added to the PSBT by this RPC are locked,
	// inputs that were already present in the PSBT are not locked.
	LndLockedUtxos []*taprpc.OutPoint `protobuf:"bytes,5,rep,name=lnd_locked_utxos,json=lndLockedUtxos,proto3" json:"lnd_locked_utxos,omitempty"`
	// If set, the anchor transaction will not be broadcast to the network. This
	// is useful when an external system handles broadcasting, such as in custom
	// transaction packaging workflows.
	SkipAnchorTxBroadcast bool `protobuf:"varint,6,opt,name=skip_anchor_tx_broadcast,json=skipAnchorTxBroadcast,proto3" json:"skip_anchor_tx_broadcast,omitempty"`
	// An optional short label for the transfer. This label can be used to track
	// the progress of the transfer via the logs or an event subscription.
	// Multiple transfers can share the same label.
	Label         string `protobuf:"bytes,7,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishAndLogRequest) Reset() {
	*x = PublishAndLogRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishAndLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAndLogRequest) ProtoMessage() {}

func (x *PublishAndLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAndLogRequest.ProtoReflect.Descriptor instead.
func (*PublishAndLogRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{9}
}

func (x *PublishAndLogRequest) GetAnchorPsbt() []byte {
	if x != nil {
		return x.AnchorPsbt
	}
	return nil
}

func (x *PublishAndLogRequest) GetVirtualPsbts() [][]byte {
	if x != nil {
		return x.VirtualPsbts
	}
	return nil
}

func (x *PublishAndLogRequest) GetPassiveAssetPsbts() [][]byte {
	if x != nil {
		return x.PassiveAssetPsbts
	}
	return nil
}

func (x *PublishAndLogRequest) GetChangeOutputIndex() int32 {
	if x != nil {
		return x.ChangeOutputIndex
	}
	return 0
}

func (x *PublishAndLogRequest) GetLndLockedUtxos() []*taprpc.OutPoint {
	if x != nil {
		return x.LndLockedUtxos
	}
	return nil
}

func (x *PublishAndLogRequest) GetSkipAnchorTxBroadcast() bool {
	if x != nil {
		return x.SkipAnchorTxBroadcast
	}
	return false
}

func (x *PublishAndLogRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type NextInternalKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyFamily     uint32                 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextInternalKeyRequest) Reset() {
	*x = NextInternalKeyRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextInternalKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextInternalKeyRequest) ProtoMessage() {}

func (x *NextInternalKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextInternalKeyRequest.ProtoReflect.Descriptor instead.
func (*NextInternalKeyRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{10}
}

func (x *NextInternalKeyRequest) GetKeyFamily() uint32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

type NextInternalKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InternalKey   *taprpc.KeyDescriptor  `protobuf:"bytes,1,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextInternalKeyResponse) Reset() {
	*x = NextInternalKeyResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextInternalKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextInternalKeyResponse) ProtoMessage() {}

func (x *NextInternalKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextInternalKeyResponse.ProtoReflect.Descriptor instead.
func (*NextInternalKeyResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{11}
}

func (x *NextInternalKeyResponse) GetInternalKey() *taprpc.KeyDescriptor {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

type NextScriptKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyFamily     uint32                 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextScriptKeyRequest) Reset() {
	*x = NextScriptKeyRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextScriptKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextScriptKeyRequest) ProtoMessage() {}

func (x *NextScriptKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextScriptKeyRequest.ProtoReflect.Descriptor instead.
func (*NextScriptKeyRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{12}
}

func (x *NextScriptKeyRequest) GetKeyFamily() uint32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

type NextScriptKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptKey     *taprpc.ScriptKey      `protobuf:"bytes,1,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextScriptKeyResponse) Reset() {
	*x = NextScriptKeyResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextScriptKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextScriptKeyResponse) ProtoMessage() {}

func (x *NextScriptKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextScriptKeyResponse.ProtoReflect.Descriptor instead.
func (*NextScriptKeyResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{13}
}

func (x *NextScriptKeyResponse) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type QueryInternalKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The internal key to look for. This can either be the 32-byte x-only raw
	// internal key or the 33-byte raw internal key with the parity byte.
	InternalKey   []byte `protobuf:"bytes,1,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInternalKeyRequest) Reset() {
	*x = QueryInternalKeyRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInternalKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInternalKeyRequest) ProtoMessage() {}

func (x *QueryInternalKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInternalKeyRequest.ProtoReflect.Descriptor instead.
func (*QueryInternalKeyRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{14}
}

func (x *QueryInternalKeyRequest) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

type QueryInternalKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InternalKey   *taprpc.KeyDescriptor  `protobuf:"bytes,1,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInternalKeyResponse) Reset() {
	*x = QueryInternalKeyResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInternalKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInternalKeyResponse) ProtoMessage() {}

func (x *QueryInternalKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInternalKeyResponse.ProtoReflect.Descriptor instead.
func (*QueryInternalKeyResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{15}
}

func (x *QueryInternalKeyResponse) GetInternalKey() *taprpc.KeyDescriptor {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

type QueryScriptKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tweaked script key to look for. This can either be the 32-byte
	// x-only tweaked script key or the 33-byte tweaked script key with the
	// parity byte.
	TweakedScriptKey []byte `protobuf:"bytes,1,opt,name=tweaked_script_key,json=tweakedScriptKey,proto3" json:"tweaked_script_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryScriptKeyRequest) Reset() {
	*x = QueryScriptKeyRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScriptKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScriptKeyRequest) ProtoMessage() {}

func (x *QueryScriptKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScriptKeyRequest.ProtoReflect.Descriptor instead.
func (*QueryScriptKeyRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{16}
}

func (x *QueryScriptKeyRequest) GetTweakedScriptKey() []byte {
	if x != nil {
		return x.TweakedScriptKey
	}
	return nil
}

type QueryScriptKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptKey     *taprpc.ScriptKey      `protobuf:"bytes,1,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryScriptKeyResponse) Reset() {
	*x = QueryScriptKeyResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScriptKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScriptKeyResponse) ProtoMessage() {}

func (x *QueryScriptKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScriptKeyResponse.ProtoReflect.Descriptor instead.
func (*QueryScriptKeyResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{17}
}

func (x *QueryScriptKeyResponse) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type ProveAssetOwnershipRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	AssetId   []byte                 `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ScriptKey []byte                 `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	Outpoint  *taprpc.OutPoint       `protobuf:"bytes,3,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// An optional 32-byte challenge that may be used to bind the generated
	// proof. This challenge needs to be also presented on the
	// VerifyAssetOwnership RPC in order to check the proof against it.
	Challenge     []byte `protobuf:"bytes,4,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProveAssetOwnershipRequest) Reset() {
	*x = ProveAssetOwnershipRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProveAssetOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveAssetOwnershipRequest) ProtoMessage() {}

func (x *ProveAssetOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveAssetOwnershipRequest.ProtoReflect.Descriptor instead.
func (*ProveAssetOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{18}
}

func (x *ProveAssetOwnershipRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ProveAssetOwnershipRequest) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *ProveAssetOwnershipRequest) GetOutpoint() *taprpc.OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *ProveAssetOwnershipRequest) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type ProveAssetOwnershipResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProofWithWitness []byte                 `protobuf:"bytes,1,opt,name=proof_with_witness,json=proofWithWitness,proto3" json:"proof_with_witness,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProveAssetOwnershipResponse) Reset() {
	*x = ProveAssetOwnershipResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProveAssetOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveAssetOwnershipResponse) ProtoMessage() {}

func (x *ProveAssetOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveAssetOwnershipResponse.ProtoReflect.Descriptor instead.
func (*ProveAssetOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{19}
}

func (x *ProveAssetOwnershipResponse) GetProofWithWitness() []byte {
	if x != nil {
		return x.ProofWithWitness
	}
	return nil
}

type VerifyAssetOwnershipRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProofWithWitness []byte                 `protobuf:"bytes,1,opt,name=proof_with_witness,json=proofWithWitness,proto3" json:"proof_with_witness,omitempty"`
	// An optional 32-byte challenge that may be used to check the ownership
	// proof against. This challenge must match the one that the prover used
	// on the ProveAssetOwnership RPC.
	Challenge     []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyAssetOwnershipRequest) Reset() {
	*x = VerifyAssetOwnershipRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyAssetOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAssetOwnershipRequest) ProtoMessage() {}

func (x *VerifyAssetOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAssetOwnershipRequest.ProtoReflect.Descriptor instead.
func (*VerifyAssetOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{20}
}

func (x *VerifyAssetOwnershipRequest) GetProofWithWitness() []byte {
	if x != nil {
		return x.ProofWithWitness
	}
	return nil
}

func (x *VerifyAssetOwnershipRequest) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type VerifyAssetOwnershipResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ValidProof bool                   `protobuf:"varint,1,opt,name=valid_proof,json=validProof,proto3" json:"valid_proof,omitempty"`
	// The outpoint the proof commits to.
	Outpoint *taprpc.OutPoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The outpoint in the human-readable form "hash:index".
	OutpointStr string `protobuf:"bytes,3,opt,name=outpoint_str,json=outpointStr,proto3" json:"outpoint_str,omitempty"`
	// The block hash the output is part of.
	BlockHash []byte `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The block hash as hexadecimal string of the byte-reversed hash.
	BlockHashStr string `protobuf:"bytes,5,opt,name=block_hash_str,json=blockHashStr,proto3" json:"block_hash_str,omitempty"`
	// The block height of the block the output is part of.
	BlockHeight   uint32 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyAssetOwnershipResponse) Reset() {
	*x = VerifyAssetOwnershipResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyAssetOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAssetOwnershipResponse) ProtoMessage() {}

func (x *VerifyAssetOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAssetOwnershipResponse.ProtoReflect.Descriptor instead.
func (*VerifyAssetOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{21}
}

func (x *VerifyAssetOwnershipResponse) GetValidProof() bool {
	if x != nil {
		return x.ValidProof
	}
	return false
}

func (x *VerifyAssetOwnershipResponse) GetOutpoint() *taprpc.OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *VerifyAssetOwnershipResponse) GetOutpointStr() string {
	if x != nil {
		return x.OutpointStr
	}
	return ""
}

func (x *VerifyAssetOwnershipResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *VerifyAssetOwnershipResponse) GetBlockHashStr() string {
	if x != nil {
		return x.BlockHashStr
	}
	return ""
}

func (x *VerifyAssetOwnershipResponse) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type RemoveUTXOLeaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The outpoint of the UTXO to remove the lease for.
	Outpoint      *taprpc.OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUTXOLeaseRequest) Reset() {
	*x = RemoveUTXOLeaseRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUTXOLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUTXOLeaseRequest) ProtoMessage() {}

func (x *RemoveUTXOLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUTXOLeaseRequest.ProtoReflect.Descriptor instead.
func (*RemoveUTXOLeaseRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveUTXOLeaseRequest) GetOutpoint() *taprpc.OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

type RemoveUTXOLeaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUTXOLeaseResponse) Reset() {
	*x = RemoveUTXOLeaseResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUTXOLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUTXOLeaseResponse) ProtoMessage() {}

func (x *RemoveUTXOLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUTXOLeaseResponse.ProtoReflect.Descriptor instead.
func (*RemoveUTXOLeaseResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{23}
}

type DeclareScriptKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptKey     *taprpc.ScriptKey      `protobuf:"bytes,1,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareScriptKeyRequest) Reset() {
	*x = DeclareScriptKeyRequest{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareScriptKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareScriptKeyRequest) ProtoMessage() {}

func (x *DeclareScriptKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareScriptKeyRequest.ProtoReflect.Descriptor instead.
func (*DeclareScriptKeyRequest) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{24}
}

func (x *DeclareScriptKeyRequest) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type DeclareScriptKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptKey     *taprpc.ScriptKey      `protobuf:"bytes,1,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareScriptKeyResponse) Reset() {
	*x = DeclareScriptKeyResponse{}
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareScriptKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareScriptKeyResponse) ProtoMessage() {}

func (x *DeclareScriptKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assetwalletrpc_assetwallet_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareScriptKeyResponse.ProtoReflect.Descriptor instead.
func (*DeclareScriptKeyResponse) Descriptor() ([]byte, []int) {
	return file_assetwalletrpc_assetwallet_proto_rawDescGZIP(), []int{25}
}

func (x *DeclareScriptKeyResponse) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

var File_assetwalletrpc_assetwallet_proto protoreflect.FileDescriptor

const file_assetwalletrpc_assetwallet_proto_rawDesc = "" +
	"\n" +
	" assetwalletrpc/assetwallet.proto\x12\x0eassetwalletrpc\x1a\x13taprootassets.proto\"\xb4\x01\n" +
	"\x16FundVirtualPsbtRequest\x12\x14\n" +
	"\x04psbt\x18\x01 \x01(\fH\x00R\x04psbt\x12.\n" +
	"\x03raw\x18\x02 \x01(\v2\x1a.assetwalletrpc.TxTemplateH\x00R\x03raw\x12H\n" +
	"\x10coin_select_type\x18\x03 \x01(\x0e2\x1e.assetwalletrpc.CoinSelectTypeR\x0ecoinSelectTypeB\n" +
	"\n" +
	"\btemplate\"\x9a\x01\n" +
	"\x17FundVirtualPsbtResponse\x12\x1f\n" +
	"\vfunded_psbt\x18\x01 \x01(\fR\n" +
	"fundedPsbt\x12.\n" +
	"\x13change_output_index\x18\x02 \x01(\x05R\x11changeOutputIndex\x12.\n" +
	"\x13passive_asset_psbts\x18\x03 \x03(\fR\x11passiveAssetPsbts\"\xc7\x01\n" +
	"\n" +
	"TxTemplate\x12.\n" +
	"\x06inputs\x18\x01 \x03(\v2\x16.assetwalletrpc.PrevIdR\x06inputs\x12J\n" +
	"\n" +
	"recipients\x18\x02 \x03(\v2*.assetwalletrpc.TxTemplate.RecipientsEntryR\n" +
	"recipients\x1a=\n" +
	"\x0fRecipientsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"e\n" +
	"\x06PrevId\x12,\n" +
	"\boutpoint\x18\x01 \x01(\v2\x10.taprpc.OutPointR\boutpoint\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\fR\x02id\x12\x1d\n" +
	"\n" +
	"script_key\x18\x03 \x01(\fR\tscriptKey\"9\n" +
	"\x16SignVirtualPsbtRequest\x12\x1f\n" +
	"\vfunded_psbt\x18\x01 \x01(\fR\n" +
	"fundedPsbt\"_\n" +
	"\x17SignVirtualPsbtResponse\x12\x1f\n" +
	"\vsigned_psbt\x18\x01 \x01(\fR\n" +
	"signedPsbt\x12#\n" +
	"\rsigned_inputs\x18\x02 \x03(\rR\fsignedInputs\"@\n" +
	"\x19AnchorVirtualPsbtsRequest\x12#\n" +
	"\rvirtual_psbts\x18\x01 \x03(\fR\fvirtualPsbts\"\xc5\x03\n" +
	"\x19CommitVirtualPsbtsRequest\x12#\n" +
	"\rvirtual_psbts\x18\x01 \x03(\fR\fvirtualPsbts\x12.\n" +
	"\x13passive_asset_psbts\x18\x02 \x03(\fR\x11passiveAssetPsbts\x12\x1f\n" +
	"\vanchor_psbt\x18\x03 \x01(\fR\n" +
	"anchorPsbt\x124\n" +
	"\x15existing_output_index\x18\x04 \x01(\x05H\x00R\x13existingOutputIndex\x12\x12\n" +
	"\x03add\x18\x05 \x01(\bH\x00R\x03add\x12!\n" +
	"\vtarget_conf\x18\x06 \x01(\rH\x01R\n" +
	"targetConf\x12$\n" +
	"\rsat_per_vbyte\x18\a \x01(\x04H\x01R\vsatPerVbyte\x12$\n" +
	"\x0ecustom_lock_id\x18\b \x01(\fR\fcustomLockId\x126\n" +
	"\x17lock_expiration_seconds\x18\t \x01(\x04R\x15lockExpirationSeconds\x12!\n" +
	"\fskip_funding\x18\n" +
	" \x01(\bR\vskipFundingB\x16\n" +
	"\x14anchor_change_outputB\x06\n" +
	"\x04fees\"\xfe\x01\n" +
	"\x1aCommitVirtualPsbtsResponse\x12\x1f\n" +
	"\vanchor_psbt\x18\x01 \x01(\fR\n" +
	"anchorPsbt\x12#\n" +
	"\rvirtual_psbts\x18\x02 \x03(\fR\fvirtualPsbts\x12.\n" +
	"\x13passive_asset_psbts\x18\x04 \x03(\fR\x11passiveAssetPsbts\x12.\n" +
	"\x13change_output_index\x18\x05 \x01(\x05R\x11changeOutputIndex\x12:\n" +
	"\x10lnd_locked_utxos\x18\x06 \x03(\v2\x10.taprpc.OutPointR\x0elndLockedUtxos\"\xc7\x02\n" +
	"\x14PublishAndLogRequest\x12\x1f\n" +
	"\vanchor_psbt\x18\x01 \x01(\fR\n" +
	"anchorPsbt\x12#\n" +
	"\rvirtual_psbts\x18\x02 \x03(\fR\fvirtualPsbts\x12.\n" +
	"\x13passive_asset_psbts\x18\x03 \x03(\fR\x11passiveAssetPsbts\x12.\n" +
	"\x13change_output_index\x18\x04 \x01(\x05R\x11changeOutputIndex\x12:\n" +
	"\x10lnd_locked_utxos\x18\x05 \x03(\v2\x10.taprpc.OutPointR\x0elndLockedUtxos\x127\n" +
	"\x18skip_anchor_tx_broadcast\x18\x06 \x01(\bR\x15skipAnchorTxBroadcast\x12\x14\n" +
	"\x05label\x18\a \x01(\tR\x05label\"7\n" +
	"\x16NextInternalKeyRequest\x12\x1d\n" +
	"\n" +
	"key_family\x18\x01 \x01(\rR\tkeyFamily\"S\n" +
	"\x17NextInternalKeyResponse\x128\n" +
	"\finternal_key\x18\x01 \x01(\v2\x15.taprpc.KeyDescriptorR\vinternalKey\"5\n" +
	"\x14NextScriptKeyRequest\x12\x1d\n" +
	"\n" +
	"key_family\x18\x01 \x01(\rR\tkeyFamily\"I\n" +
	"\x15NextScriptKeyResponse\x120\n" +
	"\n" +
	"script_key\x18\x01 \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\"<\n" +
	"\x17QueryInternalKeyRequest\x12!\n" +
	"\finternal_key\x18\x01 \x01(\fR\vinternalKey\"T\n" +
	"\x18QueryInternalKeyResponse\x128\n" +
	"\finternal_key\x18\x01 \x01(\v2\x15.taprpc.KeyDescriptorR\vinternalKey\"E\n" +
	"\x15QueryScriptKeyRequest\x12,\n" +
	"\x12tweaked_script_key\x18\x01 \x01(\fR\x10tweakedScriptKey\"J\n" +
	"\x16QueryScriptKeyResponse\x120\n" +
	"\n" +
	"script_key\x18\x01 \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\"\xa2\x01\n" +
	"\x1aProveAssetOwnershipRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12\x1d\n" +
	"\n" +
	"script_key\x18\x02 \x01(\fR\tscriptKey\x12,\n" +
	"\boutpoint\x18\x03 \x01(\v2\x10.taprpc.OutPointR\boutpoint\x12\x1c\n" +
	"\tchallenge\x18\x04 \x01(\fR\tchallenge\"K\n" +
	"\x1bProveAssetOwnershipResponse\x12,\n" +
	"\x12proof_with_witness\x18\x01 \x01(\fR\x10proofWithWitness\"i\n" +
	"\x1bVerifyAssetOwnershipRequest\x12,\n" +
	"\x12proof_with_witness\x18\x01 \x01(\fR\x10proofWithWitness\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\fR\tchallenge\"\xf8\x01\n" +
	"\x1cVerifyAssetOwnershipResponse\x12\x1f\n" +
	"\vvalid_proof\x18\x01 \x01(\bR\n" +
	"validProof\x12,\n" +
	"\boutpoint\x18\x02 \x01(\v2\x10.taprpc.OutPointR\boutpoint\x12!\n" +
	"\foutpoint_str\x18\x03 \x01(\tR\voutpointStr\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x04 \x01(\fR\tblockHash\x12$\n" +
	"\x0eblock_hash_str\x18\x05 \x01(\tR\fblockHashStr\x12!\n" +
	"\fblock_height\x18\x06 \x01(\rR\vblockHeight\"F\n" +
	"\x16RemoveUTXOLeaseRequest\x12,\n" +
	"\boutpoint\x18\x01 \x01(\v2\x10.taprpc.OutPointR\boutpoint\"\x19\n" +
	"\x17RemoveUTXOLeaseResponse\"K\n" +
	"\x17DeclareScriptKeyRequest\x120\n" +
	"\n" +
	"script_key\x18\x01 \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\"L\n" +
	"\x18DeclareScriptKeyResponse\x120\n" +
	"\n" +
	"script_key\x18\x01 \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey*k\n" +
	"\x0eCoinSelectType\x12\x17\n" +
	"\x13COIN_SELECT_DEFAULT\x10\x00\x12\x1a\n" +
	"\x16COIN_SELECT_BIP86_ONLY\x10\x01\x12$\n" +
	" COIN_SELECT_SCRIPT_TREES_ALLOWED\x10\x022\xb0\n" +
	"\n" +
	"\vAssetWallet\x12b\n" +
	"\x0fFundVirtualPsbt\x12&.assetwalletrpc.FundVirtualPsbtRequest\x1a'.assetwalletrpc.FundVirtualPsbtResponse\x12b\n" +
	"\x0fSignVirtualPsbt\x12&.assetwalletrpc.SignVirtualPsbtRequest\x1a'.assetwalletrpc.SignVirtualPsbtResponse\x12Z\n" +
	"\x12AnchorVirtualPsbts\x12).assetwalletrpc.AnchorVirtualPsbtsRequest\x1a\x19.taprpc.SendAssetResponse\x12k\n" +
	"\x12CommitVirtualPsbts\x12).assetwalletrpc.CommitVirtualPsbtsRequest\x1a*.assetwalletrpc.CommitVirtualPsbtsResponse\x12X\n" +
	"\x15PublishAndLogTransfer\x12$.assetwalletrpc.PublishAndLogRequest\x1a\x19.taprpc.SendAssetResponse\x12b\n" +
	"\x0fNextInternalKey\x12&.assetwalletrpc.NextInternalKeyRequest\x1a'.assetwalletrpc.NextInternalKeyResponse\x12\\\n" +
	"\rNextScriptKey\x12$.assetwalletrpc.NextScriptKeyRequest\x1a%.assetwalletrpc.NextScriptKeyResponse\x12e\n" +
	"\x10QueryInternalKey\x12'.assetwalletrpc.QueryInternalKeyRequest\x1a(.assetwalletrpc.QueryInternalKeyResponse\x12_\n" +
	"\x0eQueryScriptKey\x12%.assetwalletrpc.QueryScriptKeyRequest\x1a&.assetwalletrpc.QueryScriptKeyResponse\x12n\n" +
	"\x13ProveAssetOwnership\x12*.assetwalletrpc.ProveAssetOwnershipRequest\x1a+.assetwalletrpc.ProveAssetOwnershipResponse\x12q\n" +
	"\x14VerifyAssetOwnership\x12+.assetwalletrpc.VerifyAssetOwnershipRequest\x1a,.assetwalletrpc.VerifyAssetOwnershipResponse\x12b\n" +
	"\x0fRemoveUTXOLease\x12&.assetwalletrpc.RemoveUTXOLeaseRequest\x1a'.assetwalletrpc.RemoveUTXOLeaseResponse\x12e\n" +
	"\x10DeclareScriptKey\x12'.assetwalletrpc.DeclareScriptKeyRequest\x1a(.assetwalletrpc.DeclareScriptKeyResponseB?Z=github.com/lightninglabs/taproot-assets/taprpc/assetwalletrpcb\x06proto3"

var (
	file_assetwalletrpc_assetwallet_proto_rawDescOnce sync.Once
	file_assetwalletrpc_assetwallet_proto_rawDescData []byte
)

func file_assetwalletrpc_assetwallet_proto_rawDescGZIP() []byte {
	file_assetwalletrpc_assetwallet_proto_rawDescOnce.Do(func() {
		file_assetwalletrpc_assetwallet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_assetwalletrpc_assetwallet_proto_rawDesc), len(file_assetwalletrpc_assetwallet_proto_rawDesc)))
	})
	return file_assetwalletrpc_assetwallet_proto_rawDescData
}

var file_assetwalletrpc_assetwallet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_assetwalletrpc_assetwallet_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_assetwalletrpc_assetwallet_proto_goTypes = []any{
	(CoinSelectType)(0),                  // 0: assetwalletrpc.CoinSelectType
	(*FundVirtualPsbtRequest)(nil),       // 1: assetwalletrpc.FundVirtualPsbtRequest
	(*FundVirtualPsbtResponse)(nil),      // 2: assetwalletrpc.FundVirtualPsbtResponse
	(*TxTemplate)(nil),                   // 3: assetwalletrpc.TxTemplate
	(*PrevId)(nil),                       // 4: assetwalletrpc.PrevId
	(*SignVirtualPsbtRequest)(nil),       // 5: assetwalletrpc.SignVirtualPsbtRequest
	(*SignVirtualPsbtResponse)(nil),      // 6: assetwalletrpc.SignVirtualPsbtResponse
	(*AnchorVirtualPsbtsRequest)(nil),    // 7: assetwalletrpc.AnchorVirtualPsbtsRequest
	(*CommitVirtualPsbtsRequest)(nil),    // 8: assetwalletrpc.CommitVirtualPsbtsRequest
	(*CommitVirtualPsbtsResponse)(nil),   // 9: assetwalletrpc.CommitVirtualPsbtsResponse
	(*PublishAndLogRequest)(nil),         // 10: assetwalletrpc.PublishAndLogRequest
	(*NextInternalKeyRequest)(nil),       // 11: assetwalletrpc.NextInternalKeyRequest
	(*NextInternalKeyResponse)(nil),      // 12: assetwalletrpc.NextInternalKeyResponse
	(*NextScriptKeyRequest)(nil),         // 13: assetwalletrpc.NextScriptKeyRequest
	(*NextScriptKeyResponse)(nil),        // 14: assetwalletrpc.NextScriptKeyResponse
	(*QueryInternalKeyRequest)(nil),      // 15: assetwalletrpc.QueryInternalKeyRequest
	(*QueryInternalKeyResponse)(nil),     // 16: assetwalletrpc.QueryInternalKeyResponse
	(*QueryScriptKeyRequest)(nil),        // 17: assetwalletrpc.QueryScriptKeyRequest
	(*QueryScriptKeyResponse)(nil),       // 18: assetwalletrpc.QueryScriptKeyResponse
	(*ProveAssetOwnershipRequest)(nil),   // 19: assetwalletrpc.ProveAssetOwnershipRequest
	(*ProveAssetOwnershipResponse)(nil),  // 20: assetwalletrpc.ProveAssetOwnershipResponse
	(*VerifyAssetOwnershipRequest)(nil),  // 21: assetwalletrpc.VerifyAssetOwnershipRequest
	(*VerifyAssetOwnershipResponse)(nil), // 22: assetwalletrpc.VerifyAssetOwnershipResponse
	(*RemoveUTXOLeaseRequest)(nil),       // 23: assetwalletrpc.RemoveUTXOLeaseRequest
	(*RemoveUTXOLeaseResponse)(nil),      // 24: assetwalletrpc.RemoveUTXOLeaseResponse
	(*DeclareScriptKeyRequest)(nil),      // 25: assetwalletrpc.DeclareScriptKeyRequest
	(*DeclareScriptKeyResponse)(nil),     // 26: assetwalletrpc.DeclareScriptKeyResponse
	nil,                                  // 27: assetwalletrpc.TxTemplate.RecipientsEntry
	(*taprpc.OutPoint)(nil),              // 28: taprpc.OutPoint
	(*taprpc.KeyDescriptor)(nil),         // 29: taprpc.KeyDescriptor
	(*taprpc.ScriptKey)(nil),             // 30: taprpc.ScriptKey
	(*taprpc.SendAssetResponse)(nil),     // 31: taprpc.SendAssetResponse
}
var file_assetwalletrpc_assetwallet_proto_depIdxs = []int32{
	3,  // 0: assetwalletrpc.FundVirtualPsbtRequest.raw:type_name -> assetwalletrpc.TxTemplate
	0,  // 1: assetwalletrpc.FundVirtualPsbtRequest.coin_select_type:type_name -> assetwalletrpc.CoinSelectType
	4,  // 2: assetwalletrpc.TxTemplate.inputs:type_name -> assetwalletrpc.PrevId
	27, // 3: assetwalletrpc.TxTemplate.recipients:type_name -> assetwalletrpc.TxTemplate.RecipientsEntry
	28, // 4: assetwalletrpc.PrevId.outpoint:type_name -> taprpc.OutPoint
	28, // 5: assetwalletrpc.CommitVirtualPsbtsResponse.lnd_locked_utxos:type_name -> taprpc.OutPoint
	28, // 6: assetwalletrpc.PublishAndLogRequest.lnd_locked_utxos:type_name -> taprpc.OutPoint
	29, // 7: assetwalletrpc.NextInternalKeyResponse.internal_key:type_name -> taprpc.KeyDescriptor
	30, // 8: assetwalletrpc.NextScriptKeyResponse.script_key:type_name -> taprpc.ScriptKey
	29, // 9: assetwalletrpc.QueryInternalKeyResponse.internal_key:type_name -> taprpc.KeyDescriptor
	30, // 10: assetwalletrpc.QueryScriptKeyResponse.script_key:type_name -> taprpc.ScriptKey
	28, // 11: assetwalletrpc.ProveAssetOwnershipRequest.outpoint:type_name -> taprpc.OutPoint
	28, // 12: assetwalletrpc.VerifyAssetOwnershipResponse.outpoint:type_name -> taprpc.OutPoint
	28, // 13: assetwalletrpc.RemoveUTXOLeaseRequest.outpoint:type_name -> taprpc.OutPoint
	30, // 14: assetwalletrpc.DeclareScriptKeyRequest.script_key:type_name -> taprpc.ScriptKey
	30, // 15: assetwalletrpc.DeclareScriptKeyResponse.script_key:type_name -> taprpc.ScriptKey
	1,  // 16: assetwalletrpc.AssetWallet.FundVirtualPsbt:input_type -> assetwalletrpc.FundVirtualPsbtRequest
	5,  // 17: assetwalletrpc.AssetWallet.SignVirtualPsbt:input_type -> assetwalletrpc.SignVirtualPsbtRequest
	7,  // 18: assetwalletrpc.AssetWallet.AnchorVirtualPsbts:input_type -> assetwalletrpc.AnchorVirtualPsbtsRequest
	8,  // 19: assetwalletrpc.AssetWallet.CommitVirtualPsbts:input_type -> assetwalletrpc.CommitVirtualPsbtsRequest
	10, // 20: assetwalletrpc.AssetWallet.PublishAndLogTransfer:input_type -> assetwalletrpc.PublishAndLogRequest
	11, // 21: assetwalletrpc.AssetWallet.NextInternalKey:input_type -> assetwalletrpc.NextInternalKeyRequest
	13, // 22: assetwalletrpc.AssetWallet.NextScriptKey:input_type -> assetwalletrpc.NextScriptKeyRequest
	15, // 23: assetwalletrpc.AssetWallet.QueryInternalKey:input_type -> assetwalletrpc.QueryInternalKeyRequest
	17, // 24: assetwalletrpc.AssetWallet.QueryScriptKey:input_type -> assetwalletrpc.QueryScriptKeyRequest
	19, // 25: assetwalletrpc.AssetWallet.ProveAssetOwnership:input_type -> assetwalletrpc.ProveAssetOwnershipRequest
	21, // 26: assetwalletrpc.AssetWallet.VerifyAssetOwnership:input_type -> assetwalletrpc.VerifyAssetOwnershipRequest
	23, // 27: assetwalletrpc.AssetWallet.RemoveUTXOLease:input_type -> assetwalletrpc.RemoveUTXOLeaseRequest
	25, // 28: assetwalletrpc.AssetWallet.DeclareScriptKey:input_type -> assetwalletrpc.DeclareScriptKeyRequest
	2,  // 29: assetwalletrpc.AssetWallet.FundVirtualPsbt:output_type -> assetwalletrpc.FundVirtualPsbtResponse
	6,  // 30: assetwalletrpc.AssetWallet.SignVirtualPsbt:output_type -> assetwalletrpc.SignVirtualPsbtResponse
	31, // 31: assetwalletrpc.AssetWallet.AnchorVirtualPsbts:output_type -> taprpc.SendAssetResponse
	9,  // 32: assetwalletrpc.AssetWallet.CommitVirtualPsbts:output_type -> assetwalletrpc.CommitVirtualPsbtsResponse
	31, // 33: assetwalletrpc.AssetWallet.PublishAndLogTransfer:output_type -> taprpc.SendAssetResponse
	12, // 34: assetwalletrpc.AssetWallet.NextInternalKey:output_type -> assetwalletrpc.NextInternalKeyResponse
	14, // 35: assetwalletrpc.AssetWallet.NextScriptKey:output_type -> assetwalletrpc.NextScriptKeyResponse
	16, // 36: assetwalletrpc.AssetWallet.QueryInternalKey:output_type -> assetwalletrpc.QueryInternalKeyResponse
	18, // 37: assetwalletrpc.AssetWallet.QueryScriptKey:output_type -> assetwalletrpc.QueryScriptKeyResponse
	20, // 38: assetwalletrpc.AssetWallet.ProveAssetOwnership:output_type -> assetwalletrpc.ProveAssetOwnershipResponse
	22, // 39: assetwalletrpc.AssetWallet.VerifyAssetOwnership:output_type -> assetwalletrpc.VerifyAssetOwnershipResponse
	24, // 40: assetwalletrpc.AssetWallet.RemoveUTXOLease:output_type -> assetwalletrpc.RemoveUTXOLeaseResponse
	26, // 41: assetwalletrpc.AssetWallet.DeclareScriptKey:output_type -> assetwalletrpc.DeclareScriptKeyResponse
	29, // [29:42] is the sub-list for method output_type
	16, // [16:29] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_assetwalletrpc_assetwallet_proto_init() }
func file_assetwalletrpc_assetwallet_proto_init() {
	if File_assetwalletrpc_assetwallet_proto != nil {
		return
	}
	file_assetwalletrpc_assetwallet_proto_msgTypes[0].OneofWrappers = []any{
		(*FundVirtualPsbtRequest_Psbt)(nil),
		(*FundVirtualPsbtRequest_Raw)(nil),
	}
	file_assetwalletrpc_assetwallet_proto_msgTypes[7].OneofWrappers = []any{
		(*CommitVirtualPsbtsRequest_ExistingOutputIndex)(nil),
		(*CommitVirtualPsbtsRequest_Add)(nil),
		(*CommitVirtualPsbtsRequest_TargetConf)(nil),
		(*CommitVirtualPsbtsRequest_SatPerVbyte)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_assetwalletrpc_assetwallet_proto_rawDesc), len(file_assetwalletrpc_assetwallet_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assetwalletrpc_assetwallet_proto_goTypes,
		DependencyIndexes: file_assetwalletrpc_assetwallet_proto_depIdxs,
		EnumInfos:         file_assetwalletrpc_assetwallet_proto_enumTypes,
		MessageInfos:      file_assetwalletrpc_assetwallet_proto_msgTypes,
	}.Build()
	File_assetwalletrpc_assetwallet_proto = out.File
	file_assetwalletrpc_assetwallet_proto_goTypes = nil
	file_assetwalletrpc_assetwallet_proto_depIdxs = nil
}
