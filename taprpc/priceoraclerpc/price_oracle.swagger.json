{
  "swagger": "2.0",
  "info": {
    "title": "priceoraclerpc/price_oracle.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "PriceOracle"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taproot-assets/rfq/priceoracle/price": {
      "get": {
        "summary": "QueryPrice queries the price for a swap from the input asset to the output\nasset. The direction of \"in\" vs. \"out\" is always as seen from the\nperspective of the wallet end user, where \"out\" means the value that goes\nfrom the wallet to the edge node and \"in\" means the value that goes from the\nedge node to the wallet.\nThis direction should not be confused with the direction of a Lightning\npayment that involves assets:\n- If a wallet end user is paying a satoshi-denominated invoice with assets\n(sell order), the input asset is the asset that the user is selling and\nthe output asset is the asset that flows into the network to satisfy the\ninvoice.\n- If a wallet end user is receiving assets via an invoice (buy order), the\ninput asset is the asset that flows into the user's wallet and the output\nasset is the satoshis that flow from the network to the edge node to\nsatisfy the invoice.",
        "operationId": "PriceOracle_QueryPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/priceoraclerpcQueryPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transaction_type",
            "description": "The type of transaction, either a purchase or a sale.\n\n - PURCHASE: PURCHASE indicates a purchase transaction (also called buy or bid order).\n - SALE: SALE indicates a sale transaction (also called sell or ask order).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PURCHASE",
              "SALE"
            ],
            "default": "PURCHASE"
          },
          {
            "name": "in_asset.asset_id",
            "description": "The 32-byte asset ID specified as raw bytes (gRPC only).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "in_asset.asset_id_str",
            "description": "The 32-byte asset ID encoded as a hex string (use this for REST).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "in_asset.group_key",
            "description": "The 32-byte asset group key specified as raw bytes (gRPC only).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "in_asset.group_key_str",
            "description": "The 32-byte asset group key encoded as hex string (use this for\nREST).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "in_asset_max_amount",
            "description": "The maximum amount of the input asset that the user requests to sell or buy.\nThe edge node should accept swaps up to that total amount. This is always\nexpressed in the input asset, because that is the variable the user knows.\nFor example, when paying a satoshi-denominated invoice (sell order), the\nuser knows the amount of satoshis that need to flow into the network (the\ninvoice amount plus a maximum user-defined routing fee). When receiving\nassets via an invoice (buy order), the user knows the amount of assets that\nthey want to receive. The output asset amount is always the result of the\nprice query, so it is the unknown value to the user.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "out_asset.asset_id",
            "description": "The 32-byte asset ID specified as raw bytes (gRPC only).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "out_asset.asset_id_str",
            "description": "The 32-byte asset ID encoded as a hex string (use this for REST).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "out_asset.group_key",
            "description": "The 32-byte asset group key specified as raw bytes (gRPC only).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "out_asset.group_key_str",
            "description": "The 32-byte asset group key encoded as hex string (use this for\nREST).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price_hint.in_asset_price.value",
            "description": "The value of the fixed point integer.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price_hint.in_asset_price.scale",
            "description": "The scale is used to represent the fractional component. This always\nrepresents a power of 10. Eg: a scale value of 2 (two decimal places)\nmaps to a multiplication by 100. A scale of 0 means no decimal places and\nthe value can be used as is.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "price_hint.out_asset_price.value",
            "description": "The value of the fixed point integer.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price_hint.out_asset_price.scale",
            "description": "The scale is used to represent the fractional component. This always\nrepresents a power of 10. Eg: a scale value of 2 (two decimal places)\nmaps to a multiplication by 100. A scale of 0 means no decimal places and\nthe value can be used as is.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "price_hint.expiry_timestamp",
            "description": "The expiry as a Unix timestamp in seconds after which the price is no\nlonger valid.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "PriceOracle"
        ]
      }
    }
  },
  "definitions": {
    "priceoraclerpcPriceQuote": {
      "type": "object",
      "properties": {
        "in_asset_price": {
          "$ref": "#/definitions/rfqrpcFixedPoint",
          "description": "The price of the input asset, expressed as number of asset units per BTC,\nrepresented as a fixed point number. If The input asset is BTC, the value\nwill be given as a static value of milli-satoshi per BTC (10^11)."
        },
        "out_asset_price": {
          "$ref": "#/definitions/rfqrpcFixedPoint",
          "description": "The price of the output asset, expressed as number of asset units per BTC,\nrepresented as a fixed point number. If The output asset is BTC, the value\nwill be given as a static value of milli-satoshi per BTC (10^11)."
        },
        "expiry_timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "The expiry as a Unix timestamp in seconds after which the price is no\nlonger valid."
        }
      }
    },
    "priceoraclerpcQueryPriceError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The human-readable message of the error."
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "The code of the error."
        }
      }
    },
    "priceoraclerpcQueryPriceResponse": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/priceoraclerpcPriceQuote",
          "description": "The successful response to the price query."
        },
        "error": {
          "$ref": "#/definitions/priceoraclerpcQueryPriceError",
          "description": "The error response to the price query."
        }
      }
    },
    "priceoraclerpcTransactionType": {
      "type": "string",
      "enum": [
        "PURCHASE",
        "SALE"
      ],
      "default": "PURCHASE",
      "description": "TransactionType is an enum representing the type of transaction.\n\n - PURCHASE: PURCHASE indicates a purchase transaction (also called buy or bid order).\n - SALE: SALE indicates a sale transaction (also called sell or ask order)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rfqrpcAssetSpecifier": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte asset ID specified as raw bytes (gRPC only)."
        },
        "asset_id_str": {
          "type": "string",
          "description": "The 32-byte asset ID encoded as a hex string (use this for REST)."
        },
        "group_key": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte asset group key specified as raw bytes (gRPC only)."
        },
        "group_key_str": {
          "type": "string",
          "description": "The 32-byte asset group key encoded as hex string (use this for\nREST)."
        }
      }
    },
    "rfqrpcFixedPoint": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "uint64",
          "description": "The value of the fixed point integer."
        },
        "scale": {
          "type": "integer",
          "format": "int64",
          "description": "The scale is used to represent the fractional component. This always\nrepresents a power of 10. Eg: a scale value of 2 (two decimal places)\nmaps to a multiplication by 100. A scale of 0 means no decimal places and\nthe value can be used as is."
        }
      },
      "description": "FixedPoint is used to represent fixed point arithmetic for currency related\ncalculations. A fixed point consists of a value, and a scale. The value is\nthe integer representation of the number. The scale is used to represent the\nfractional/decimal component of the number.\nAs an example, if the BTC/USD rate was $61,234.95, and we wanted to represent\nthat using a fixed point, then we multiply that by 100 (scale 2) to arrive at\nthe fixed point representation:\n$61,234.95 * 100 = 6,123,495 = FixedPoint{value=6_123_495, scale=2}.\nTo convert back to our normal rate, we divide the value by 100 in float space\nto arrive back at $61,234.95."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
