syntax = "proto3";

import "rfqrpc/rfq.proto";

package priceoraclerpc;

option go_package = "github.com/lightninglabs/taproot-assets/taprpc/priceoraclerpc";

service PriceOracle {
    /*
    QueryPrice queries the price for a swap from the input asset to the output
    asset. The direction of "in" vs. "out" is always as seen from the
    perspective of the wallet end user, where "out" means the value that goes
    from the wallet to the edge node and "in" means the value that goes from the
    edge node to the wallet.
    This direction should not be confused with the direction of a Lightning
    payment that involves assets:
    - If a wallet end user is paying a satoshi-denominated invoice with assets
      (sell order), the input asset is the asset that the user is selling and
      the output asset is the asset that flows into the network to satisfy the
      invoice.
    - If a wallet end user is receiving assets via an invoice (buy order), the
      input asset is the asset that flows into the user's wallet and the output
      asset is the satoshis that flow from the network to the edge node to
      satisfy the invoice.
    */
    rpc QueryPrice (QueryPriceRequest) returns (QueryPriceResponse);
}

// TransactionType is an enum representing the type of transaction.
enum TransactionType {
    // PURCHASE indicates a purchase transaction (also called buy or bid order).
    PURCHASE = 0;

    // SALE indicates a sale transaction (also called sell or ask order).
    SALE = 1;
}

message QueryPriceRequest {
    // The type of transaction, either a purchase or a sale.
    TransactionType transaction_type = 1;

    /*
    The input asset as seen from the point of view of the wallet end user. For
    a sell order (paying a satoshi-denominated invoice with assets), this is the
    asset that flows into the network to satisfy the invoice (usually BTC). For
    a buy order (receiving assets via an invoice), this is the asset that flows
    into the user's wallet.

    NOTE: An asset ID of all zeros indicates that the input asset is BTC. In
    this case, the in asset price will be given as a static value of
    milli-satoshi per BTC (10^11).
    */
    rfqrpc.AssetSpecifier in_asset = 2;

    /*
    The maximum amount of the input asset that the user requests to sell or buy.
    The edge node should accept swaps up to that total amount. This is always
    expressed in the input asset, because that is the variable the user knows.
    For example, when paying a satoshi-denominated invoice (sell order), the
    user knows the amount of satoshis that need to flow into the network (the
    invoice amount plus a maximum user-defined routing fee). When receiving
    assets via an invoice (buy order), the user knows the amount of assets that
    they want to receive. The output asset amount is always the result of the
    price query, so it is the unknown value to the user.
    */
    uint64 in_asset_max_amount = 3;

    /*
    The output asset as seen from the point of view of the wallet end user. For
    a sell order (paying a satoshi-denominated invoice with assets), this is the
    asset that the user is selling. For a buy order (receiving assets via an
    invoice), this is the asset that flows from the network to the edge node to
    pay for the invoice (usually BTC).

    NOTE: An asset ID of all zeros indicates that the output asset is BTC. In
    this case, the out asset price will be given as a static value of
    milli-satoshi per BTC (10^11).
    */
    rfqrpc.AssetSpecifier out_asset = 4;

    // rate_tick_hint is an optional suggested rate tick for the transaction,
    // used to provide guidance on expected pricing.

    /*
    An optional suggested price for the input/output asset, used to provide
    guidance on expected pricing.
    */
    PriceQuote price_hint = 5;
}

message PriceQuote {
    /*
    The price of the input asset, expressed as number of asset units per BTC,
    represented as a fixed point number. If The input asset is BTC, the value
    will be given as a static value of milli-satoshi per BTC (10^11).
    */
    rfqrpc.FixedPoint in_asset_price = 1;

    /*
    The price of the output asset, expressed as number of asset units per BTC,
    represented as a fixed point number. If The output asset is BTC, the value
    will be given as a static value of milli-satoshi per BTC (10^11).
    */
    rfqrpc.FixedPoint out_asset_price = 2;

    // The expiry as a Unix timestamp in seconds after which the price is no
    // longer valid.
    uint64 expiry_timestamp = 3;
}

message QueryPriceError {
    // The human-readable message of the error.
    string message = 1;

    // The code of the error.
    uint32 code = 2;
}

message QueryPriceResponse {
    oneof result {
        // The successful response to the price query.
        PriceQuote success = 1;

        // The error response to the price query.
        QueryPriceError error = 2;
    }
}
