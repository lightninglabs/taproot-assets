// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: priceoraclerpc/price_oracle.proto

package priceoraclerpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransactionType is an enum representing the type of transaction.
type TransactionType int32

const (
	// PURCHASE indicates a purchase transaction.
	TransactionType_PURCHASE TransactionType = 0
	// SALE indicates a sale transaction.
	TransactionType_SALE TransactionType = 1
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "PURCHASE",
		1: "SALE",
	}
	TransactionType_value = map[string]int32{
		"PURCHASE": 0,
		"SALE":     1,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_priceoraclerpc_price_oracle_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_priceoraclerpc_price_oracle_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{0}
}

// Intent is an enum informing the price oracle about the intent of the price
// rate query. This is used to provide context for the asset rates being
// requested, allowing the price oracle to tailor the response based on the
// specific use case, such as paying an invoice or receiving a payment and the
// different stages involved in those.
type Intent int32

const (
	// INTENT_UNSPECIFIED is used to indicate that the intent of the price rate
	// query is not specified. This is the fallback default value and should not
	// be used in production code. It is primarily used for backward
	// compatibility with older versions of the protocol that did not include
	// intent information.
	Intent_INTENT_UNSPECIFIED Intent = 0
	// INTENT_PAY_INVOICE_HINT is used to indicate that the user is requesting
	// a price rate hint for paying an invoice. This is typically used by the
	// payer of an invoice to provide a suggestion of the expected asset rate to
	// the RFQ peer (edge node) that will determine the actual rate for the
	// payment.
	Intent_INTENT_PAY_INVOICE_HINT Intent = 1
	// INTENT_PAY_INVOICE is used to indicate that a peer wants to pay an
	// invoice with assets. This is typically used by the edge node that
	// facilitates the swap from assets to BTC for the payer of an invoice. This
	// intent is used to provide the actual asset rate for the payment, which
	// may differ from the hint provided by the payer.
	Intent_INTENT_PAY_INVOICE Intent = 2
	// INTENT_PAY_INVOICE_QUALIFY is used to indicate that the payer of an
	// invoice has received an asset rate from their RFQ peer (edge node) and is
	// qualifying the rate for the payment. This is typically used by the payer
	// of an invoice to ensure that the asset rate provided by their peer (edge
	// node) is acceptable before proceeding with the payment.
	Intent_INTENT_PAY_INVOICE_QUALIFY Intent = 3
	// INTENT_RECV_PAYMENT_HINT is used to indicate that the user is requesting
	// a price rate hint for receiving a payment through an invoice. This is
	// typically used by the creator of an invoice to provide a suggestion of
	// the expected asset rate to the RFQ peer (edge node) that will determine
	// the actual rate used for creating an invoice.
	Intent_INTENT_RECV_PAYMENT_HINT Intent = 4
	// INTENT_RECV_PAYMENT is used to indicate that a peer wants to create an
	// invoice to receive a payment with assets. This is typically used by the
	// edge node that facilitates the swap from BTC to assets for the receiver
	// of a payment. This intent is used to provide the actual asset rate for
	// the invoice creation, which may differ from the hint provided by the
	// receiver.
	Intent_INTENT_RECV_PAYMENT Intent = 5
	// INTENT_RECV_PAYMENT_QUALIFY is used to indicate that the creator of an
	// invoice received an asset rate from their RFQ peer (edge node) and is
	// qualifying the rate for the creation of the invoice. This is typically
	// used by the creator of an invoice to ensure that the asset rate provided
	// by their peer (edge node) is acceptable before proceeding with creating
	// the invoice.
	Intent_INTENT_RECV_PAYMENT_QUALIFY Intent = 6
)

// Enum value maps for Intent.
var (
	Intent_name = map[int32]string{
		0: "INTENT_UNSPECIFIED",
		1: "INTENT_PAY_INVOICE_HINT",
		2: "INTENT_PAY_INVOICE",
		3: "INTENT_PAY_INVOICE_QUALIFY",
		4: "INTENT_RECV_PAYMENT_HINT",
		5: "INTENT_RECV_PAYMENT",
		6: "INTENT_RECV_PAYMENT_QUALIFY",
	}
	Intent_value = map[string]int32{
		"INTENT_UNSPECIFIED":          0,
		"INTENT_PAY_INVOICE_HINT":     1,
		"INTENT_PAY_INVOICE":          2,
		"INTENT_PAY_INVOICE_QUALIFY":  3,
		"INTENT_RECV_PAYMENT_HINT":    4,
		"INTENT_RECV_PAYMENT":         5,
		"INTENT_RECV_PAYMENT_QUALIFY": 6,
	}
)

func (x Intent) Enum() *Intent {
	p := new(Intent)
	*p = x
	return p
}

func (x Intent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Intent) Descriptor() protoreflect.EnumDescriptor {
	return file_priceoraclerpc_price_oracle_proto_enumTypes[1].Descriptor()
}

func (Intent) Type() protoreflect.EnumType {
	return &file_priceoraclerpc_price_oracle_proto_enumTypes[1]
}

func (x Intent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Intent.Descriptor instead.
func (Intent) EnumDescriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{1}
}

// ErrorCode represents the possible error codes that can be returned in a
// QueryAssetRatesErrResponse.
type ErrorCode int32

const (
	// UNSPECIFIED_ORACLE_ERROR_CODE indicates an unspecified error.
	ErrorCode_UNSPECIFIED_ORACLE_ERROR_CODE ErrorCode = 0
	// UNSUPPORTED_ASSET_ORACLE_ERROR_CODE indicates the asset is not
	// supported.
	ErrorCode_UNSUPPORTED_ASSET_ORACLE_ERROR_CODE ErrorCode = 1
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "UNSPECIFIED_ORACLE_ERROR_CODE",
		1: "UNSUPPORTED_ASSET_ORACLE_ERROR_CODE",
	}
	ErrorCode_value = map[string]int32{
		"UNSPECIFIED_ORACLE_ERROR_CODE":       0,
		"UNSUPPORTED_ASSET_ORACLE_ERROR_CODE": 1,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_priceoraclerpc_price_oracle_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_priceoraclerpc_price_oracle_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{2}
}

// FixedPoint is a scaled integer representation of a fractional number.
//
// This type consists of two integer fields: a coefficient and a scale.
// Using this format enables precise and consistent representation of fractional
// numbers while avoiding floating-point data types, which are prone to
// precision errors.
//
// The relationship between the fractional representation and its fixed-point
// representation is expressed as:
// ```
// V = F_c / (10^F_s)
// ```
// where:
//
// * `V` is the fractional value.
//
//   - `F_c` is the coefficient component of the fixed-point representation. It is
//     the scaled-up fractional value represented as an integer.
//
//   - `F_s` is the scale component. It is an integer specifying how
//     many decimal places `F_c` should be divided by to obtain the fractional
//     representation.
type FixedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coefficient is the fractional value scaled-up as an integer. This
	// integer is represented as a string as it may be too large to fit in a
	// uint64.
	Coefficient string `protobuf:"bytes,1,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	// The scale is the component that determines how many decimal places
	// the coefficient should be divided by to obtain the fractional value.
	Scale uint32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *FixedPoint) Reset() {
	*x = FixedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPoint) ProtoMessage() {}

func (x *FixedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedPoint.ProtoReflect.Descriptor instead.
func (*FixedPoint) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *FixedPoint) GetCoefficient() string {
	if x != nil {
		return x.Coefficient
	}
	return ""
}

func (x *FixedPoint) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// AssetRates represents the exchange rates for subject and payment assets
// relative to BTC, expressed as fixed-point numbers. It includes the rates
// for both assets and an expiration timestamp indicating when the rates
// are no longer valid.
type AssetRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subjectAssetRate is the number of subject asset units per BTC represented
	// as a fixed-point number. This field is also commonly referred to as the
	// subject asset to BTC (conversion) rate. When the subject asset is BTC,
	// this field should be set to 100 billion, as one BTC is equivalent to 100
	// billion msats.
	SubjectAssetRate *FixedPoint `protobuf:"bytes,1,opt,name=subjectAssetRate,proto3" json:"subjectAssetRate,omitempty"`
	// paymentAssetRate is the number of payment asset units per BTC represented
	// as a fixed-point number. This field is also commonly referred to as the
	// payment asset to BTC (conversion) rate. When the payment asset is BTC,
	// this field should be set to 100 billion, as one BTC is equivalent to 100
	// billion msats.
	PaymentAssetRate *FixedPoint `protobuf:"bytes,2,opt,name=paymentAssetRate,proto3" json:"paymentAssetRate,omitempty"`
	// expiry_timestamp is the Unix timestamp in seconds after which the asset
	// rates are no longer valid.
	ExpiryTimestamp uint64 `protobuf:"varint,3,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
}

func (x *AssetRates) Reset() {
	*x = AssetRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRates) ProtoMessage() {}

func (x *AssetRates) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRates.ProtoReflect.Descriptor instead.
func (*AssetRates) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *AssetRates) GetSubjectAssetRate() *FixedPoint {
	if x != nil {
		return x.SubjectAssetRate
	}
	return nil
}

func (x *AssetRates) GetPaymentAssetRate() *FixedPoint {
	if x != nil {
		return x.PaymentAssetRate
	}
	return nil
}

func (x *AssetRates) GetExpiryTimestamp() uint64 {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return 0
}

// AssetSpecifier is a union type for specifying an asset by either its asset ID
// or group key.
type AssetSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*AssetSpecifier_AssetId
	//	*AssetSpecifier_AssetIdStr
	//	*AssetSpecifier_GroupKey
	//	*AssetSpecifier_GroupKeyStr
	Id isAssetSpecifier_Id `protobuf_oneof:"id"`
}

func (x *AssetSpecifier) Reset() {
	*x = AssetSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSpecifier) ProtoMessage() {}

func (x *AssetSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSpecifier.ProtoReflect.Descriptor instead.
func (*AssetSpecifier) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{2}
}

func (m *AssetSpecifier) GetId() isAssetSpecifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AssetSpecifier) GetAssetId() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *AssetSpecifier) GetAssetIdStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *AssetSpecifier) GetGroupKey() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *AssetSpecifier) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isAssetSpecifier_Id interface {
	isAssetSpecifier_Id()
}

type AssetSpecifier_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type AssetSpecifier_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type AssetSpecifier_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type AssetSpecifier_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*AssetSpecifier_AssetId) isAssetSpecifier_Id() {}

func (*AssetSpecifier_AssetIdStr) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKey) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKeyStr) isAssetSpecifier_Id() {}

// QueryAssetRatesRequest specifies the parameters for querying asset exchange
// rates in a transaction. It includes the transaction type, details about the
// subject and payment assets, and an optional hint for expected asset rates.
type QueryAssetRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction_type indicates whether the transaction is a purchase or a
	// sale.
	TransactionType TransactionType `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3,enum=priceoraclerpc.TransactionType" json:"transaction_type,omitempty"`
	// subject_asset is the asset to be priced for purchase or sale.
	SubjectAsset *AssetSpecifier `protobuf:"bytes,2,opt,name=subject_asset,json=subjectAsset,proto3" json:"subject_asset,omitempty"`
	// subject_asset_max_amount is the maximum amount of the subject asset that
	// could be involved in the transaction.
	SubjectAssetMaxAmount uint64 `protobuf:"varint,3,opt,name=subject_asset_max_amount,json=subjectAssetMaxAmount,proto3" json:"subject_asset_max_amount,omitempty"`
	// payment_asset is the asset used for purchasing or receiving from a sale.
	//
	// NOTE: An asset ID of all zeros indicates that the payment asset is BTC.
	// In this case, the asset rate will be given as milli-satoshi per asset
	// unit
	PaymentAsset *AssetSpecifier `protobuf:"bytes,4,opt,name=payment_asset,json=paymentAsset,proto3" json:"payment_asset,omitempty"`
	// payment_asset_max_amount is the maximum amount of the payment asset that
	// could be involved in the transaction. This field is optional. If set to
	// zero, it is considered unset.
	PaymentAssetMaxAmount uint64 `protobuf:"varint,5,opt,name=payment_asset_max_amount,json=paymentAssetMaxAmount,proto3" json:"payment_asset_max_amount,omitempty"`
	// asset_rates_hint is an optional suggestion of asset rates for the
	// transaction, intended to provide guidance on expected pricing.
	AssetRatesHint *AssetRates `protobuf:"bytes,6,opt,name=asset_rates_hint,json=assetRatesHint,proto3" json:"asset_rates_hint,omitempty"`
	// intent informs the price oracle about the stage of the payment flow that
	// lead to the price rate query. This is used to provide context for the
	// asset rates being requested, allowing the price oracle to tailor the
	// response based on the specific use case, such as paying an invoice or
	// receiving a payment and the different stages involved in those. This
	// field will only be set by tapd v0.7.0 and later.
	Intent Intent `protobuf:"varint,7,opt,name=intent,proto3,enum=priceoraclerpc.Intent" json:"intent,omitempty"`
	// counterparty_id is the 33-byte public key of the peer that is on the
	// opposite side of the transaction. This field will only be set by tapd
	// v0.7.0 and later and only if the user initiating the transaction (sending
	// a payment or creating an invoice) opted in to sharing their peer ID with
	// the price oracle.
	CounterpartyId []byte `protobuf:"bytes,8,opt,name=counterparty_id,json=counterpartyId,proto3" json:"counterparty_id,omitempty"`
	// metadata is an optional text field that can be used to provide
	// additional metadata about the transaction to the price oracle. This can
	// include information about the wallet end user that initiated the
	// transaction, or any authentication information that the price oracle
	// can use to give out a more accurate (or discount) asset rate. Though not
	// verified or enforced by tapd, the suggested format for this field is a
	// JSON string. This field is optional and can be left empty if no metadata
	// is available. The maximum length of this field is 32'768 bytes. This
	// field will only be set by tapd v0.7.0 and later.
	Metadata string `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *QueryAssetRatesRequest) Reset() {
	*x = QueryAssetRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetRatesRequest) ProtoMessage() {}

func (x *QueryAssetRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetRatesRequest.ProtoReflect.Descriptor instead.
func (*QueryAssetRatesRequest) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *QueryAssetRatesRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_PURCHASE
}

func (x *QueryAssetRatesRequest) GetSubjectAsset() *AssetSpecifier {
	if x != nil {
		return x.SubjectAsset
	}
	return nil
}

func (x *QueryAssetRatesRequest) GetSubjectAssetMaxAmount() uint64 {
	if x != nil {
		return x.SubjectAssetMaxAmount
	}
	return 0
}

func (x *QueryAssetRatesRequest) GetPaymentAsset() *AssetSpecifier {
	if x != nil {
		return x.PaymentAsset
	}
	return nil
}

func (x *QueryAssetRatesRequest) GetPaymentAssetMaxAmount() uint64 {
	if x != nil {
		return x.PaymentAssetMaxAmount
	}
	return 0
}

func (x *QueryAssetRatesRequest) GetAssetRatesHint() *AssetRates {
	if x != nil {
		return x.AssetRatesHint
	}
	return nil
}

func (x *QueryAssetRatesRequest) GetIntent() Intent {
	if x != nil {
		return x.Intent
	}
	return Intent_INTENT_UNSPECIFIED
}

func (x *QueryAssetRatesRequest) GetCounterpartyId() []byte {
	if x != nil {
		return x.CounterpartyId
	}
	return nil
}

func (x *QueryAssetRatesRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// QueryAssetRatesOkResponse is the successful response to a
// QueryAssetRates call.
type QueryAssetRatesOkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asset_rates is the asset exchange rates for the transaction.
	AssetRates *AssetRates `protobuf:"bytes,1,opt,name=asset_rates,json=assetRates,proto3" json:"asset_rates,omitempty"`
}

func (x *QueryAssetRatesOkResponse) Reset() {
	*x = QueryAssetRatesOkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetRatesOkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetRatesOkResponse) ProtoMessage() {}

func (x *QueryAssetRatesOkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetRatesOkResponse.ProtoReflect.Descriptor instead.
func (*QueryAssetRatesOkResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *QueryAssetRatesOkResponse) GetAssetRates() *AssetRates {
	if x != nil {
		return x.AssetRates
	}
	return nil
}

// QueryAssetRatesErrResponse is the error response to a QueryAssetRates call.
type QueryAssetRatesErrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error is the error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// code is the error code.
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=priceoraclerpc.ErrorCode" json:"code,omitempty"`
}

func (x *QueryAssetRatesErrResponse) Reset() {
	*x = QueryAssetRatesErrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetRatesErrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetRatesErrResponse) ProtoMessage() {}

func (x *QueryAssetRatesErrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetRatesErrResponse.ProtoReflect.Descriptor instead.
func (*QueryAssetRatesErrResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *QueryAssetRatesErrResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryAssetRatesErrResponse) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_UNSPECIFIED_ORACLE_ERROR_CODE
}

// QueryAssetRatesResponse is the response from a QueryAssetRates RPC call.
type QueryAssetRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*QueryAssetRatesResponse_Ok
	//	*QueryAssetRatesResponse_Error
	Result isQueryAssetRatesResponse_Result `protobuf_oneof:"result"`
}

func (x *QueryAssetRatesResponse) Reset() {
	*x = QueryAssetRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetRatesResponse) ProtoMessage() {}

func (x *QueryAssetRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetRatesResponse.ProtoReflect.Descriptor instead.
func (*QueryAssetRatesResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{6}
}

func (m *QueryAssetRatesResponse) GetResult() isQueryAssetRatesResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *QueryAssetRatesResponse) GetOk() *QueryAssetRatesOkResponse {
	if x, ok := x.GetResult().(*QueryAssetRatesResponse_Ok); ok {
		return x.Ok
	}
	return nil
}

func (x *QueryAssetRatesResponse) GetError() *QueryAssetRatesErrResponse {
	if x, ok := x.GetResult().(*QueryAssetRatesResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isQueryAssetRatesResponse_Result interface {
	isQueryAssetRatesResponse_Result()
}

type QueryAssetRatesResponse_Ok struct {
	// ok is the successful response to the query.
	Ok *QueryAssetRatesOkResponse `protobuf:"bytes,1,opt,name=ok,proto3,oneof"`
}

type QueryAssetRatesResponse_Error struct {
	// error is the error response to the query.
	Error *QueryAssetRatesErrResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*QueryAssetRatesResponse_Ok) isQueryAssetRatesResponse_Result() {}

func (*QueryAssetRatesResponse_Error) isQueryAssetRatesResponse_Result() {}

var File_priceoraclerpc_price_oracle_proto protoreflect.FileDescriptor

var file_priceoraclerpc_price_oracle_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x72, 0x70, 0x63, 0x22, 0x44, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02,
	0x69, 0x64, 0x22, 0x9b, 0x04, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x58, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x1a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x72, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x72, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x29, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x4c,
	0x45, 0x10, 0x01, 0x2a, 0xcd, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x56, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46,
	0x59, 0x10, 0x06, 0x2a, 0x57, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x32, 0x71, 0x0a, 0x0b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_priceoraclerpc_price_oracle_proto_rawDescOnce sync.Once
	file_priceoraclerpc_price_oracle_proto_rawDescData = file_priceoraclerpc_price_oracle_proto_rawDesc
)

func file_priceoraclerpc_price_oracle_proto_rawDescGZIP() []byte {
	file_priceoraclerpc_price_oracle_proto_rawDescOnce.Do(func() {
		file_priceoraclerpc_price_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_priceoraclerpc_price_oracle_proto_rawDescData)
	})
	return file_priceoraclerpc_price_oracle_proto_rawDescData
}

var file_priceoraclerpc_price_oracle_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_priceoraclerpc_price_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_priceoraclerpc_price_oracle_proto_goTypes = []any{
	(TransactionType)(0),               // 0: priceoraclerpc.TransactionType
	(Intent)(0),                        // 1: priceoraclerpc.Intent
	(ErrorCode)(0),                     // 2: priceoraclerpc.ErrorCode
	(*FixedPoint)(nil),                 // 3: priceoraclerpc.FixedPoint
	(*AssetRates)(nil),                 // 4: priceoraclerpc.AssetRates
	(*AssetSpecifier)(nil),             // 5: priceoraclerpc.AssetSpecifier
	(*QueryAssetRatesRequest)(nil),     // 6: priceoraclerpc.QueryAssetRatesRequest
	(*QueryAssetRatesOkResponse)(nil),  // 7: priceoraclerpc.QueryAssetRatesOkResponse
	(*QueryAssetRatesErrResponse)(nil), // 8: priceoraclerpc.QueryAssetRatesErrResponse
	(*QueryAssetRatesResponse)(nil),    // 9: priceoraclerpc.QueryAssetRatesResponse
}
var file_priceoraclerpc_price_oracle_proto_depIdxs = []int32{
	3,  // 0: priceoraclerpc.AssetRates.subjectAssetRate:type_name -> priceoraclerpc.FixedPoint
	3,  // 1: priceoraclerpc.AssetRates.paymentAssetRate:type_name -> priceoraclerpc.FixedPoint
	0,  // 2: priceoraclerpc.QueryAssetRatesRequest.transaction_type:type_name -> priceoraclerpc.TransactionType
	5,  // 3: priceoraclerpc.QueryAssetRatesRequest.subject_asset:type_name -> priceoraclerpc.AssetSpecifier
	5,  // 4: priceoraclerpc.QueryAssetRatesRequest.payment_asset:type_name -> priceoraclerpc.AssetSpecifier
	4,  // 5: priceoraclerpc.QueryAssetRatesRequest.asset_rates_hint:type_name -> priceoraclerpc.AssetRates
	1,  // 6: priceoraclerpc.QueryAssetRatesRequest.intent:type_name -> priceoraclerpc.Intent
	4,  // 7: priceoraclerpc.QueryAssetRatesOkResponse.asset_rates:type_name -> priceoraclerpc.AssetRates
	2,  // 8: priceoraclerpc.QueryAssetRatesErrResponse.code:type_name -> priceoraclerpc.ErrorCode
	7,  // 9: priceoraclerpc.QueryAssetRatesResponse.ok:type_name -> priceoraclerpc.QueryAssetRatesOkResponse
	8,  // 10: priceoraclerpc.QueryAssetRatesResponse.error:type_name -> priceoraclerpc.QueryAssetRatesErrResponse
	6,  // 11: priceoraclerpc.PriceOracle.QueryAssetRates:input_type -> priceoraclerpc.QueryAssetRatesRequest
	9,  // 12: priceoraclerpc.PriceOracle.QueryAssetRates:output_type -> priceoraclerpc.QueryAssetRatesResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_priceoraclerpc_price_oracle_proto_init() }
func file_priceoraclerpc_price_oracle_proto_init() {
	if File_priceoraclerpc_price_oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_priceoraclerpc_price_oracle_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FixedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AssetRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AssetSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAssetRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAssetRatesOkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAssetRatesErrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAssetRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_priceoraclerpc_price_oracle_proto_msgTypes[2].OneofWrappers = []any{
		(*AssetSpecifier_AssetId)(nil),
		(*AssetSpecifier_AssetIdStr)(nil),
		(*AssetSpecifier_GroupKey)(nil),
		(*AssetSpecifier_GroupKeyStr)(nil),
	}
	file_priceoraclerpc_price_oracle_proto_msgTypes[6].OneofWrappers = []any{
		(*QueryAssetRatesResponse_Ok)(nil),
		(*QueryAssetRatesResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_priceoraclerpc_price_oracle_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_priceoraclerpc_price_oracle_proto_goTypes,
		DependencyIndexes: file_priceoraclerpc_price_oracle_proto_depIdxs,
		EnumInfos:         file_priceoraclerpc_price_oracle_proto_enumTypes,
		MessageInfos:      file_priceoraclerpc_price_oracle_proto_msgTypes,
	}.Build()
	File_priceoraclerpc_price_oracle_proto = out.File
	file_priceoraclerpc_price_oracle_proto_rawDesc = nil
	file_priceoraclerpc_price_oracle_proto_goTypes = nil
	file_priceoraclerpc_price_oracle_proto_depIdxs = nil
}
