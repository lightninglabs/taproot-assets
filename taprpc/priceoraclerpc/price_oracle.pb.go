// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: priceoraclerpc/price_oracle.proto

package priceoraclerpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransactionType is an enum representing the type of transaction.
type TransactionType int32

const (
	// PURCHASE indicates a purchase transaction.
	TransactionType_PURCHASE TransactionType = 0
	// SALE indicates a sale transaction.
	TransactionType_SALE TransactionType = 1
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "PURCHASE",
		1: "SALE",
	}
	TransactionType_value = map[string]int32{
		"PURCHASE": 0,
		"SALE":     1,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_priceoraclerpc_price_oracle_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_priceoraclerpc_price_oracle_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{0}
}

// FixedPoint is a scaled integer representation of a fractional number.
//
// This type consists of two integer fields: a coefficient and a scale.
// Using this format enables precise and consistent representation of fractional
// numbers while avoiding floating-point data types, which are prone to
// precision errors.
//
// The relationship between the fractional representation and its fixed-point
// representation is expressed as:
// ```
// V = F_c / (10^F_s)
// ```
// where:
//
// * `V` is the fractional value.
//
//   - `F_c` is the coefficient component of the fixed-point representation. It is
//     the scaled-up fractional value represented as an integer.
//
//   - `F_s` is the scale component. It is an integer specifying how
//     many decimal places `F_c` should be divided by to obtain the fractional
//     representation.
type FixedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coefficient is the fractional value scaled-up as an integer.
	Coefficient uint64 `protobuf:"varint,1,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
	// The scale is the component that determines how many decimal places
	// the coefficient should be divided by to obtain the fractional value.
	Scale uint32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *FixedPoint) Reset() {
	*x = FixedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPoint) ProtoMessage() {}

func (x *FixedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedPoint.ProtoReflect.Descriptor instead.
func (*FixedPoint) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *FixedPoint) GetCoefficient() uint64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *FixedPoint) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// RateTick is the internal unit used for asset conversions. A tick is 1/10000th
// of a currency unit. It gives us up to 4 decimal places of precision (0.0001
// or 0.01% or 1 bps). As an example, if the BTC/USD rate was $61,234.95, then
// we multiply that by 10,000 to arrive at the usd_rate_tick:
// $61,234.95 * 10000 = 612,349,500. To convert back to our normal rate, we
// decide by 10,000 to arrive back at $61,234.95.
//
// NOTE: That if the payment asset is BTC, the rate tick will be given as
// milli-satoshi per asset unit.
type RateTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subjectAssetRate is the subject asset to BTC conversion rate
	// represented as a fixed-point number. When the subject asset is BTC
	// milli-satoshis (msats), this field should be set to 100 billion since
	// there are 100 billion msats in a BTC.
	SubjectAssetRate *FixedPoint `protobuf:"bytes,1,opt,name=subjectAssetRate,proto3" json:"subjectAssetRate,omitempty"`
	// paymentAssetRate is the payment asset to BTC conversion rate
	// represented as a fixed-point number. When the payment asset is BTC
	// milli-satoshis (msats), this field should be set to 100 billion since
	// there are 100 billion msats in a BTC.
	PaymentAssetRate *FixedPoint `protobuf:"bytes,2,opt,name=paymentAssetRate,proto3" json:"paymentAssetRate,omitempty"`
	// expiry_timestamp is the Unix timestamp in seconds after which the rate
	// tick is no longer valid.
	ExpiryTimestamp uint64 `protobuf:"varint,3,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
}

func (x *RateTick) Reset() {
	*x = RateTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateTick) ProtoMessage() {}

func (x *RateTick) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateTick.ProtoReflect.Descriptor instead.
func (*RateTick) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *RateTick) GetSubjectAssetRate() *FixedPoint {
	if x != nil {
		return x.SubjectAssetRate
	}
	return nil
}

func (x *RateTick) GetPaymentAssetRate() *FixedPoint {
	if x != nil {
		return x.PaymentAssetRate
	}
	return nil
}

func (x *RateTick) GetExpiryTimestamp() uint64 {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return 0
}

// AssetSpecifier is a union type for specifying an asset by either its asset ID
// or group key.
type AssetSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*AssetSpecifier_AssetId
	//	*AssetSpecifier_AssetIdStr
	//	*AssetSpecifier_GroupKey
	//	*AssetSpecifier_GroupKeyStr
	Id isAssetSpecifier_Id `protobuf_oneof:"id"`
}

func (x *AssetSpecifier) Reset() {
	*x = AssetSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSpecifier) ProtoMessage() {}

func (x *AssetSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSpecifier.ProtoReflect.Descriptor instead.
func (*AssetSpecifier) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{2}
}

func (m *AssetSpecifier) GetId() isAssetSpecifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AssetSpecifier) GetAssetId() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *AssetSpecifier) GetAssetIdStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *AssetSpecifier) GetGroupKey() []byte {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *AssetSpecifier) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*AssetSpecifier_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isAssetSpecifier_Id interface {
	isAssetSpecifier_Id()
}

type AssetSpecifier_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type AssetSpecifier_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type AssetSpecifier_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type AssetSpecifier_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*AssetSpecifier_AssetId) isAssetSpecifier_Id() {}

func (*AssetSpecifier_AssetIdStr) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKey) isAssetSpecifier_Id() {}

func (*AssetSpecifier_GroupKeyStr) isAssetSpecifier_Id() {}

// QueryRateTickResponse is the request to a rate tick query.
type QueryRateTickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction_type indicates whether the transaction is a purchase or a
	// sale.
	TransactionType TransactionType `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3,enum=priceoraclerpc.TransactionType" json:"transaction_type,omitempty"`
	// subject_asset is the asset to be priced for purchase or sale.
	SubjectAsset *AssetSpecifier `protobuf:"bytes,2,opt,name=subject_asset,json=subjectAsset,proto3" json:"subject_asset,omitempty"`
	// subject_asset_max_amount is the maximum amount of the subject asset that
	// could be involved in the transaction.
	SubjectAssetMaxAmount uint64 `protobuf:"varint,3,opt,name=subject_asset_max_amount,json=subjectAssetMaxAmount,proto3" json:"subject_asset_max_amount,omitempty"`
	// payment_asset is the asset used for purchasing or receiving from a sale.
	//
	// NOTE: An asset ID of all zeros indicates that the payment asset is BTC.
	// In this case, the rate tick will be given as milli-satoshi per asset
	// unit
	PaymentAsset *AssetSpecifier `protobuf:"bytes,4,opt,name=payment_asset,json=paymentAsset,proto3" json:"payment_asset,omitempty"`
	// rate_tick_hint is an optional suggested rate tick for the transaction,
	// used to provide guidance on expected pricing.
	RateTickHint *RateTick `protobuf:"bytes,5,opt,name=rate_tick_hint,json=rateTickHint,proto3" json:"rate_tick_hint,omitempty"`
}

func (x *QueryRateTickRequest) Reset() {
	*x = QueryRateTickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRateTickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRateTickRequest) ProtoMessage() {}

func (x *QueryRateTickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRateTickRequest.ProtoReflect.Descriptor instead.
func (*QueryRateTickRequest) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *QueryRateTickRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_PURCHASE
}

func (x *QueryRateTickRequest) GetSubjectAsset() *AssetSpecifier {
	if x != nil {
		return x.SubjectAsset
	}
	return nil
}

func (x *QueryRateTickRequest) GetSubjectAssetMaxAmount() uint64 {
	if x != nil {
		return x.SubjectAssetMaxAmount
	}
	return 0
}

func (x *QueryRateTickRequest) GetPaymentAsset() *AssetSpecifier {
	if x != nil {
		return x.PaymentAsset
	}
	return nil
}

func (x *QueryRateTickRequest) GetRateTickHint() *RateTick {
	if x != nil {
		return x.RateTickHint
	}
	return nil
}

// QueryRateTickSuccessResponse is the successful response to a rate tick query.
type QueryRateTickSuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate_tick is the rate tick for the transaction.
	RateTick *RateTick `protobuf:"bytes,1,opt,name=rate_tick,json=rateTick,proto3" json:"rate_tick,omitempty"`
}

func (x *QueryRateTickSuccessResponse) Reset() {
	*x = QueryRateTickSuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRateTickSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRateTickSuccessResponse) ProtoMessage() {}

func (x *QueryRateTickSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRateTickSuccessResponse.ProtoReflect.Descriptor instead.
func (*QueryRateTickSuccessResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *QueryRateTickSuccessResponse) GetRateTick() *RateTick {
	if x != nil {
		return x.RateTick
	}
	return nil
}

// QueryRateTickErrResponse is the error response to a rate tick query.
type QueryRateTickErrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error is the error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// code is the error code.
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *QueryRateTickErrResponse) Reset() {
	*x = QueryRateTickErrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRateTickErrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRateTickErrResponse) ProtoMessage() {}

func (x *QueryRateTickErrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRateTickErrResponse.ProtoReflect.Descriptor instead.
func (*QueryRateTickErrResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRateTickErrResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryRateTickErrResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// QueryRateTickResponse is the response to a rate tick query.
type QueryRateTickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*QueryRateTickResponse_Success
	//	*QueryRateTickResponse_Error
	Result isQueryRateTickResponse_Result `protobuf_oneof:"result"`
}

func (x *QueryRateTickResponse) Reset() {
	*x = QueryRateTickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRateTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRateTickResponse) ProtoMessage() {}

func (x *QueryRateTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_priceoraclerpc_price_oracle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRateTickResponse.ProtoReflect.Descriptor instead.
func (*QueryRateTickResponse) Descriptor() ([]byte, []int) {
	return file_priceoraclerpc_price_oracle_proto_rawDescGZIP(), []int{6}
}

func (m *QueryRateTickResponse) GetResult() isQueryRateTickResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *QueryRateTickResponse) GetSuccess() *QueryRateTickSuccessResponse {
	if x, ok := x.GetResult().(*QueryRateTickResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *QueryRateTickResponse) GetError() *QueryRateTickErrResponse {
	if x, ok := x.GetResult().(*QueryRateTickResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isQueryRateTickResponse_Result interface {
	isQueryRateTickResponse_Result()
}

type QueryRateTickResponse_Success struct {
	// success is the successful response to the rate tick query.
	Success *QueryRateTickSuccessResponse `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type QueryRateTickResponse_Error struct {
	// error is the error response to the rate tick query.
	Error *QueryRateTickErrResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*QueryRateTickResponse_Success) isQueryRateTickResponse_Result() {}

func (*QueryRateTickResponse_Error) isQueryRateTickResponse_Result() {}

var File_priceoraclerpc_price_oracle_proto protoreflect.FileDescriptor

var file_priceoraclerpc_price_oracle_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x72, 0x70, 0x63, 0x22, 0x44, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64,
	0x22, 0xe5, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x22,
	0x48, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x45, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x29, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41,
	0x4c, 0x45, 0x10, 0x01, 0x32, 0x6b, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_priceoraclerpc_price_oracle_proto_rawDescOnce sync.Once
	file_priceoraclerpc_price_oracle_proto_rawDescData = file_priceoraclerpc_price_oracle_proto_rawDesc
)

func file_priceoraclerpc_price_oracle_proto_rawDescGZIP() []byte {
	file_priceoraclerpc_price_oracle_proto_rawDescOnce.Do(func() {
		file_priceoraclerpc_price_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_priceoraclerpc_price_oracle_proto_rawDescData)
	})
	return file_priceoraclerpc_price_oracle_proto_rawDescData
}

var file_priceoraclerpc_price_oracle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_priceoraclerpc_price_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_priceoraclerpc_price_oracle_proto_goTypes = []interface{}{
	(TransactionType)(0),                 // 0: priceoraclerpc.TransactionType
	(*FixedPoint)(nil),                   // 1: priceoraclerpc.FixedPoint
	(*RateTick)(nil),                     // 2: priceoraclerpc.RateTick
	(*AssetSpecifier)(nil),               // 3: priceoraclerpc.AssetSpecifier
	(*QueryRateTickRequest)(nil),         // 4: priceoraclerpc.QueryRateTickRequest
	(*QueryRateTickSuccessResponse)(nil), // 5: priceoraclerpc.QueryRateTickSuccessResponse
	(*QueryRateTickErrResponse)(nil),     // 6: priceoraclerpc.QueryRateTickErrResponse
	(*QueryRateTickResponse)(nil),        // 7: priceoraclerpc.QueryRateTickResponse
}
var file_priceoraclerpc_price_oracle_proto_depIdxs = []int32{
	1,  // 0: priceoraclerpc.RateTick.subjectAssetRate:type_name -> priceoraclerpc.FixedPoint
	1,  // 1: priceoraclerpc.RateTick.paymentAssetRate:type_name -> priceoraclerpc.FixedPoint
	0,  // 2: priceoraclerpc.QueryRateTickRequest.transaction_type:type_name -> priceoraclerpc.TransactionType
	3,  // 3: priceoraclerpc.QueryRateTickRequest.subject_asset:type_name -> priceoraclerpc.AssetSpecifier
	3,  // 4: priceoraclerpc.QueryRateTickRequest.payment_asset:type_name -> priceoraclerpc.AssetSpecifier
	2,  // 5: priceoraclerpc.QueryRateTickRequest.rate_tick_hint:type_name -> priceoraclerpc.RateTick
	2,  // 6: priceoraclerpc.QueryRateTickSuccessResponse.rate_tick:type_name -> priceoraclerpc.RateTick
	5,  // 7: priceoraclerpc.QueryRateTickResponse.success:type_name -> priceoraclerpc.QueryRateTickSuccessResponse
	6,  // 8: priceoraclerpc.QueryRateTickResponse.error:type_name -> priceoraclerpc.QueryRateTickErrResponse
	4,  // 9: priceoraclerpc.PriceOracle.QueryRateTick:input_type -> priceoraclerpc.QueryRateTickRequest
	7,  // 10: priceoraclerpc.PriceOracle.QueryRateTick:output_type -> priceoraclerpc.QueryRateTickResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_priceoraclerpc_price_oracle_proto_init() }
func file_priceoraclerpc_price_oracle_proto_init() {
	if File_priceoraclerpc_price_oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_priceoraclerpc_price_oracle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRateTickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRateTickSuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRateTickErrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_priceoraclerpc_price_oracle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRateTickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_priceoraclerpc_price_oracle_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AssetSpecifier_AssetId)(nil),
		(*AssetSpecifier_AssetIdStr)(nil),
		(*AssetSpecifier_GroupKey)(nil),
		(*AssetSpecifier_GroupKeyStr)(nil),
	}
	file_priceoraclerpc_price_oracle_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*QueryRateTickResponse_Success)(nil),
		(*QueryRateTickResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_priceoraclerpc_price_oracle_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_priceoraclerpc_price_oracle_proto_goTypes,
		DependencyIndexes: file_priceoraclerpc_price_oracle_proto_depIdxs,
		EnumInfos:         file_priceoraclerpc_price_oracle_proto_enumTypes,
		MessageInfos:      file_priceoraclerpc_price_oracle_proto_msgTypes,
	}.Build()
	File_priceoraclerpc_price_oracle_proto = out.File
	file_priceoraclerpc_price_oracle_proto_rawDesc = nil
	file_priceoraclerpc_price_oracle_proto_goTypes = nil
	file_priceoraclerpc_price_oracle_proto_depIdxs = nil
}
