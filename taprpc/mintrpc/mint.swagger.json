{
  "swagger": "2.0",
  "info": {
    "title": "mintrpc/mint.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Mint"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/taproot-assets/assets": {
      "post": {
        "summary": "tapcli: `assets mint`\nMintAsset will attempt to mint the set of assets (async by default to\nensure proper batching) specified in the request. The pending batch is\nreturned that shows the other pending assets that are part of the next\nbatch. This call will block until the operation succeeds (asset is staged\nin the batch) or fails.",
        "operationId": "Mint_MintAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcMintAssetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintrpcMintAssetRequest"
            }
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    },
    "/v1/taproot-assets/assets/mint/batches/{batch_key}": {
      "get": {
        "summary": "tapcli: `assets mint batches`\nListBatches lists the set of batches submitted to the daemon, including\npending and cancelled batches.",
        "operationId": "Mint_ListBatches",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcListBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "batch_key",
            "description": "The optional batch key of the batch to list, specified as raw bytes\n(gRPC only).",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "batch_key_str",
            "description": "The optional batch key of the batch to list, specified as a hex\nencoded string (use this for REST).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    },
    "/v1/taproot-assets/assets/mint/cancel": {
      "post": {
        "summary": "tapcli: `assets mint cancel`\nCancelBatch will attempt to cancel the current pending batch.",
        "operationId": "Mint_CancelBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcCancelBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintrpcCancelBatchRequest"
            }
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    },
    "/v1/taproot-assets/assets/mint/finalize": {
      "post": {
        "summary": "tapcli: `assets mint finalize`\nFinalizeBatch will attempt to finalize the current pending batch.",
        "operationId": "Mint_FinalizeBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mintrpcFinalizeBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintrpcFinalizeBatchRequest"
            }
          }
        ],
        "tags": [
          "Mint"
        ]
      }
    }
  },
  "definitions": {
    "mintrpcBatchState": {
      "type": "string",
      "enum": [
        "BATCH_STATE_UNKNOWN",
        "BATCH_STATE_PEDNING",
        "BATCH_STATE_FROZEN",
        "BATCH_STATE_COMMITTED",
        "BATCH_STATE_BROADCAST",
        "BATCH_STATE_CONFIRMED",
        "BATCH_STATE_FINALIZED",
        "BATCH_STATE_SEEDLING_CANCELLED",
        "BATCH_STATE_SPROUT_CANCELLED"
      ],
      "default": "BATCH_STATE_UNKNOWN"
    },
    "mintrpcCancelBatchRequest": {
      "type": "object"
    },
    "mintrpcCancelBatchResponse": {
      "type": "object",
      "properties": {
        "batch_key": {
          "type": "string",
          "format": "byte",
          "description": "The internal public key of the batch."
        }
      }
    },
    "mintrpcFinalizeBatchRequest": {
      "type": "object",
      "properties": {
        "short_response": {
          "type": "boolean",
          "description": "If true, then the assets currently in the batch won't be returned in the\nresponse. This is mainly to avoid a lot of data being transmitted and\npossibly printed on the command line in the case of a very large batch."
        }
      }
    },
    "mintrpcFinalizeBatchResponse": {
      "type": "object",
      "properties": {
        "batch": {
          "$ref": "#/definitions/mintrpcMintingBatch",
          "description": "The finalized batch."
        }
      }
    },
    "mintrpcListBatchResponse": {
      "type": "object",
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mintrpcMintingBatch"
          }
        }
      }
    },
    "mintrpcMintAsset": {
      "type": "object",
      "properties": {
        "asset_type": {
          "$ref": "#/definitions/taprpcAssetType",
          "description": "The type of the asset to be created."
        },
        "name": {
          "type": "string",
          "description": "The name, or \"tag\" of the asset. This will affect the final asset ID."
        },
        "asset_meta": {
          "$ref": "#/definitions/taprpcAssetMeta",
          "description": "A blob that resents metadata related to the asset. This will affect the\nfinal asset ID."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of units of the new asset that should be created. If the\nAssetType is Collectible, then this field cannot be set."
        },
        "group_key": {
          "type": "string",
          "format": "byte",
          "description": "The specific group key this asset should be minted with."
        },
        "group_anchor": {
          "type": "string",
          "description": "The name of the asset in the batch that will anchor a new asset group.\nThis asset will be minted with the same group key as the anchor asset."
        }
      }
    },
    "mintrpcMintAssetRequest": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/mintrpcMintAsset",
          "description": "The asset to be minted."
        },
        "enable_emission": {
          "type": "boolean",
          "description": "If true, then the asset will be created with a group key, which allows for\nfuture asset issuance."
        },
        "short_response": {
          "type": "boolean",
          "description": "If true, then the assets currently in the batch won't be returned in the\nresponse. This is mainly to avoid a lot of data being transmitted and\npossibly printed on the command line in the case of a very large batch."
        }
      }
    },
    "mintrpcMintAssetResponse": {
      "type": "object",
      "properties": {
        "pending_batch": {
          "$ref": "#/definitions/mintrpcMintingBatch",
          "description": "The pending batch the asset was added to."
        }
      }
    },
    "mintrpcMintingBatch": {
      "type": "object",
      "properties": {
        "batch_key": {
          "type": "string",
          "format": "byte",
          "description": "A public key serialized in compressed format that can be used to uniquely\nidentify a pending minting batch. Responses that share the same key will be\nbatched into the same minting transaction."
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mintrpcMintAsset"
          },
          "description": "The assets that are part of the batch."
        },
        "state": {
          "$ref": "#/definitions/mintrpcBatchState",
          "description": "The state of the batch."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "taprpcAssetMeta": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The raw data of the asset meta data. Based on the type below, this may be\nstructured data such as a text file or PDF."
        },
        "type": {
          "$ref": "#/definitions/taprpcAssetMetaType",
          "description": "The type of the asset meta data."
        },
        "meta_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the meta. This is the hash of the TLV serialization of the meta\nitself."
        }
      }
    },
    "taprpcAssetMetaType": {
      "type": "string",
      "enum": [
        "META_TYPE_OPAQUE"
      ],
      "default": "META_TYPE_OPAQUE",
      "description": " - META_TYPE_OPAQUE: Opaque is used for asset meta blobs that have no true structure and instead\nshould be interpreted as opaque blobs."
    },
    "taprpcAssetType": {
      "type": "string",
      "enum": [
        "NORMAL",
        "COLLECTIBLE"
      ],
      "default": "NORMAL",
      "description": " - NORMAL: Indicates that an asset is capable of being split/merged, with each of the\nunits being fungible, even across a key asset ID boundary (assuming the\nkey group is the same).\n - COLLECTIBLE: Indicates that an asset is a collectible, meaning that each of the other\nitems under the same key group are not fully fungible with each other.\nCollectibles also cannot be split or merged."
    }
  }
}
