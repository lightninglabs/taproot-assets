// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: mintrpc/mint.proto

package mintrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchState int32

const (
	BatchState_BATCH_STATE_UNKNOWN            BatchState = 0
	BatchState_BATCH_STATE_PENDING            BatchState = 1
	BatchState_BATCH_STATE_FROZEN             BatchState = 2
	BatchState_BATCH_STATE_COMMITTED          BatchState = 3
	BatchState_BATCH_STATE_BROADCAST          BatchState = 4
	BatchState_BATCH_STATE_CONFIRMED          BatchState = 5
	BatchState_BATCH_STATE_FINALIZED          BatchState = 6
	BatchState_BATCH_STATE_SEEDLING_CANCELLED BatchState = 7
	BatchState_BATCH_STATE_SPROUT_CANCELLED   BatchState = 8
)

// Enum value maps for BatchState.
var (
	BatchState_name = map[int32]string{
		0: "BATCH_STATE_UNKNOWN",
		1: "BATCH_STATE_PENDING",
		2: "BATCH_STATE_FROZEN",
		3: "BATCH_STATE_COMMITTED",
		4: "BATCH_STATE_BROADCAST",
		5: "BATCH_STATE_CONFIRMED",
		6: "BATCH_STATE_FINALIZED",
		7: "BATCH_STATE_SEEDLING_CANCELLED",
		8: "BATCH_STATE_SPROUT_CANCELLED",
	}
	BatchState_value = map[string]int32{
		"BATCH_STATE_UNKNOWN":            0,
		"BATCH_STATE_PENDING":            1,
		"BATCH_STATE_FROZEN":             2,
		"BATCH_STATE_COMMITTED":          3,
		"BATCH_STATE_BROADCAST":          4,
		"BATCH_STATE_CONFIRMED":          5,
		"BATCH_STATE_FINALIZED":          6,
		"BATCH_STATE_SEEDLING_CANCELLED": 7,
		"BATCH_STATE_SPROUT_CANCELLED":   8,
	}
)

func (x BatchState) Enum() *BatchState {
	p := new(BatchState)
	*p = x
	return p
}

func (x BatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_mintrpc_mint_proto_enumTypes[0].Descriptor()
}

func (BatchState) Type() protoreflect.EnumType {
	return &file_mintrpc_mint_proto_enumTypes[0]
}

func (x BatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchState.Descriptor instead.
func (BatchState) EnumDescriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{0}
}

type PendingAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of asset to mint.
	AssetVersion taprpc.AssetVersion `protobuf:"varint,1,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The type of the asset to be created.
	AssetType taprpc.AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A blob that resents metadata related to the asset. This will affect the
	// final asset ID.
	AssetMeta *taprpc.AssetMeta `protobuf:"bytes,4,opt,name=asset_meta,json=assetMeta,proto3" json:"asset_meta,omitempty"`
	// The total amount of units of the new asset that should be created. If the
	// AssetType is Collectible, then this field cannot be set.
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// If true, then the asset will be created with a new group key, which allows
	// for future asset issuance.
	NewGroupedAsset bool `protobuf:"varint,6,opt,name=new_grouped_asset,json=newGroupedAsset,proto3" json:"new_grouped_asset,omitempty"`
	// The specific group key this asset should be minted with.
	GroupKey []byte `protobuf:"bytes,7,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The name of the asset in the batch that will anchor a new asset group.
	// This asset will be minted with the same group key as the anchor asset.
	GroupAnchor string `protobuf:"bytes,8,opt,name=group_anchor,json=groupAnchor,proto3" json:"group_anchor,omitempty"`
}

func (x *PendingAsset) Reset() {
	*x = PendingAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAsset) ProtoMessage() {}

func (x *PendingAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAsset.ProtoReflect.Descriptor instead.
func (*PendingAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{0}
}

func (x *PendingAsset) GetAssetVersion() taprpc.AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return taprpc.AssetVersion(0)
}

func (x *PendingAsset) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *PendingAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PendingAsset) GetAssetMeta() *taprpc.AssetMeta {
	if x != nil {
		return x.AssetMeta
	}
	return nil
}

func (x *PendingAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PendingAsset) GetNewGroupedAsset() bool {
	if x != nil {
		return x.NewGroupedAsset
	}
	return false
}

func (x *PendingAsset) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *PendingAsset) GetGroupAnchor() string {
	if x != nil {
		return x.GroupAnchor
	}
	return ""
}

type MintAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of asset to mint.
	AssetVersion taprpc.AssetVersion `protobuf:"varint,1,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The type of the asset to be created.
	AssetType taprpc.AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A blob that resents metadata related to the asset. This will affect the
	// final asset ID.
	AssetMeta *taprpc.AssetMeta `protobuf:"bytes,4,opt,name=asset_meta,json=assetMeta,proto3" json:"asset_meta,omitempty"`
	// The total amount of units of the new asset that should be created. If the
	// AssetType is Collectible, then this field cannot be set.
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// If true, then the asset will be created with a group key, which allows for
	// future asset issuance.
	NewGroupedAsset bool `protobuf:"varint,6,opt,name=new_grouped_asset,json=newGroupedAsset,proto3" json:"new_grouped_asset,omitempty"`
	// If true, then a group key or group anchor can be set to mint this asset into
	// an existing asset group.
	GroupedAsset bool `protobuf:"varint,7,opt,name=grouped_asset,json=groupedAsset,proto3" json:"grouped_asset,omitempty"`
	// The specific group key this asset should be minted with.
	GroupKey []byte `protobuf:"bytes,8,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The name of the asset in the batch that will anchor a new asset group.
	// This asset will be minted with the same group key as the anchor asset.
	GroupAnchor string `protobuf:"bytes,9,opt,name=group_anchor,json=groupAnchor,proto3" json:"group_anchor,omitempty"`
}

func (x *MintAsset) Reset() {
	*x = MintAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAsset) ProtoMessage() {}

func (x *MintAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAsset.ProtoReflect.Descriptor instead.
func (*MintAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{1}
}

func (x *MintAsset) GetAssetVersion() taprpc.AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return taprpc.AssetVersion(0)
}

func (x *MintAsset) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *MintAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MintAsset) GetAssetMeta() *taprpc.AssetMeta {
	if x != nil {
		return x.AssetMeta
	}
	return nil
}

func (x *MintAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintAsset) GetNewGroupedAsset() bool {
	if x != nil {
		return x.NewGroupedAsset
	}
	return false
}

func (x *MintAsset) GetGroupedAsset() bool {
	if x != nil {
		return x.GroupedAsset
	}
	return false
}

func (x *MintAsset) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *MintAsset) GetGroupAnchor() string {
	if x != nil {
		return x.GroupAnchor
	}
	return ""
}

type MintAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset to be minted.
	Asset *MintAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,2,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
}

func (x *MintAssetRequest) Reset() {
	*x = MintAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetRequest) ProtoMessage() {}

func (x *MintAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetRequest.ProtoReflect.Descriptor instead.
func (*MintAssetRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{2}
}

func (x *MintAssetRequest) GetAsset() *MintAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *MintAssetRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type MintAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pending batch the asset was added to.
	PendingBatch *MintingBatch `protobuf:"bytes,1,opt,name=pending_batch,json=pendingBatch,proto3" json:"pending_batch,omitempty"`
}

func (x *MintAssetResponse) Reset() {
	*x = MintAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetResponse) ProtoMessage() {}

func (x *MintAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetResponse.ProtoReflect.Descriptor instead.
func (*MintAssetResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{3}
}

func (x *MintAssetResponse) GetPendingBatch() *MintingBatch {
	if x != nil {
		return x.PendingBatch
	}
	return nil
}

type MintingBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A public key serialized in compressed format that can be used to uniquely
	// identify a pending minting batch. Responses that share the same key will be
	// batched into the same minting transaction.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The transaction ID of the batch. Only populated if the batch has been
	// committed.
	BatchTxid string `protobuf:"bytes,2,opt,name=batch_txid,json=batchTxid,proto3" json:"batch_txid,omitempty"`
	// The state of the batch.
	State BatchState `protobuf:"varint,3,opt,name=state,proto3,enum=mintrpc.BatchState" json:"state,omitempty"`
	// The assets that are part of the batch.
	Assets []*PendingAsset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
	// The time the batch was created as a Unix timestamp (in seconds).
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The current height of the block chain at the time of the batch creation.
	HeightHint uint32 `protobuf:"varint,6,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	// The genesis transaction as a PSBT packet. Only populated if the batch has
	// been committed.
	BatchPsbt []byte `protobuf:"bytes,7,opt,name=batch_psbt,json=batchPsbt,proto3" json:"batch_psbt,omitempty"`
}

func (x *MintingBatch) Reset() {
	*x = MintingBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintingBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintingBatch) ProtoMessage() {}

func (x *MintingBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintingBatch.ProtoReflect.Descriptor instead.
func (*MintingBatch) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{4}
}

func (x *MintingBatch) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *MintingBatch) GetBatchTxid() string {
	if x != nil {
		return x.BatchTxid
	}
	return ""
}

func (x *MintingBatch) GetState() BatchState {
	if x != nil {
		return x.State
	}
	return BatchState_BATCH_STATE_UNKNOWN
}

func (x *MintingBatch) GetAssets() []*PendingAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MintingBatch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MintingBatch) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *MintingBatch) GetBatchPsbt() []byte {
	if x != nil {
		return x.BatchPsbt
	}
	return nil
}

type FinalizeBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	// The optional fee rate to use for the minting transaction, in sat/kw.
	FeeRate uint32 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// The optional tapscript sibling that will be used when deriving the genesis
	// output for the batch. This sibling is a tapscript tree, which allows the
	// minter to encumber future transfers of assets in the batch with Tapscript.
	//
	// Types that are assignable to BatchSibling:
	//
	//	*FinalizeBatchRequest_FullTree
	//	*FinalizeBatchRequest_Branch
	BatchSibling isFinalizeBatchRequest_BatchSibling `protobuf_oneof:"batch_sibling"`
}

func (x *FinalizeBatchRequest) Reset() {
	*x = FinalizeBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchRequest) ProtoMessage() {}

func (x *FinalizeBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchRequest.ProtoReflect.Descriptor instead.
func (*FinalizeBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{5}
}

func (x *FinalizeBatchRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

func (x *FinalizeBatchRequest) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (m *FinalizeBatchRequest) GetBatchSibling() isFinalizeBatchRequest_BatchSibling {
	if m != nil {
		return m.BatchSibling
	}
	return nil
}

func (x *FinalizeBatchRequest) GetFullTree() *taprpc.TapscriptFullTree {
	if x, ok := x.GetBatchSibling().(*FinalizeBatchRequest_FullTree); ok {
		return x.FullTree
	}
	return nil
}

func (x *FinalizeBatchRequest) GetBranch() *taprpc.TapBranch {
	if x, ok := x.GetBatchSibling().(*FinalizeBatchRequest_Branch); ok {
		return x.Branch
	}
	return nil
}

type isFinalizeBatchRequest_BatchSibling interface {
	isFinalizeBatchRequest_BatchSibling()
}

type FinalizeBatchRequest_FullTree struct {
	// An ordered list of TapLeafs, which will be used to construct a
	// Tapscript tree.
	FullTree *taprpc.TapscriptFullTree `protobuf:"bytes,3,opt,name=full_tree,json=fullTree,proto3,oneof"`
}

type FinalizeBatchRequest_Branch struct {
	// A TapBranch that represents a Tapscript tree managed externally.
	Branch *taprpc.TapBranch `protobuf:"bytes,4,opt,name=branch,proto3,oneof"`
}

func (*FinalizeBatchRequest_FullTree) isFinalizeBatchRequest_BatchSibling() {}

func (*FinalizeBatchRequest_Branch) isFinalizeBatchRequest_BatchSibling() {}

type FinalizeBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The finalized batch.
	Batch *MintingBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *FinalizeBatchResponse) Reset() {
	*x = FinalizeBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchResponse) ProtoMessage() {}

func (x *FinalizeBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchResponse.ProtoReflect.Descriptor instead.
func (*FinalizeBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{6}
}

func (x *FinalizeBatchResponse) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type CancelBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBatchRequest) Reset() {
	*x = CancelBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchRequest) ProtoMessage() {}

func (x *CancelBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchRequest.ProtoReflect.Descriptor instead.
func (*CancelBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{7}
}

type CancelBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal public key of the batch.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
}

func (x *CancelBatchResponse) Reset() {
	*x = CancelBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchResponse) ProtoMessage() {}

func (x *CancelBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchResponse.ProtoReflect.Descriptor instead.
func (*CancelBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{8}
}

func (x *CancelBatchResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type ListBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optional batch key of the batch to list.
	//
	// Types that are assignable to Filter:
	//
	//	*ListBatchRequest_BatchKey
	//	*ListBatchRequest_BatchKeyStr
	Filter isListBatchRequest_Filter `protobuf_oneof:"filter"`
}

func (x *ListBatchRequest) Reset() {
	*x = ListBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchRequest) ProtoMessage() {}

func (x *ListBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchRequest.ProtoReflect.Descriptor instead.
func (*ListBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{9}
}

func (m *ListBatchRequest) GetFilter() isListBatchRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKey() []byte {
	if x, ok := x.GetFilter().(*ListBatchRequest_BatchKey); ok {
		return x.BatchKey
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKeyStr() string {
	if x, ok := x.GetFilter().(*ListBatchRequest_BatchKeyStr); ok {
		return x.BatchKeyStr
	}
	return ""
}

type isListBatchRequest_Filter interface {
	isListBatchRequest_Filter()
}

type ListBatchRequest_BatchKey struct {
	// The optional batch key of the batch to list, specified as raw bytes
	// (gRPC only).
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3,oneof"`
}

type ListBatchRequest_BatchKeyStr struct {
	// The optional batch key of the batch to list, specified as a hex
	// encoded string (use this for REST).
	BatchKeyStr string `protobuf:"bytes,2,opt,name=batch_key_str,json=batchKeyStr,proto3,oneof"`
}

func (*ListBatchRequest_BatchKey) isListBatchRequest_Filter() {}

func (*ListBatchRequest_BatchKeyStr) isListBatchRequest_Filter() {}

type ListBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batches []*MintingBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *ListBatchResponse) Reset() {
	*x = ListBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchResponse) ProtoMessage() {}

func (x *ListBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchResponse.ProtoReflect.Descriptor instead.
func (*ListBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{10}
}

func (x *ListBatchResponse) GetBatches() []*MintingBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type SubscribeMintEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then the assets currently in the batch won't be returned in the
	// event's batch. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
}

func (x *SubscribeMintEventsRequest) Reset() {
	*x = SubscribeMintEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeMintEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMintEventsRequest) ProtoMessage() {}

func (x *SubscribeMintEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMintEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeMintEventsRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeMintEventsRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type MintEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execute timestamp (Unix timestamp in microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The last state of the batch that was successfully executed.
	BatchState BatchState `protobuf:"varint,2,opt,name=batch_state,json=batchState,proto3,enum=mintrpc.BatchState" json:"batch_state,omitempty"`
	// The batch that the event is for.
	Batch *MintingBatch `protobuf:"bytes,3,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *MintEvent) Reset() {
	*x = MintEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintrpc_mint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintEvent) ProtoMessage() {}

func (x *MintEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintEvent.ProtoReflect.Descriptor instead.
func (*MintEvent) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{12}
}

func (x *MintEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MintEvent) GetBatchState() BatchState {
	if x != nil {
		return x.BatchState
	}
	return BatchState_BATCH_STATE_UNKNOWN
}

func (x *MintEvent) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

var File_mintrpc_mint_proto protoreflect.FileDescriptor

var file_mintrpc_mint_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x1a, 0x13, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc5, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xe7, 0x02, 0x0a, 0x09, 0x4d,
	0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x4d, 0x69, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x4d,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x78, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x73, 0x62, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x73, 0x62, 0x74,
	0x22, 0xd0, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69,
	0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x32, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x4b, 0x65, 0x79, 0x22, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2a, 0x88, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x32, 0xfc, 0x02, 0x0a, 0x04,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d,
	0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x6e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d,
	0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x69, 0x6e,
	0x74, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mintrpc_mint_proto_rawDescOnce sync.Once
	file_mintrpc_mint_proto_rawDescData = file_mintrpc_mint_proto_rawDesc
)

func file_mintrpc_mint_proto_rawDescGZIP() []byte {
	file_mintrpc_mint_proto_rawDescOnce.Do(func() {
		file_mintrpc_mint_proto_rawDescData = protoimpl.X.CompressGZIP(file_mintrpc_mint_proto_rawDescData)
	})
	return file_mintrpc_mint_proto_rawDescData
}

var file_mintrpc_mint_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mintrpc_mint_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mintrpc_mint_proto_goTypes = []interface{}{
	(BatchState)(0),                    // 0: mintrpc.BatchState
	(*PendingAsset)(nil),               // 1: mintrpc.PendingAsset
	(*MintAsset)(nil),                  // 2: mintrpc.MintAsset
	(*MintAssetRequest)(nil),           // 3: mintrpc.MintAssetRequest
	(*MintAssetResponse)(nil),          // 4: mintrpc.MintAssetResponse
	(*MintingBatch)(nil),               // 5: mintrpc.MintingBatch
	(*FinalizeBatchRequest)(nil),       // 6: mintrpc.FinalizeBatchRequest
	(*FinalizeBatchResponse)(nil),      // 7: mintrpc.FinalizeBatchResponse
	(*CancelBatchRequest)(nil),         // 8: mintrpc.CancelBatchRequest
	(*CancelBatchResponse)(nil),        // 9: mintrpc.CancelBatchResponse
	(*ListBatchRequest)(nil),           // 10: mintrpc.ListBatchRequest
	(*ListBatchResponse)(nil),          // 11: mintrpc.ListBatchResponse
	(*SubscribeMintEventsRequest)(nil), // 12: mintrpc.SubscribeMintEventsRequest
	(*MintEvent)(nil),                  // 13: mintrpc.MintEvent
	(taprpc.AssetVersion)(0),           // 14: taprpc.AssetVersion
	(taprpc.AssetType)(0),              // 15: taprpc.AssetType
	(*taprpc.AssetMeta)(nil),           // 16: taprpc.AssetMeta
	(*taprpc.TapscriptFullTree)(nil),   // 17: taprpc.TapscriptFullTree
	(*taprpc.TapBranch)(nil),           // 18: taprpc.TapBranch
}
var file_mintrpc_mint_proto_depIdxs = []int32{
	14, // 0: mintrpc.PendingAsset.asset_version:type_name -> taprpc.AssetVersion
	15, // 1: mintrpc.PendingAsset.asset_type:type_name -> taprpc.AssetType
	16, // 2: mintrpc.PendingAsset.asset_meta:type_name -> taprpc.AssetMeta
	14, // 3: mintrpc.MintAsset.asset_version:type_name -> taprpc.AssetVersion
	15, // 4: mintrpc.MintAsset.asset_type:type_name -> taprpc.AssetType
	16, // 5: mintrpc.MintAsset.asset_meta:type_name -> taprpc.AssetMeta
	2,  // 6: mintrpc.MintAssetRequest.asset:type_name -> mintrpc.MintAsset
	5,  // 7: mintrpc.MintAssetResponse.pending_batch:type_name -> mintrpc.MintingBatch
	0,  // 8: mintrpc.MintingBatch.state:type_name -> mintrpc.BatchState
	1,  // 9: mintrpc.MintingBatch.assets:type_name -> mintrpc.PendingAsset
	17, // 10: mintrpc.FinalizeBatchRequest.full_tree:type_name -> taprpc.TapscriptFullTree
	18, // 11: mintrpc.FinalizeBatchRequest.branch:type_name -> taprpc.TapBranch
	5,  // 12: mintrpc.FinalizeBatchResponse.batch:type_name -> mintrpc.MintingBatch
	5,  // 13: mintrpc.ListBatchResponse.batches:type_name -> mintrpc.MintingBatch
	0,  // 14: mintrpc.MintEvent.batch_state:type_name -> mintrpc.BatchState
	5,  // 15: mintrpc.MintEvent.batch:type_name -> mintrpc.MintingBatch
	3,  // 16: mintrpc.Mint.MintAsset:input_type -> mintrpc.MintAssetRequest
	6,  // 17: mintrpc.Mint.FinalizeBatch:input_type -> mintrpc.FinalizeBatchRequest
	8,  // 18: mintrpc.Mint.CancelBatch:input_type -> mintrpc.CancelBatchRequest
	10, // 19: mintrpc.Mint.ListBatches:input_type -> mintrpc.ListBatchRequest
	12, // 20: mintrpc.Mint.SubscribeMintEvents:input_type -> mintrpc.SubscribeMintEventsRequest
	4,  // 21: mintrpc.Mint.MintAsset:output_type -> mintrpc.MintAssetResponse
	7,  // 22: mintrpc.Mint.FinalizeBatch:output_type -> mintrpc.FinalizeBatchResponse
	9,  // 23: mintrpc.Mint.CancelBatch:output_type -> mintrpc.CancelBatchResponse
	11, // 24: mintrpc.Mint.ListBatches:output_type -> mintrpc.ListBatchResponse
	13, // 25: mintrpc.Mint.SubscribeMintEvents:output_type -> mintrpc.MintEvent
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_mintrpc_mint_proto_init() }
func file_mintrpc_mint_proto_init() {
	if File_mintrpc_mint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mintrpc_mint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintingBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeMintEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintrpc_mint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mintrpc_mint_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FinalizeBatchRequest_FullTree)(nil),
		(*FinalizeBatchRequest_Branch)(nil),
	}
	file_mintrpc_mint_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ListBatchRequest_BatchKey)(nil),
		(*ListBatchRequest_BatchKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mintrpc_mint_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mintrpc_mint_proto_goTypes,
		DependencyIndexes: file_mintrpc_mint_proto_depIdxs,
		EnumInfos:         file_mintrpc_mint_proto_enumTypes,
		MessageInfos:      file_mintrpc_mint_proto_msgTypes,
	}.Build()
	File_mintrpc_mint_proto = out.File
	file_mintrpc_mint_proto_rawDesc = nil
	file_mintrpc_mint_proto_goTypes = nil
	file_mintrpc_mint_proto_depIdxs = nil
}
