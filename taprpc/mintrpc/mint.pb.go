// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: mintrpc/mint.proto

package mintrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchState int32

const (
	BatchState_BATCH_STATE_UNKNOWN            BatchState = 0
	BatchState_BATCH_STATE_PENDING            BatchState = 1
	BatchState_BATCH_STATE_FROZEN             BatchState = 2
	BatchState_BATCH_STATE_COMMITTED          BatchState = 3
	BatchState_BATCH_STATE_BROADCAST          BatchState = 4
	BatchState_BATCH_STATE_CONFIRMED          BatchState = 5
	BatchState_BATCH_STATE_FINALIZED          BatchState = 6
	BatchState_BATCH_STATE_SEEDLING_CANCELLED BatchState = 7
	BatchState_BATCH_STATE_SPROUT_CANCELLED   BatchState = 8
)

// Enum value maps for BatchState.
var (
	BatchState_name = map[int32]string{
		0: "BATCH_STATE_UNKNOWN",
		1: "BATCH_STATE_PENDING",
		2: "BATCH_STATE_FROZEN",
		3: "BATCH_STATE_COMMITTED",
		4: "BATCH_STATE_BROADCAST",
		5: "BATCH_STATE_CONFIRMED",
		6: "BATCH_STATE_FINALIZED",
		7: "BATCH_STATE_SEEDLING_CANCELLED",
		8: "BATCH_STATE_SPROUT_CANCELLED",
	}
	BatchState_value = map[string]int32{
		"BATCH_STATE_UNKNOWN":            0,
		"BATCH_STATE_PENDING":            1,
		"BATCH_STATE_FROZEN":             2,
		"BATCH_STATE_COMMITTED":          3,
		"BATCH_STATE_BROADCAST":          4,
		"BATCH_STATE_CONFIRMED":          5,
		"BATCH_STATE_FINALIZED":          6,
		"BATCH_STATE_SEEDLING_CANCELLED": 7,
		"BATCH_STATE_SPROUT_CANCELLED":   8,
	}
)

func (x BatchState) Enum() *BatchState {
	p := new(BatchState)
	*p = x
	return p
}

func (x BatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_mintrpc_mint_proto_enumTypes[0].Descriptor()
}

func (BatchState) Type() protoreflect.EnumType {
	return &file_mintrpc_mint_proto_enumTypes[0]
}

func (x BatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchState.Descriptor instead.
func (BatchState) EnumDescriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{0}
}

type PendingAsset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of asset to mint.
	AssetVersion taprpc.AssetVersion `protobuf:"varint,1,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The type of the asset to be created.
	AssetType taprpc.AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A blob that resents metadata related to the asset. This will affect the
	// final asset ID.
	AssetMeta *taprpc.AssetMeta `protobuf:"bytes,4,opt,name=asset_meta,json=assetMeta,proto3" json:"asset_meta,omitempty"`
	// The total amount of units of the new asset that should be created. If the
	// AssetType is Collectible, then this field cannot be set.
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// If true, then the asset will be created with a new group key, which allows
	// for future asset issuance.
	NewGroupedAsset bool `protobuf:"varint,6,opt,name=new_grouped_asset,json=newGroupedAsset,proto3" json:"new_grouped_asset,omitempty"`
	// The specific existing group key this asset should be minted with.
	GroupKey []byte `protobuf:"bytes,7,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The name of the asset in the batch that will anchor a new asset group.
	// This asset will be minted with the same group key as the anchor asset.
	GroupAnchor string `protobuf:"bytes,8,opt,name=group_anchor,json=groupAnchor,proto3" json:"group_anchor,omitempty"`
	// The optional key that will be used as the internal key for an asset group
	// created with this asset.
	GroupInternalKey *taprpc.KeyDescriptor `protobuf:"bytes,9,opt,name=group_internal_key,json=groupInternalKey,proto3" json:"group_internal_key,omitempty"`
	// The optional root of a tapscript tree that will be used when constructing a
	// new asset group key. This enables future issuance authorized with a script
	// witness.
	GroupTapscriptRoot []byte `protobuf:"bytes,10,opt,name=group_tapscript_root,json=groupTapscriptRoot,proto3" json:"group_tapscript_root,omitempty"`
	// The optional script key to use for the new asset. If no script key is given,
	// a BIP-86 key will be derived from the underlying wallet.
	ScriptKey     *taprpc.ScriptKey `protobuf:"bytes,11,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingAsset) Reset() {
	*x = PendingAsset{}
	mi := &file_mintrpc_mint_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAsset) ProtoMessage() {}

func (x *PendingAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAsset.ProtoReflect.Descriptor instead.
func (*PendingAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{0}
}

func (x *PendingAsset) GetAssetVersion() taprpc.AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return taprpc.AssetVersion(0)
}

func (x *PendingAsset) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *PendingAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PendingAsset) GetAssetMeta() *taprpc.AssetMeta {
	if x != nil {
		return x.AssetMeta
	}
	return nil
}

func (x *PendingAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PendingAsset) GetNewGroupedAsset() bool {
	if x != nil {
		return x.NewGroupedAsset
	}
	return false
}

func (x *PendingAsset) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *PendingAsset) GetGroupAnchor() string {
	if x != nil {
		return x.GroupAnchor
	}
	return ""
}

func (x *PendingAsset) GetGroupInternalKey() *taprpc.KeyDescriptor {
	if x != nil {
		return x.GroupInternalKey
	}
	return nil
}

func (x *PendingAsset) GetGroupTapscriptRoot() []byte {
	if x != nil {
		return x.GroupTapscriptRoot
	}
	return nil
}

func (x *PendingAsset) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

type UnsealedAsset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The pending asset with an unsealed asset group.
	Asset *PendingAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The group key request for the asset.
	GroupKeyRequest *taprpc.GroupKeyRequest `protobuf:"bytes,2,opt,name=group_key_request,json=groupKeyRequest,proto3" json:"group_key_request,omitempty"`
	// The group virtual transaction for the asset.
	GroupVirtualTx *taprpc.GroupVirtualTx `protobuf:"bytes,3,opt,name=group_virtual_tx,json=groupVirtualTx,proto3" json:"group_virtual_tx,omitempty"`
	// The byte serialized PSBT equivalent of the group virtual transaction.
	GroupVirtualPsbt string `protobuf:"bytes,4,opt,name=group_virtual_psbt,json=groupVirtualPsbt,proto3" json:"group_virtual_psbt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnsealedAsset) Reset() {
	*x = UnsealedAsset{}
	mi := &file_mintrpc_mint_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsealedAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsealedAsset) ProtoMessage() {}

func (x *UnsealedAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsealedAsset.ProtoReflect.Descriptor instead.
func (*UnsealedAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{1}
}

func (x *UnsealedAsset) GetAsset() *PendingAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *UnsealedAsset) GetGroupKeyRequest() *taprpc.GroupKeyRequest {
	if x != nil {
		return x.GroupKeyRequest
	}
	return nil
}

func (x *UnsealedAsset) GetGroupVirtualTx() *taprpc.GroupVirtualTx {
	if x != nil {
		return x.GroupVirtualTx
	}
	return nil
}

func (x *UnsealedAsset) GetGroupVirtualPsbt() string {
	if x != nil {
		return x.GroupVirtualPsbt
	}
	return ""
}

type MintAsset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of asset to mint.
	AssetVersion taprpc.AssetVersion `protobuf:"varint,1,opt,name=asset_version,json=assetVersion,proto3,enum=taprpc.AssetVersion" json:"asset_version,omitempty"`
	// The type of the asset to be created.
	AssetType taprpc.AssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The name, or "tag" of the asset. This will affect the final asset ID.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A blob that resents metadata related to the asset. This will affect the
	// final asset ID.
	AssetMeta *taprpc.AssetMeta `protobuf:"bytes,4,opt,name=asset_meta,json=assetMeta,proto3" json:"asset_meta,omitempty"`
	// The total amount of units of the new asset that should be created. If the
	// AssetType is Collectible, then this field cannot be set.
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// If true, then the asset will be created with a group key, which allows for
	// future asset issuance.
	NewGroupedAsset bool `protobuf:"varint,6,opt,name=new_grouped_asset,json=newGroupedAsset,proto3" json:"new_grouped_asset,omitempty"`
	// If true, then a group key or group anchor can be set to mint this asset into
	// an existing asset group.
	GroupedAsset bool `protobuf:"varint,7,opt,name=grouped_asset,json=groupedAsset,proto3" json:"grouped_asset,omitempty"`
	// The specific existing group key this asset should be minted with.
	GroupKey []byte `protobuf:"bytes,8,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The name of the asset in the batch that will anchor a new asset group.
	// This asset will be minted with the same group key as the anchor asset.
	GroupAnchor string `protobuf:"bytes,9,opt,name=group_anchor,json=groupAnchor,proto3" json:"group_anchor,omitempty"`
	// The optional key that will be used as the internal key for an asset group
	// created with this asset.
	//
	// If this field is set then external_group_key must be unset, and vice versa.
	GroupInternalKey *taprpc.KeyDescriptor `protobuf:"bytes,10,opt,name=group_internal_key,json=groupInternalKey,proto3" json:"group_internal_key,omitempty"`
	// An optional root of a Tapscript tree used when constructing a new asset
	// group key. This allows for future asset issuance authorized using a
	// script witness.
	//
	// If an external group key is provided, the V1 scheme for group key script
	// construction will be used, which supports PSBT signing. In this scheme,
	// the user-supplied Tapscript root is extended by two levels of Tapscript
	// siblings that commit to the group anchor's asset ID. As a result, the
	// provided Tapscript root becomes a branch within a larger Tapscript tree,
	// and the final Tapscript root will differ from the one specified here.
	GroupTapscriptRoot []byte `protobuf:"bytes,11,opt,name=group_tapscript_root,json=groupTapscriptRoot,proto3" json:"group_tapscript_root,omitempty"`
	// The optional script key to use for the new asset. If no script key is given,
	// a BIP-86 key will be derived from the underlying wallet.
	ScriptKey *taprpc.ScriptKey `protobuf:"bytes,12,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// Decimal display dictates the number of decimal places to shift the amount to
	// the left converting from Taproot Asset integer representation to a
	// UX-recognizable fractional quantity.
	//
	// For example, if the decimal_display value is 2 and there's 100 of those
	// assets, then a wallet would display the amount as "1.00". This field is
	// intended as information for wallets that display balances and has no impact
	// on the behavior of the daemon or any other part of the protocol. This value
	// is encoded in the MetaData field as a JSON field, therefore it is only
	// compatible with assets that have a JSON MetaData field.
	DecimalDisplay uint32 `protobuf:"varint,13,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
	// The external group key is an optional field that allows specifying an
	// external signing key for the group virtual transaction during minting.
	// This key enables signing operations to be performed externally, outside
	// the daemon.
	//
	// If this field is set then group_internal_key must be unset, and vice versa.
	ExternalGroupKey *taprpc.ExternalKey `protobuf:"bytes,14,opt,name=external_group_key,json=externalGroupKey,proto3" json:"external_group_key,omitempty"`
	// Enabling this flag allows the creation of universe commitments for a new
	// asset group.
	//
	// Universe commitments are minter-controlled, on-chain attestations that
	// anchor and verify the state of an asset group.
	//
	// This flag imposes restrictions on the minting process by limiting the batch
	// to assets within the same universe, meaning they share the same group key.
	// This option is applicable only for the creation of a new asset group
	// (i.e., the first minting tranche of an asset group) and ensures that the
	// batch is limited to a single asset group.
	UniverseCommitments bool `protobuf:"varint,15,opt,name=universe_commitments,json=universeCommitments,proto3" json:"universe_commitments,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MintAsset) Reset() {
	*x = MintAsset{}
	mi := &file_mintrpc_mint_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAsset) ProtoMessage() {}

func (x *MintAsset) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAsset.ProtoReflect.Descriptor instead.
func (*MintAsset) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{2}
}

func (x *MintAsset) GetAssetVersion() taprpc.AssetVersion {
	if x != nil {
		return x.AssetVersion
	}
	return taprpc.AssetVersion(0)
}

func (x *MintAsset) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *MintAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MintAsset) GetAssetMeta() *taprpc.AssetMeta {
	if x != nil {
		return x.AssetMeta
	}
	return nil
}

func (x *MintAsset) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintAsset) GetNewGroupedAsset() bool {
	if x != nil {
		return x.NewGroupedAsset
	}
	return false
}

func (x *MintAsset) GetGroupedAsset() bool {
	if x != nil {
		return x.GroupedAsset
	}
	return false
}

func (x *MintAsset) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *MintAsset) GetGroupAnchor() string {
	if x != nil {
		return x.GroupAnchor
	}
	return ""
}

func (x *MintAsset) GetGroupInternalKey() *taprpc.KeyDescriptor {
	if x != nil {
		return x.GroupInternalKey
	}
	return nil
}

func (x *MintAsset) GetGroupTapscriptRoot() []byte {
	if x != nil {
		return x.GroupTapscriptRoot
	}
	return nil
}

func (x *MintAsset) GetScriptKey() *taprpc.ScriptKey {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *MintAsset) GetDecimalDisplay() uint32 {
	if x != nil {
		return x.DecimalDisplay
	}
	return 0
}

func (x *MintAsset) GetExternalGroupKey() *taprpc.ExternalKey {
	if x != nil {
		return x.ExternalGroupKey
	}
	return nil
}

func (x *MintAsset) GetUniverseCommitments() bool {
	if x != nil {
		return x.UniverseCommitments
	}
	return false
}

type MintAssetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset to be minted.
	Asset *MintAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,2,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintAssetRequest) Reset() {
	*x = MintAssetRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetRequest) ProtoMessage() {}

func (x *MintAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetRequest.ProtoReflect.Descriptor instead.
func (*MintAssetRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{3}
}

func (x *MintAssetRequest) GetAsset() *MintAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *MintAssetRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type MintAssetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The pending batch the asset was added to.
	PendingBatch  *MintingBatch `protobuf:"bytes,1,opt,name=pending_batch,json=pendingBatch,proto3" json:"pending_batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintAssetResponse) Reset() {
	*x = MintAssetResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintAssetResponse) ProtoMessage() {}

func (x *MintAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintAssetResponse.ProtoReflect.Descriptor instead.
func (*MintAssetResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{4}
}

func (x *MintAssetResponse) GetPendingBatch() *MintingBatch {
	if x != nil {
		return x.PendingBatch
	}
	return nil
}

type MintingBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A public key serialized in compressed format that can be used to uniquely
	// identify a pending minting batch. Responses that share the same key will be
	// batched into the same minting transaction.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The transaction ID of the batch. Only populated if the batch has been
	// committed.
	BatchTxid string `protobuf:"bytes,2,opt,name=batch_txid,json=batchTxid,proto3" json:"batch_txid,omitempty"`
	// The state of the batch.
	State BatchState `protobuf:"varint,3,opt,name=state,proto3,enum=mintrpc.BatchState" json:"state,omitempty"`
	// The assets that are part of the batch.
	Assets []*PendingAsset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
	// The time the batch was created as a Unix timestamp (in seconds).
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The current height of the block chain at the time of the batch creation.
	HeightHint uint32 `protobuf:"varint,6,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	// The genesis transaction as a PSBT packet. Only populated if the batch has
	// been committed.
	BatchPsbt     []byte `protobuf:"bytes,7,opt,name=batch_psbt,json=batchPsbt,proto3" json:"batch_psbt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintingBatch) Reset() {
	*x = MintingBatch{}
	mi := &file_mintrpc_mint_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintingBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintingBatch) ProtoMessage() {}

func (x *MintingBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintingBatch.ProtoReflect.Descriptor instead.
func (*MintingBatch) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{5}
}

func (x *MintingBatch) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *MintingBatch) GetBatchTxid() string {
	if x != nil {
		return x.BatchTxid
	}
	return ""
}

func (x *MintingBatch) GetState() BatchState {
	if x != nil {
		return x.State
	}
	return BatchState_BATCH_STATE_UNKNOWN
}

func (x *MintingBatch) GetAssets() []*PendingAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MintingBatch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MintingBatch) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *MintingBatch) GetBatchPsbt() []byte {
	if x != nil {
		return x.BatchPsbt
	}
	return nil
}

type VerboseBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The minting batch, without any assets.
	Batch *MintingBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	// The assets that are part of the batch.
	UnsealedAssets []*UnsealedAsset `protobuf:"bytes,2,rep,name=unsealed_assets,json=unsealedAssets,proto3" json:"unsealed_assets,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VerboseBatch) Reset() {
	*x = VerboseBatch{}
	mi := &file_mintrpc_mint_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerboseBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerboseBatch) ProtoMessage() {}

func (x *VerboseBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerboseBatch.ProtoReflect.Descriptor instead.
func (*VerboseBatch) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{6}
}

func (x *VerboseBatch) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *VerboseBatch) GetUnsealedAssets() []*UnsealedAsset {
	if x != nil {
		return x.UnsealedAssets
	}
	return nil
}

type FundBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	// The optional fee rate to use for the minting transaction, in sat/kw.
	FeeRate uint32 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// The optional tapscript sibling that will be used when deriving the genesis
	// output for the batch. This sibling is a tapscript tree, which allows the
	// minter to encumber future transfers of assets in the batch with Tapscript.
	//
	// Types that are valid to be assigned to BatchSibling:
	//
	//	*FundBatchRequest_FullTree
	//	*FundBatchRequest_Branch
	BatchSibling  isFundBatchRequest_BatchSibling `protobuf_oneof:"batch_sibling"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FundBatchRequest) Reset() {
	*x = FundBatchRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundBatchRequest) ProtoMessage() {}

func (x *FundBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundBatchRequest.ProtoReflect.Descriptor instead.
func (*FundBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{7}
}

func (x *FundBatchRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

func (x *FundBatchRequest) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *FundBatchRequest) GetBatchSibling() isFundBatchRequest_BatchSibling {
	if x != nil {
		return x.BatchSibling
	}
	return nil
}

func (x *FundBatchRequest) GetFullTree() *taprpc.TapscriptFullTree {
	if x != nil {
		if x, ok := x.BatchSibling.(*FundBatchRequest_FullTree); ok {
			return x.FullTree
		}
	}
	return nil
}

func (x *FundBatchRequest) GetBranch() *taprpc.TapBranch {
	if x != nil {
		if x, ok := x.BatchSibling.(*FundBatchRequest_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

type isFundBatchRequest_BatchSibling interface {
	isFundBatchRequest_BatchSibling()
}

type FundBatchRequest_FullTree struct {
	// An ordered list of TapLeafs, which will be used to construct a
	// Tapscript tree.
	FullTree *taprpc.TapscriptFullTree `protobuf:"bytes,3,opt,name=full_tree,json=fullTree,proto3,oneof"`
}

type FundBatchRequest_Branch struct {
	// A TapBranch that represents a Tapscript tree managed externally.
	Branch *taprpc.TapBranch `protobuf:"bytes,4,opt,name=branch,proto3,oneof"`
}

func (*FundBatchRequest_FullTree) isFundBatchRequest_BatchSibling() {}

func (*FundBatchRequest_Branch) isFundBatchRequest_BatchSibling() {}

type FundBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The funded batch.
	Batch         *VerboseBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FundBatchResponse) Reset() {
	*x = FundBatchResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundBatchResponse) ProtoMessage() {}

func (x *FundBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundBatchResponse.ProtoReflect.Descriptor instead.
func (*FundBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{8}
}

func (x *FundBatchResponse) GetBatch() *VerboseBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type SealBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	// The assetID, witness pairs that authorize asset membership in a group.
	// This field should not be used in conjunction with
	// `signed_group_virtual_psbts`; use one or the other.
	GroupWitnesses []*taprpc.GroupWitness `protobuf:"bytes,2,rep,name=group_witnesses,json=groupWitnesses,proto3" json:"group_witnesses,omitempty"`
	// The base64 encoded signed group virtual PSBTs.
	// This field should not be used in conjunction with `group_witnesses`;
	// use one or the other.
	SignedGroupVirtualPsbts []string `protobuf:"bytes,3,rep,name=signed_group_virtual_psbts,json=signedGroupVirtualPsbts,proto3" json:"signed_group_virtual_psbts,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SealBatchRequest) Reset() {
	*x = SealBatchRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SealBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealBatchRequest) ProtoMessage() {}

func (x *SealBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealBatchRequest.ProtoReflect.Descriptor instead.
func (*SealBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{9}
}

func (x *SealBatchRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

func (x *SealBatchRequest) GetGroupWitnesses() []*taprpc.GroupWitness {
	if x != nil {
		return x.GroupWitnesses
	}
	return nil
}

func (x *SealBatchRequest) GetSignedGroupVirtualPsbts() []string {
	if x != nil {
		return x.SignedGroupVirtualPsbts
	}
	return nil
}

type SealBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sealed batch.
	Batch         *MintingBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SealBatchResponse) Reset() {
	*x = SealBatchResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SealBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealBatchResponse) ProtoMessage() {}

func (x *SealBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealBatchResponse.ProtoReflect.Descriptor instead.
func (*SealBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{10}
}

func (x *SealBatchResponse) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type FinalizeBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then the assets currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	// The optional fee rate to use for the minting transaction, in sat/kw.
	FeeRate uint32 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// The optional tapscript sibling that will be used when deriving the genesis
	// output for the batch. This sibling is a tapscript tree, which allows the
	// minter to encumber future transfers of assets in the batch with Tapscript.
	//
	// Types that are valid to be assigned to BatchSibling:
	//
	//	*FinalizeBatchRequest_FullTree
	//	*FinalizeBatchRequest_Branch
	BatchSibling  isFinalizeBatchRequest_BatchSibling `protobuf_oneof:"batch_sibling"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeBatchRequest) Reset() {
	*x = FinalizeBatchRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchRequest) ProtoMessage() {}

func (x *FinalizeBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchRequest.ProtoReflect.Descriptor instead.
func (*FinalizeBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{11}
}

func (x *FinalizeBatchRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

func (x *FinalizeBatchRequest) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *FinalizeBatchRequest) GetBatchSibling() isFinalizeBatchRequest_BatchSibling {
	if x != nil {
		return x.BatchSibling
	}
	return nil
}

func (x *FinalizeBatchRequest) GetFullTree() *taprpc.TapscriptFullTree {
	if x != nil {
		if x, ok := x.BatchSibling.(*FinalizeBatchRequest_FullTree); ok {
			return x.FullTree
		}
	}
	return nil
}

func (x *FinalizeBatchRequest) GetBranch() *taprpc.TapBranch {
	if x != nil {
		if x, ok := x.BatchSibling.(*FinalizeBatchRequest_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

type isFinalizeBatchRequest_BatchSibling interface {
	isFinalizeBatchRequest_BatchSibling()
}

type FinalizeBatchRequest_FullTree struct {
	// An ordered list of TapLeafs, which will be used to construct a
	// Tapscript tree.
	FullTree *taprpc.TapscriptFullTree `protobuf:"bytes,3,opt,name=full_tree,json=fullTree,proto3,oneof"`
}

type FinalizeBatchRequest_Branch struct {
	// A TapBranch that represents a Tapscript tree managed externally.
	Branch *taprpc.TapBranch `protobuf:"bytes,4,opt,name=branch,proto3,oneof"`
}

func (*FinalizeBatchRequest_FullTree) isFinalizeBatchRequest_BatchSibling() {}

func (*FinalizeBatchRequest_Branch) isFinalizeBatchRequest_BatchSibling() {}

type FinalizeBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The finalized batch.
	Batch         *MintingBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeBatchResponse) Reset() {
	*x = FinalizeBatchResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchResponse) ProtoMessage() {}

func (x *FinalizeBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchResponse.ProtoReflect.Descriptor instead.
func (*FinalizeBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{12}
}

func (x *FinalizeBatchResponse) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type CancelBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelBatchRequest) Reset() {
	*x = CancelBatchRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchRequest) ProtoMessage() {}

func (x *CancelBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchRequest.ProtoReflect.Descriptor instead.
func (*CancelBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{13}
}

type CancelBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The internal public key of the batch.
	BatchKey      []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelBatchResponse) Reset() {
	*x = CancelBatchResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchResponse) ProtoMessage() {}

func (x *CancelBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchResponse.ProtoReflect.Descriptor instead.
func (*CancelBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{14}
}

func (x *CancelBatchResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type ListBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The optional batch key of the batch to list.
	//
	// Types that are valid to be assigned to Filter:
	//
	//	*ListBatchRequest_BatchKey
	//	*ListBatchRequest_BatchKeyStr
	Filter isListBatchRequest_Filter `protobuf_oneof:"filter"`
	// If true, pending asset group details will be included for any funded,
	// non-empty pending batch. Unfunded or empty batches will be excluded.
	Verbose       bool `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBatchRequest) Reset() {
	*x = ListBatchRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchRequest) ProtoMessage() {}

func (x *ListBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchRequest.ProtoReflect.Descriptor instead.
func (*ListBatchRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{15}
}

func (x *ListBatchRequest) GetFilter() isListBatchRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKey() []byte {
	if x != nil {
		if x, ok := x.Filter.(*ListBatchRequest_BatchKey); ok {
			return x.BatchKey
		}
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKeyStr() string {
	if x != nil {
		if x, ok := x.Filter.(*ListBatchRequest_BatchKeyStr); ok {
			return x.BatchKeyStr
		}
	}
	return ""
}

func (x *ListBatchRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type isListBatchRequest_Filter interface {
	isListBatchRequest_Filter()
}

type ListBatchRequest_BatchKey struct {
	// The optional batch key of the batch to list, specified as raw bytes
	// (gRPC only).
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3,oneof"`
}

type ListBatchRequest_BatchKeyStr struct {
	// The optional batch key of the batch to list, specified as a hex
	// encoded string (use this for REST).
	BatchKeyStr string `protobuf:"bytes,2,opt,name=batch_key_str,json=batchKeyStr,proto3,oneof"`
}

func (*ListBatchRequest_BatchKey) isListBatchRequest_Filter() {}

func (*ListBatchRequest_BatchKeyStr) isListBatchRequest_Filter() {}

type ListBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Batches       []*VerboseBatch        `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBatchResponse) Reset() {
	*x = ListBatchResponse{}
	mi := &file_mintrpc_mint_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchResponse) ProtoMessage() {}

func (x *ListBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchResponse.ProtoReflect.Descriptor instead.
func (*ListBatchResponse) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{16}
}

func (x *ListBatchResponse) GetBatches() []*VerboseBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type SubscribeMintEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then the assets currently in the batch won't be returned in the
	// event's batch. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMintEventsRequest) Reset() {
	*x = SubscribeMintEventsRequest{}
	mi := &file_mintrpc_mint_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMintEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMintEventsRequest) ProtoMessage() {}

func (x *SubscribeMintEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMintEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeMintEventsRequest) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{17}
}

func (x *SubscribeMintEventsRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type MintEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Execute timestamp (Unix timestamp in microseconds).
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The last state of the batch that was successfully executed. If error
	// below is set, then the batch_state is the state that lead to the error
	// during its execution.
	BatchState BatchState `protobuf:"varint,2,opt,name=batch_state,json=batchState,proto3,enum=mintrpc.BatchState" json:"batch_state,omitempty"`
	// The batch that the event is for.
	Batch *MintingBatch `protobuf:"bytes,3,opt,name=batch,proto3" json:"batch,omitempty"`
	// An optional error, indicating that executing the batch_state failed.
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintEvent) Reset() {
	*x = MintEvent{}
	mi := &file_mintrpc_mint_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintEvent) ProtoMessage() {}

func (x *MintEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mintrpc_mint_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintEvent.ProtoReflect.Descriptor instead.
func (*MintEvent) Descriptor() ([]byte, []int) {
	return file_mintrpc_mint_proto_rawDescGZIP(), []int{18}
}

func (x *MintEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MintEvent) GetBatchState() BatchState {
	if x != nil {
		return x.BatchState
	}
	return BatchState_BATCH_STATE_UNKNOWN
}

func (x *MintEvent) GetBatch() *MintingBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *MintEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_mintrpc_mint_proto protoreflect.FileDescriptor

const file_mintrpc_mint_proto_rawDesc = "" +
	"\n" +
	"\x12mintrpc/mint.proto\x12\amintrpc\x1a\x13taprootassets.proto\"\xee\x03\n" +
	"\fPendingAsset\x129\n" +
	"\rasset_version\x18\x01 \x01(\x0e2\x14.taprpc.AssetVersionR\fassetVersion\x120\n" +
	"\n" +
	"asset_type\x18\x02 \x01(\x0e2\x11.taprpc.AssetTypeR\tassetType\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x120\n" +
	"\n" +
	"asset_meta\x18\x04 \x01(\v2\x11.taprpc.AssetMetaR\tassetMeta\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x04R\x06amount\x12*\n" +
	"\x11new_grouped_asset\x18\x06 \x01(\bR\x0fnewGroupedAsset\x12\x1b\n" +
	"\tgroup_key\x18\a \x01(\fR\bgroupKey\x12!\n" +
	"\fgroup_anchor\x18\b \x01(\tR\vgroupAnchor\x12C\n" +
	"\x12group_internal_key\x18\t \x01(\v2\x15.taprpc.KeyDescriptorR\x10groupInternalKey\x120\n" +
	"\x14group_tapscript_root\x18\n" +
	" \x01(\fR\x12groupTapscriptRoot\x120\n" +
	"\n" +
	"script_key\x18\v \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\"\xf1\x01\n" +
	"\rUnsealedAsset\x12+\n" +
	"\x05asset\x18\x01 \x01(\v2\x15.mintrpc.PendingAssetR\x05asset\x12C\n" +
	"\x11group_key_request\x18\x02 \x01(\v2\x17.taprpc.GroupKeyRequestR\x0fgroupKeyRequest\x12@\n" +
	"\x10group_virtual_tx\x18\x03 \x01(\v2\x16.taprpc.GroupVirtualTxR\x0egroupVirtualTx\x12,\n" +
	"\x12group_virtual_psbt\x18\x04 \x01(\tR\x10groupVirtualPsbt\"\xaf\x05\n" +
	"\tMintAsset\x129\n" +
	"\rasset_version\x18\x01 \x01(\x0e2\x14.taprpc.AssetVersionR\fassetVersion\x120\n" +
	"\n" +
	"asset_type\x18\x02 \x01(\x0e2\x11.taprpc.AssetTypeR\tassetType\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x120\n" +
	"\n" +
	"asset_meta\x18\x04 \x01(\v2\x11.taprpc.AssetMetaR\tassetMeta\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x04R\x06amount\x12*\n" +
	"\x11new_grouped_asset\x18\x06 \x01(\bR\x0fnewGroupedAsset\x12#\n" +
	"\rgrouped_asset\x18\a \x01(\bR\fgroupedAsset\x12\x1b\n" +
	"\tgroup_key\x18\b \x01(\fR\bgroupKey\x12!\n" +
	"\fgroup_anchor\x18\t \x01(\tR\vgroupAnchor\x12C\n" +
	"\x12group_internal_key\x18\n" +
	" \x01(\v2\x15.taprpc.KeyDescriptorR\x10groupInternalKey\x120\n" +
	"\x14group_tapscript_root\x18\v \x01(\fR\x12groupTapscriptRoot\x120\n" +
	"\n" +
	"script_key\x18\f \x01(\v2\x11.taprpc.ScriptKeyR\tscriptKey\x12'\n" +
	"\x0fdecimal_display\x18\r \x01(\rR\x0edecimalDisplay\x12A\n" +
	"\x12external_group_key\x18\x0e \x01(\v2\x13.taprpc.ExternalKeyR\x10externalGroupKey\x121\n" +
	"\x14universe_commitments\x18\x0f \x01(\bR\x13universeCommitments\"c\n" +
	"\x10MintAssetRequest\x12(\n" +
	"\x05asset\x18\x01 \x01(\v2\x12.mintrpc.MintAssetR\x05asset\x12%\n" +
	"\x0eshort_response\x18\x02 \x01(\bR\rshortResponse\"O\n" +
	"\x11MintAssetResponse\x12:\n" +
	"\rpending_batch\x18\x01 \x01(\v2\x15.mintrpc.MintingBatchR\fpendingBatch\"\x83\x02\n" +
	"\fMintingBatch\x12\x1b\n" +
	"\tbatch_key\x18\x01 \x01(\fR\bbatchKey\x12\x1d\n" +
	"\n" +
	"batch_txid\x18\x02 \x01(\tR\tbatchTxid\x12)\n" +
	"\x05state\x18\x03 \x01(\x0e2\x13.mintrpc.BatchStateR\x05state\x12-\n" +
	"\x06assets\x18\x04 \x03(\v2\x15.mintrpc.PendingAssetR\x06assets\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12\x1f\n" +
	"\vheight_hint\x18\x06 \x01(\rR\n" +
	"heightHint\x12\x1d\n" +
	"\n" +
	"batch_psbt\x18\a \x01(\fR\tbatchPsbt\"|\n" +
	"\fVerboseBatch\x12+\n" +
	"\x05batch\x18\x01 \x01(\v2\x15.mintrpc.MintingBatchR\x05batch\x12?\n" +
	"\x0funsealed_assets\x18\x02 \x03(\v2\x16.mintrpc.UnsealedAssetR\x0eunsealedAssets\"\xcc\x01\n" +
	"\x10FundBatchRequest\x12%\n" +
	"\x0eshort_response\x18\x01 \x01(\bR\rshortResponse\x12\x19\n" +
	"\bfee_rate\x18\x02 \x01(\rR\afeeRate\x128\n" +
	"\tfull_tree\x18\x03 \x01(\v2\x19.taprpc.TapscriptFullTreeH\x00R\bfullTree\x12+\n" +
	"\x06branch\x18\x04 \x01(\v2\x11.taprpc.TapBranchH\x00R\x06branchB\x0f\n" +
	"\rbatch_sibling\"@\n" +
	"\x11FundBatchResponse\x12+\n" +
	"\x05batch\x18\x01 \x01(\v2\x15.mintrpc.VerboseBatchR\x05batch\"\xb5\x01\n" +
	"\x10SealBatchRequest\x12%\n" +
	"\x0eshort_response\x18\x01 \x01(\bR\rshortResponse\x12=\n" +
	"\x0fgroup_witnesses\x18\x02 \x03(\v2\x14.taprpc.GroupWitnessR\x0egroupWitnesses\x12;\n" +
	"\x1asigned_group_virtual_psbts\x18\x03 \x03(\tR\x17signedGroupVirtualPsbts\"@\n" +
	"\x11SealBatchResponse\x12+\n" +
	"\x05batch\x18\x01 \x01(\v2\x15.mintrpc.MintingBatchR\x05batch\"\xd0\x01\n" +
	"\x14FinalizeBatchRequest\x12%\n" +
	"\x0eshort_response\x18\x01 \x01(\bR\rshortResponse\x12\x19\n" +
	"\bfee_rate\x18\x02 \x01(\rR\afeeRate\x128\n" +
	"\tfull_tree\x18\x03 \x01(\v2\x19.taprpc.TapscriptFullTreeH\x00R\bfullTree\x12+\n" +
	"\x06branch\x18\x04 \x01(\v2\x11.taprpc.TapBranchH\x00R\x06branchB\x0f\n" +
	"\rbatch_sibling\"D\n" +
	"\x15FinalizeBatchResponse\x12+\n" +
	"\x05batch\x18\x01 \x01(\v2\x15.mintrpc.MintingBatchR\x05batch\"\x14\n" +
	"\x12CancelBatchRequest\"2\n" +
	"\x13CancelBatchResponse\x12\x1b\n" +
	"\tbatch_key\x18\x01 \x01(\fR\bbatchKey\"{\n" +
	"\x10ListBatchRequest\x12\x1d\n" +
	"\tbatch_key\x18\x01 \x01(\fH\x00R\bbatchKey\x12$\n" +
	"\rbatch_key_str\x18\x02 \x01(\tH\x00R\vbatchKeyStr\x12\x18\n" +
	"\averbose\x18\x03 \x01(\bR\averboseB\b\n" +
	"\x06filter\"D\n" +
	"\x11ListBatchResponse\x12/\n" +
	"\abatches\x18\x01 \x03(\v2\x15.mintrpc.VerboseBatchR\abatches\"C\n" +
	"\x1aSubscribeMintEventsRequest\x12%\n" +
	"\x0eshort_response\x18\x01 \x01(\bR\rshortResponse\"\xa2\x01\n" +
	"\tMintEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x124\n" +
	"\vbatch_state\x18\x02 \x01(\x0e2\x13.mintrpc.BatchStateR\n" +
	"batchState\x12+\n" +
	"\x05batch\x18\x03 \x01(\v2\x15.mintrpc.MintingBatchR\x05batch\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error*\x88\x02\n" +
	"\n" +
	"BatchState\x12\x17\n" +
	"\x13BATCH_STATE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13BATCH_STATE_PENDING\x10\x01\x12\x16\n" +
	"\x12BATCH_STATE_FROZEN\x10\x02\x12\x19\n" +
	"\x15BATCH_STATE_COMMITTED\x10\x03\x12\x19\n" +
	"\x15BATCH_STATE_BROADCAST\x10\x04\x12\x19\n" +
	"\x15BATCH_STATE_CONFIRMED\x10\x05\x12\x19\n" +
	"\x15BATCH_STATE_FINALIZED\x10\x06\x12\"\n" +
	"\x1eBATCH_STATE_SEEDLING_CANCELLED\x10\a\x12 \n" +
	"\x1cBATCH_STATE_SPROUT_CANCELLED\x10\b2\x84\x04\n" +
	"\x04Mint\x12B\n" +
	"\tMintAsset\x12\x19.mintrpc.MintAssetRequest\x1a\x1a.mintrpc.MintAssetResponse\x12B\n" +
	"\tFundBatch\x12\x19.mintrpc.FundBatchRequest\x1a\x1a.mintrpc.FundBatchResponse\x12B\n" +
	"\tSealBatch\x12\x19.mintrpc.SealBatchRequest\x1a\x1a.mintrpc.SealBatchResponse\x12N\n" +
	"\rFinalizeBatch\x12\x1d.mintrpc.FinalizeBatchRequest\x1a\x1e.mintrpc.FinalizeBatchResponse\x12H\n" +
	"\vCancelBatch\x12\x1b.mintrpc.CancelBatchRequest\x1a\x1c.mintrpc.CancelBatchResponse\x12D\n" +
	"\vListBatches\x12\x19.mintrpc.ListBatchRequest\x1a\x1a.mintrpc.ListBatchResponse\x12P\n" +
	"\x13SubscribeMintEvents\x12#.mintrpc.SubscribeMintEventsRequest\x1a\x12.mintrpc.MintEvent0\x01B8Z6github.com/lightninglabs/taproot-assets/taprpc/mintrpcb\x06proto3"

var (
	file_mintrpc_mint_proto_rawDescOnce sync.Once
	file_mintrpc_mint_proto_rawDescData []byte
)

func file_mintrpc_mint_proto_rawDescGZIP() []byte {
	file_mintrpc_mint_proto_rawDescOnce.Do(func() {
		file_mintrpc_mint_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mintrpc_mint_proto_rawDesc), len(file_mintrpc_mint_proto_rawDesc)))
	})
	return file_mintrpc_mint_proto_rawDescData
}

var file_mintrpc_mint_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mintrpc_mint_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_mintrpc_mint_proto_goTypes = []any{
	(BatchState)(0),                    // 0: mintrpc.BatchState
	(*PendingAsset)(nil),               // 1: mintrpc.PendingAsset
	(*UnsealedAsset)(nil),              // 2: mintrpc.UnsealedAsset
	(*MintAsset)(nil),                  // 3: mintrpc.MintAsset
	(*MintAssetRequest)(nil),           // 4: mintrpc.MintAssetRequest
	(*MintAssetResponse)(nil),          // 5: mintrpc.MintAssetResponse
	(*MintingBatch)(nil),               // 6: mintrpc.MintingBatch
	(*VerboseBatch)(nil),               // 7: mintrpc.VerboseBatch
	(*FundBatchRequest)(nil),           // 8: mintrpc.FundBatchRequest
	(*FundBatchResponse)(nil),          // 9: mintrpc.FundBatchResponse
	(*SealBatchRequest)(nil),           // 10: mintrpc.SealBatchRequest
	(*SealBatchResponse)(nil),          // 11: mintrpc.SealBatchResponse
	(*FinalizeBatchRequest)(nil),       // 12: mintrpc.FinalizeBatchRequest
	(*FinalizeBatchResponse)(nil),      // 13: mintrpc.FinalizeBatchResponse
	(*CancelBatchRequest)(nil),         // 14: mintrpc.CancelBatchRequest
	(*CancelBatchResponse)(nil),        // 15: mintrpc.CancelBatchResponse
	(*ListBatchRequest)(nil),           // 16: mintrpc.ListBatchRequest
	(*ListBatchResponse)(nil),          // 17: mintrpc.ListBatchResponse
	(*SubscribeMintEventsRequest)(nil), // 18: mintrpc.SubscribeMintEventsRequest
	(*MintEvent)(nil),                  // 19: mintrpc.MintEvent
	(taprpc.AssetVersion)(0),           // 20: taprpc.AssetVersion
	(taprpc.AssetType)(0),              // 21: taprpc.AssetType
	(*taprpc.AssetMeta)(nil),           // 22: taprpc.AssetMeta
	(*taprpc.KeyDescriptor)(nil),       // 23: taprpc.KeyDescriptor
	(*taprpc.ScriptKey)(nil),           // 24: taprpc.ScriptKey
	(*taprpc.GroupKeyRequest)(nil),     // 25: taprpc.GroupKeyRequest
	(*taprpc.GroupVirtualTx)(nil),      // 26: taprpc.GroupVirtualTx
	(*taprpc.ExternalKey)(nil),         // 27: taprpc.ExternalKey
	(*taprpc.TapscriptFullTree)(nil),   // 28: taprpc.TapscriptFullTree
	(*taprpc.TapBranch)(nil),           // 29: taprpc.TapBranch
	(*taprpc.GroupWitness)(nil),        // 30: taprpc.GroupWitness
}
var file_mintrpc_mint_proto_depIdxs = []int32{
	20, // 0: mintrpc.PendingAsset.asset_version:type_name -> taprpc.AssetVersion
	21, // 1: mintrpc.PendingAsset.asset_type:type_name -> taprpc.AssetType
	22, // 2: mintrpc.PendingAsset.asset_meta:type_name -> taprpc.AssetMeta
	23, // 3: mintrpc.PendingAsset.group_internal_key:type_name -> taprpc.KeyDescriptor
	24, // 4: mintrpc.PendingAsset.script_key:type_name -> taprpc.ScriptKey
	1,  // 5: mintrpc.UnsealedAsset.asset:type_name -> mintrpc.PendingAsset
	25, // 6: mintrpc.UnsealedAsset.group_key_request:type_name -> taprpc.GroupKeyRequest
	26, // 7: mintrpc.UnsealedAsset.group_virtual_tx:type_name -> taprpc.GroupVirtualTx
	20, // 8: mintrpc.MintAsset.asset_version:type_name -> taprpc.AssetVersion
	21, // 9: mintrpc.MintAsset.asset_type:type_name -> taprpc.AssetType
	22, // 10: mintrpc.MintAsset.asset_meta:type_name -> taprpc.AssetMeta
	23, // 11: mintrpc.MintAsset.group_internal_key:type_name -> taprpc.KeyDescriptor
	24, // 12: mintrpc.MintAsset.script_key:type_name -> taprpc.ScriptKey
	27, // 13: mintrpc.MintAsset.external_group_key:type_name -> taprpc.ExternalKey
	3,  // 14: mintrpc.MintAssetRequest.asset:type_name -> mintrpc.MintAsset
	6,  // 15: mintrpc.MintAssetResponse.pending_batch:type_name -> mintrpc.MintingBatch
	0,  // 16: mintrpc.MintingBatch.state:type_name -> mintrpc.BatchState
	1,  // 17: mintrpc.MintingBatch.assets:type_name -> mintrpc.PendingAsset
	6,  // 18: mintrpc.VerboseBatch.batch:type_name -> mintrpc.MintingBatch
	2,  // 19: mintrpc.VerboseBatch.unsealed_assets:type_name -> mintrpc.UnsealedAsset
	28, // 20: mintrpc.FundBatchRequest.full_tree:type_name -> taprpc.TapscriptFullTree
	29, // 21: mintrpc.FundBatchRequest.branch:type_name -> taprpc.TapBranch
	7,  // 22: mintrpc.FundBatchResponse.batch:type_name -> mintrpc.VerboseBatch
	30, // 23: mintrpc.SealBatchRequest.group_witnesses:type_name -> taprpc.GroupWitness
	6,  // 24: mintrpc.SealBatchResponse.batch:type_name -> mintrpc.MintingBatch
	28, // 25: mintrpc.FinalizeBatchRequest.full_tree:type_name -> taprpc.TapscriptFullTree
	29, // 26: mintrpc.FinalizeBatchRequest.branch:type_name -> taprpc.TapBranch
	6,  // 27: mintrpc.FinalizeBatchResponse.batch:type_name -> mintrpc.MintingBatch
	7,  // 28: mintrpc.ListBatchResponse.batches:type_name -> mintrpc.VerboseBatch
	0,  // 29: mintrpc.MintEvent.batch_state:type_name -> mintrpc.BatchState
	6,  // 30: mintrpc.MintEvent.batch:type_name -> mintrpc.MintingBatch
	4,  // 31: mintrpc.Mint.MintAsset:input_type -> mintrpc.MintAssetRequest
	8,  // 32: mintrpc.Mint.FundBatch:input_type -> mintrpc.FundBatchRequest
	10, // 33: mintrpc.Mint.SealBatch:input_type -> mintrpc.SealBatchRequest
	12, // 34: mintrpc.Mint.FinalizeBatch:input_type -> mintrpc.FinalizeBatchRequest
	14, // 35: mintrpc.Mint.CancelBatch:input_type -> mintrpc.CancelBatchRequest
	16, // 36: mintrpc.Mint.ListBatches:input_type -> mintrpc.ListBatchRequest
	18, // 37: mintrpc.Mint.SubscribeMintEvents:input_type -> mintrpc.SubscribeMintEventsRequest
	5,  // 38: mintrpc.Mint.MintAsset:output_type -> mintrpc.MintAssetResponse
	9,  // 39: mintrpc.Mint.FundBatch:output_type -> mintrpc.FundBatchResponse
	11, // 40: mintrpc.Mint.SealBatch:output_type -> mintrpc.SealBatchResponse
	13, // 41: mintrpc.Mint.FinalizeBatch:output_type -> mintrpc.FinalizeBatchResponse
	15, // 42: mintrpc.Mint.CancelBatch:output_type -> mintrpc.CancelBatchResponse
	17, // 43: mintrpc.Mint.ListBatches:output_type -> mintrpc.ListBatchResponse
	19, // 44: mintrpc.Mint.SubscribeMintEvents:output_type -> mintrpc.MintEvent
	38, // [38:45] is the sub-list for method output_type
	31, // [31:38] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_mintrpc_mint_proto_init() }
func file_mintrpc_mint_proto_init() {
	if File_mintrpc_mint_proto != nil {
		return
	}
	file_mintrpc_mint_proto_msgTypes[7].OneofWrappers = []any{
		(*FundBatchRequest_FullTree)(nil),
		(*FundBatchRequest_Branch)(nil),
	}
	file_mintrpc_mint_proto_msgTypes[11].OneofWrappers = []any{
		(*FinalizeBatchRequest_FullTree)(nil),
		(*FinalizeBatchRequest_Branch)(nil),
	}
	file_mintrpc_mint_proto_msgTypes[15].OneofWrappers = []any{
		(*ListBatchRequest_BatchKey)(nil),
		(*ListBatchRequest_BatchKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mintrpc_mint_proto_rawDesc), len(file_mintrpc_mint_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mintrpc_mint_proto_goTypes,
		DependencyIndexes: file_mintrpc_mint_proto_depIdxs,
		EnumInfos:         file_mintrpc_mint_proto_enumTypes,
		MessageInfos:      file_mintrpc_mint_proto_msgTypes,
	}.Build()
	File_mintrpc_mint_proto = out.File
	file_mintrpc_mint_proto_goTypes = nil
	file_mintrpc_mint_proto_depIdxs = nil
}
