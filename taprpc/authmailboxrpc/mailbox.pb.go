// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: authmailboxrpc/mailbox.proto

package authmailboxrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the Merkle proof hashes needed to link a transaction to the Merkle
// root within a Bitcoin block header.
type MerkleProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of sibling hashes in the Merkle path, ordered from the transaction's
	// sibling up towards the root. Each hash is typically 32 bytes.
	SiblingHashes [][]byte `protobuf:"bytes,1,rep,name=sibling_hashes,json=siblingHashes,proto3" json:"sibling_hashes,omitempty"`
	// The bitmask indicating the direction (left/right) of each sibling hash
	// in the Merkle tree. Each bit corresponds to a sibling hash in the
	// sibling_hashes list. 0 indicates left, 1 indicates right.
	Bits []bool `protobuf:"varint,2,rep,packed,name=bits,proto3" json:"bits,omitempty"`
}

func (x *MerkleProof) Reset() {
	*x = MerkleProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleProof) ProtoMessage() {}

func (x *MerkleProof) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleProof.ProtoReflect.Descriptor instead.
func (*MerkleProof) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{0}
}

func (x *MerkleProof) GetSiblingHashes() [][]byte {
	if x != nil {
		return x.SiblingHashes
	}
	return nil
}

func (x *MerkleProof) GetBits() []bool {
	if x != nil {
		return x.Bits
	}
	return nil
}

// Encapsulates the full proof required for sender authentication, demonstrating
// that a specific P2TR transaction output was included in a Bitcoin block. To
// prove knowledge of the claimed output, the proof must include the output's
// internal key and, optionally, the Taproot Merkle root.
type BitcoinMerkleInclusionProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw Bitcoin transaction bytes, in standard Bitcoin serialization
	// format, containing the outpoint being claimed. The server will hash this
	// to get the TXID.
	RawTxData []byte `protobuf:"bytes,1,opt,name=raw_tx_data,json=rawTxData,proto3" json:"raw_tx_data,omitempty"`
	// The raw block header bytes (typically 80 bytes) of the block in which the
	// transaction was mined. Contains the Merkle root against which the proof
	// is verified.
	RawBlockHeaderData []byte `protobuf:"bytes,2,opt,name=raw_block_header_data,json=rawBlockHeaderData,proto3" json:"raw_block_header_data,omitempty"`
	// The height at which the block was mined. This is used to determine the
	// block's validity and to ensure the transaction is not too old.
	BlockHeight uint32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The Merkle path proving the transaction's inclusion in the block header's
	// Merkle root.
	MerkleProof *MerkleProof `protobuf:"bytes,4,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	// The specific output within the provided transaction being claimed as the
	// proof "token". The output at the given index must be a P2TR output.
	// The server must verify that the txid_hex matches the hash of the provided
	// transaction data, and that this specific outpoint index exists in the
	// transaction.
	ClaimedOutpoint *taprpc.OutPoint `protobuf:"bytes,5,opt,name=claimed_outpoint,json=claimedOutpoint,proto3" json:"claimed_outpoint,omitempty"`
	// The Taproot internal key used to construct the P2TR output that is
	// claimed by the outpoint above. Must be provided alongside the Taproot
	// Merkle root to prove knowledge of the output's construction.
	InternalKey []byte `protobuf:"bytes,6,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The Taproot Merkle root, if applicable. This, alongside the internal key,
	// is used to prove knowledge of the output's construction. If this is not
	// provided (empty or nil), a BIP-0086 construction is assumed.
	MerkleRoot []byte `protobuf:"bytes,7,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (x *BitcoinMerkleInclusionProof) Reset() {
	*x = BitcoinMerkleInclusionProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinMerkleInclusionProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinMerkleInclusionProof) ProtoMessage() {}

func (x *BitcoinMerkleInclusionProof) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinMerkleInclusionProof.ProtoReflect.Descriptor instead.
func (*BitcoinMerkleInclusionProof) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{1}
}

func (x *BitcoinMerkleInclusionProof) GetRawTxData() []byte {
	if x != nil {
		return x.RawTxData
	}
	return nil
}

func (x *BitcoinMerkleInclusionProof) GetRawBlockHeaderData() []byte {
	if x != nil {
		return x.RawBlockHeaderData
	}
	return nil
}

func (x *BitcoinMerkleInclusionProof) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BitcoinMerkleInclusionProof) GetMerkleProof() *MerkleProof {
	if x != nil {
		return x.MerkleProof
	}
	return nil
}

func (x *BitcoinMerkleInclusionProof) GetClaimedOutpoint() *taprpc.OutPoint {
	if x != nil {
		return x.ClaimedOutpoint
	}
	return nil
}

func (x *BitcoinMerkleInclusionProof) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *BitcoinMerkleInclusionProof) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

// Represents a single message as stored and retrieved from the mailbox.
type MailboxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID assigned to the message by the server upon storage.
	MessageId uint64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The ECIES encrypted message payload, intended for the receiver.
	EncryptedPayload []byte `protobuf:"bytes,2,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
	// Timestamp (Unix epoch seconds) when the message arrived at the server.
	ArrivalTimestamp int64 `protobuf:"varint,3,opt,name=arrival_timestamp,json=arrivalTimestamp,proto3" json:"arrival_timestamp,omitempty"`
	// Block height after which this message may be considered expired by the
	// system.
	ExpiryBlockHeight uint32 `protobuf:"varint,4,opt,name=expiry_block_height,json=expiryBlockHeight,proto3" json:"expiry_block_height,omitempty"`
}

func (x *MailboxMessage) Reset() {
	*x = MailboxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxMessage) ProtoMessage() {}

func (x *MailboxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxMessage.ProtoReflect.Descriptor instead.
func (*MailboxMessage) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{2}
}

func (x *MailboxMessage) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MailboxMessage) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

func (x *MailboxMessage) GetArrivalTimestamp() int64 {
	if x != nil {
		return x.ArrivalTimestamp
	}
	return 0
}

func (x *MailboxMessage) GetExpiryBlockHeight() uint32 {
	if x != nil {
		return x.ExpiryBlockHeight
	}
	return 0
}

// Represents a list of messages.
type MailboxMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of mailbox messages.
	Messages []*MailboxMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MailboxMessages) Reset() {
	*x = MailboxMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxMessages) ProtoMessage() {}

func (x *MailboxMessages) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxMessages.ProtoReflect.Descriptor instead.
func (*MailboxMessages) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{3}
}

func (x *MailboxMessages) GetMessages() []*MailboxMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Request message for the SendMessage RPC.
type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key identifier of the intended receiver (ReceiverID), encoded
	// as the raw bytes of the compressed public key.
	ReceiverId []byte `protobuf:"bytes,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// The ECIES encrypted message payload.
	EncryptedPayload []byte `protobuf:"bytes,2,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
	// A proof of the sender's identity, typically a Bitcoin transaction or
	// another proof that work was done to create the message.
	//
	// Types that are assignable to Proof:
	//
	//	*SendMessageRequest_TxProof
	Proof isSendMessageRequest_Proof `protobuf_oneof:"proof"`
	// The block height after which this message may be considered expired.
	ExpiryBlockHeight uint32 `protobuf:"varint,5,opt,name=expiry_block_height,json=expiryBlockHeight,proto3" json:"expiry_block_height,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageRequest) GetReceiverId() []byte {
	if x != nil {
		return x.ReceiverId
	}
	return nil
}

func (x *SendMessageRequest) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

func (m *SendMessageRequest) GetProof() isSendMessageRequest_Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (x *SendMessageRequest) GetTxProof() *BitcoinMerkleInclusionProof {
	if x, ok := x.GetProof().(*SendMessageRequest_TxProof); ok {
		return x.TxProof
	}
	return nil
}

func (x *SendMessageRequest) GetExpiryBlockHeight() uint32 {
	if x != nil {
		return x.ExpiryBlockHeight
	}
	return 0
}

type isSendMessageRequest_Proof interface {
	isSendMessageRequest_Proof()
}

type SendMessageRequest_TxProof struct {
	// The Bitcoin Merkle Inclusion Proof used as the sender's
	// authentication. The server MUST perform full validation of this
	// proof:
	//  1. Verify claimed_outpoint.txid_hex matches hash(raw_tx_data).
	//  2. Verify claimed_outpoint.index is valid for the transaction.
	//  3. Verify merkle_proof connects the transaction hash to the
	//     raw_block_header_data's Merkle root.
	//  4. Verify block_header validity (e.g., PoW, potentially chain
	//     context).
	//  5. Ensure the claimed_outpoint has not been used previously (check
	//     used_proofs table).
	TxProof *BitcoinMerkleInclusionProof `protobuf:"bytes,4,opt,name=tx_proof,json=txProof,proto3,oneof"`
}

func (*SendMessageRequest_TxProof) isSendMessageRequest_Proof() {}

// Response message for the SendMessage RPC.
type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID assigned to the stored message by the server.
	MessageId uint64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{5}
}

func (x *SendMessageResponse) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// Wrapper message for requests sent FROM the client TO the server during the
// ReceiveMessages stream.
type ReceiveMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*ReceiveMessagesRequest_Init
	//	*ReceiveMessagesRequest_AuthSig
	RequestType isReceiveMessagesRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *ReceiveMessagesRequest) Reset() {
	*x = ReceiveMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveMessagesRequest) ProtoMessage() {}

func (x *ReceiveMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveMessagesRequest.ProtoReflect.Descriptor instead.
func (*ReceiveMessagesRequest) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{6}
}

func (m *ReceiveMessagesRequest) GetRequestType() isReceiveMessagesRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *ReceiveMessagesRequest) GetInit() *InitReceive {
	if x, ok := x.GetRequestType().(*ReceiveMessagesRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *ReceiveMessagesRequest) GetAuthSig() *AuthSignature {
	if x, ok := x.GetRequestType().(*ReceiveMessagesRequest_AuthSig); ok {
		return x.AuthSig
	}
	return nil
}

type isReceiveMessagesRequest_RequestType interface {
	isReceiveMessagesRequest_RequestType()
}

type ReceiveMessagesRequest_Init struct {
	Init *InitReceive `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type ReceiveMessagesRequest_AuthSig struct {
	AuthSig *AuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3,oneof"`
}

func (*ReceiveMessagesRequest_Init) isReceiveMessagesRequest_RequestType() {}

func (*ReceiveMessagesRequest_AuthSig) isReceiveMessagesRequest_RequestType() {}

// Carries the initial parameters from the client to start receiving messages.
type InitReceive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverId                []byte `protobuf:"bytes,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	StartMessageIdExclusive   uint64 `protobuf:"varint,2,opt,name=start_message_id_exclusive,json=startMessageIdExclusive,proto3" json:"start_message_id_exclusive,omitempty"`
	StartBlockHeightInclusive uint32 `protobuf:"varint,3,opt,name=start_block_height_inclusive,json=startBlockHeightInclusive,proto3" json:"start_block_height_inclusive,omitempty"`
	StartTimestampExclusive   int64  `protobuf:"varint,4,opt,name=start_timestamp_exclusive,json=startTimestampExclusive,proto3" json:"start_timestamp_exclusive,omitempty"`
}

func (x *InitReceive) Reset() {
	*x = InitReceive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReceive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReceive) ProtoMessage() {}

func (x *InitReceive) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReceive.ProtoReflect.Descriptor instead.
func (*InitReceive) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{7}
}

func (x *InitReceive) GetReceiverId() []byte {
	if x != nil {
		return x.ReceiverId
	}
	return nil
}

func (x *InitReceive) GetStartMessageIdExclusive() uint64 {
	if x != nil {
		return x.StartMessageIdExclusive
	}
	return 0
}

func (x *InitReceive) GetStartBlockHeightInclusive() uint32 {
	if x != nil {
		return x.StartBlockHeightInclusive
	}
	return 0
}

func (x *InitReceive) GetStartTimestampExclusive() int64 {
	if x != nil {
		return x.StartTimestampExclusive
	}
	return 0
}

// Carries the client's signature in response to the server's challenge.
type AuthSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuthSignature) Reset() {
	*x = AuthSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignature) ProtoMessage() {}

func (x *AuthSignature) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignature.ProtoReflect.Descriptor instead.
func (*AuthSignature) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{8}
}

func (x *AuthSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Wrapper message for responses sent FROM the server TO the client
// during the ReceiveMessages stream.
type ReceiveMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//
	//	*ReceiveMessagesResponse_Challenge
	//	*ReceiveMessagesResponse_AuthSuccess
	//	*ReceiveMessagesResponse_Messages
	//	*ReceiveMessagesResponse_Eos
	ResponseType isReceiveMessagesResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *ReceiveMessagesResponse) Reset() {
	*x = ReceiveMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveMessagesResponse) ProtoMessage() {}

func (x *ReceiveMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveMessagesResponse.ProtoReflect.Descriptor instead.
func (*ReceiveMessagesResponse) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{9}
}

func (m *ReceiveMessagesResponse) GetResponseType() isReceiveMessagesResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *ReceiveMessagesResponse) GetChallenge() *Challenge {
	if x, ok := x.GetResponseType().(*ReceiveMessagesResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *ReceiveMessagesResponse) GetAuthSuccess() bool {
	if x, ok := x.GetResponseType().(*ReceiveMessagesResponse_AuthSuccess); ok {
		return x.AuthSuccess
	}
	return false
}

func (x *ReceiveMessagesResponse) GetMessages() *MailboxMessages {
	if x, ok := x.GetResponseType().(*ReceiveMessagesResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

func (x *ReceiveMessagesResponse) GetEos() *EndOfStream {
	if x, ok := x.GetResponseType().(*ReceiveMessagesResponse_Eos); ok {
		return x.Eos
	}
	return nil
}

type isReceiveMessagesResponse_ResponseType interface {
	isReceiveMessagesResponse_ResponseType()
}

type ReceiveMessagesResponse_Challenge struct {
	Challenge *Challenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type ReceiveMessagesResponse_AuthSuccess struct {
	AuthSuccess bool `protobuf:"varint,2,opt,name=auth_success,json=authSuccess,proto3,oneof"`
}

type ReceiveMessagesResponse_Messages struct {
	Messages *MailboxMessages `protobuf:"bytes,3,opt,name=messages,proto3,oneof"`
}

type ReceiveMessagesResponse_Eos struct {
	Eos *EndOfStream `protobuf:"bytes,4,opt,name=eos,proto3,oneof"`
}

func (*ReceiveMessagesResponse_Challenge) isReceiveMessagesResponse_ResponseType() {}

func (*ReceiveMessagesResponse_AuthSuccess) isReceiveMessagesResponse_ResponseType() {}

func (*ReceiveMessagesResponse_Messages) isReceiveMessagesResponse_ResponseType() {}

func (*ReceiveMessagesResponse_Eos) isReceiveMessagesResponse_ResponseType() {}

// Carries the challenge hash sent by the server to the client.
type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeHash []byte `protobuf:"bytes,1,opt,name=challenge_hash,json=challengeHash,proto3" json:"challenge_hash,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{10}
}

func (x *Challenge) GetChallengeHash() []byte {
	if x != nil {
		return x.ChallengeHash
	}
	return nil
}

// An empty message used to explicitly signal the normal end of the message
// stream.
type EndOfStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndOfStream) Reset() {
	*x = EndOfStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfStream) ProtoMessage() {}

func (x *EndOfStream) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfStream.ProtoReflect.Descriptor instead.
func (*EndOfStream) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{11}
}

// Request message for the MailboxInfo RPC.
type MailboxInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MailboxInfoRequest) Reset() {
	*x = MailboxInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxInfoRequest) ProtoMessage() {}

func (x *MailboxInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxInfoRequest.ProtoReflect.Descriptor instead.
func (*MailboxInfoRequest) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{12}
}

// Response message for the MailboxInfo RPC.
type MailboxInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current server time in Unix epoch seconds.
	ServerTime int64 `protobuf:"varint,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	// The number of messages currently stored on the server.
	MessageCount uint64 `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
}

func (x *MailboxInfoResponse) Reset() {
	*x = MailboxInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authmailboxrpc_mailbox_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxInfoResponse) ProtoMessage() {}

func (x *MailboxInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authmailboxrpc_mailbox_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxInfoResponse.ProtoReflect.Descriptor instead.
func (*MailboxInfoResponse) Descriptor() ([]byte, []int) {
	return file_authmailboxrpc_mailbox_proto_rawDescGZIP(), []int{13}
}

func (x *MailboxInfoResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *MailboxInfoResponse) GetMessageCount() uint64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

var File_authmailboxrpc_mailbox_proto protoreflect.FileDescriptor

var file_authmailboxrpc_mailbox_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63,
	0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x1a, 0x0f,
	0x74, 0x61, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x48, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x1b, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x61, 0x77,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x3b, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4d, 0x0a, 0x0f,
	0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x48, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x78, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x2d,
	0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xfa, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x0d,
	0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x14, 0x0a,
	0x12, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x13, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0xa1, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x56, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0b,
	0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authmailboxrpc_mailbox_proto_rawDescOnce sync.Once
	file_authmailboxrpc_mailbox_proto_rawDescData = file_authmailboxrpc_mailbox_proto_rawDesc
)

func file_authmailboxrpc_mailbox_proto_rawDescGZIP() []byte {
	file_authmailboxrpc_mailbox_proto_rawDescOnce.Do(func() {
		file_authmailboxrpc_mailbox_proto_rawDescData = protoimpl.X.CompressGZIP(file_authmailboxrpc_mailbox_proto_rawDescData)
	})
	return file_authmailboxrpc_mailbox_proto_rawDescData
}

var file_authmailboxrpc_mailbox_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_authmailboxrpc_mailbox_proto_goTypes = []any{
	(*MerkleProof)(nil),                 // 0: authmailboxrpc.MerkleProof
	(*BitcoinMerkleInclusionProof)(nil), // 1: authmailboxrpc.BitcoinMerkleInclusionProof
	(*MailboxMessage)(nil),              // 2: authmailboxrpc.MailboxMessage
	(*MailboxMessages)(nil),             // 3: authmailboxrpc.MailboxMessages
	(*SendMessageRequest)(nil),          // 4: authmailboxrpc.SendMessageRequest
	(*SendMessageResponse)(nil),         // 5: authmailboxrpc.SendMessageResponse
	(*ReceiveMessagesRequest)(nil),      // 6: authmailboxrpc.ReceiveMessagesRequest
	(*InitReceive)(nil),                 // 7: authmailboxrpc.InitReceive
	(*AuthSignature)(nil),               // 8: authmailboxrpc.AuthSignature
	(*ReceiveMessagesResponse)(nil),     // 9: authmailboxrpc.ReceiveMessagesResponse
	(*Challenge)(nil),                   // 10: authmailboxrpc.Challenge
	(*EndOfStream)(nil),                 // 11: authmailboxrpc.EndOfStream
	(*MailboxInfoRequest)(nil),          // 12: authmailboxrpc.MailboxInfoRequest
	(*MailboxInfoResponse)(nil),         // 13: authmailboxrpc.MailboxInfoResponse
	(*taprpc.OutPoint)(nil),             // 14: taprpc.OutPoint
}
var file_authmailboxrpc_mailbox_proto_depIdxs = []int32{
	0,  // 0: authmailboxrpc.BitcoinMerkleInclusionProof.merkle_proof:type_name -> authmailboxrpc.MerkleProof
	14, // 1: authmailboxrpc.BitcoinMerkleInclusionProof.claimed_outpoint:type_name -> taprpc.OutPoint
	2,  // 2: authmailboxrpc.MailboxMessages.messages:type_name -> authmailboxrpc.MailboxMessage
	1,  // 3: authmailboxrpc.SendMessageRequest.tx_proof:type_name -> authmailboxrpc.BitcoinMerkleInclusionProof
	7,  // 4: authmailboxrpc.ReceiveMessagesRequest.init:type_name -> authmailboxrpc.InitReceive
	8,  // 5: authmailboxrpc.ReceiveMessagesRequest.auth_sig:type_name -> authmailboxrpc.AuthSignature
	10, // 6: authmailboxrpc.ReceiveMessagesResponse.challenge:type_name -> authmailboxrpc.Challenge
	3,  // 7: authmailboxrpc.ReceiveMessagesResponse.messages:type_name -> authmailboxrpc.MailboxMessages
	11, // 8: authmailboxrpc.ReceiveMessagesResponse.eos:type_name -> authmailboxrpc.EndOfStream
	4,  // 9: authmailboxrpc.Mailbox.SendMessage:input_type -> authmailboxrpc.SendMessageRequest
	6,  // 10: authmailboxrpc.Mailbox.ReceiveMessages:input_type -> authmailboxrpc.ReceiveMessagesRequest
	12, // 11: authmailboxrpc.Mailbox.MailboxInfo:input_type -> authmailboxrpc.MailboxInfoRequest
	5,  // 12: authmailboxrpc.Mailbox.SendMessage:output_type -> authmailboxrpc.SendMessageResponse
	9,  // 13: authmailboxrpc.Mailbox.ReceiveMessages:output_type -> authmailboxrpc.ReceiveMessagesResponse
	13, // 14: authmailboxrpc.Mailbox.MailboxInfo:output_type -> authmailboxrpc.MailboxInfoResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_authmailboxrpc_mailbox_proto_init() }
func file_authmailboxrpc_mailbox_proto_init() {
	if File_authmailboxrpc_mailbox_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_authmailboxrpc_mailbox_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MerkleProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BitcoinMerkleInclusionProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MailboxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MailboxMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiveMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*InitReceive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AuthSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiveMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*EndOfStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MailboxInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authmailboxrpc_mailbox_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MailboxInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_authmailboxrpc_mailbox_proto_msgTypes[4].OneofWrappers = []any{
		(*SendMessageRequest_TxProof)(nil),
	}
	file_authmailboxrpc_mailbox_proto_msgTypes[6].OneofWrappers = []any{
		(*ReceiveMessagesRequest_Init)(nil),
		(*ReceiveMessagesRequest_AuthSig)(nil),
	}
	file_authmailboxrpc_mailbox_proto_msgTypes[9].OneofWrappers = []any{
		(*ReceiveMessagesResponse_Challenge)(nil),
		(*ReceiveMessagesResponse_AuthSuccess)(nil),
		(*ReceiveMessagesResponse_Messages)(nil),
		(*ReceiveMessagesResponse_Eos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authmailboxrpc_mailbox_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authmailboxrpc_mailbox_proto_goTypes,
		DependencyIndexes: file_authmailboxrpc_mailbox_proto_depIdxs,
		MessageInfos:      file_authmailboxrpc_mailbox_proto_msgTypes,
	}.Build()
	File_authmailboxrpc_mailbox_proto = out.File
	file_authmailboxrpc_mailbox_proto_rawDesc = nil
	file_authmailboxrpc_mailbox_proto_goTypes = nil
	file_authmailboxrpc_mailbox_proto_depIdxs = nil
}
