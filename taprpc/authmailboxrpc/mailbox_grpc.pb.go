// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authmailboxrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailboxClient is the client API for Mailbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailboxClient interface {
	// Sends a single message to a receiver's mailbox. Requires a valid, unused
	// Bitcoin P2TR transaction outpoint as proof of uniqueness, included in a
	// block as proof of work.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Initiates a bidirectional stream to receive messages for a specific
	// receiver. This stream implements the challenge-response handshake required
	// for receiver authentication before messages are delivered.
	//
	// Expected flow:
	// 1. Client -> Server: ReceiveMessagesRequest(init = InitReceive{...})
	// 2. Server -> Client: ReceiveMessagesResponse(challenge = Challenge{...})
	// 3. Client -> Server: ReceiveMessagesRequest(auth_sig = AuthSignature{...})
	// 4. Server -> Client: [Stream of ReceiveMessagesResponse(
	// message = MailboxMessage{...}
	// )]
	// 5. Server -> Client: ReceiveMessagesResponse(eos = EndOfStream{})
	ReceiveMessages(ctx context.Context, opts ...grpc.CallOption) (Mailbox_ReceiveMessagesClient, error)
	// Returns basic server information.
	MailboxInfo(ctx context.Context, in *MailboxInfoRequest, opts ...grpc.CallOption) (*MailboxInfoResponse, error)
}

type mailboxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailboxClient(cc grpc.ClientConnInterface) MailboxClient {
	return &mailboxClient{cc}
}

func (c *mailboxClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/authmailboxrpc.Mailbox/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) ReceiveMessages(ctx context.Context, opts ...grpc.CallOption) (Mailbox_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mailbox_ServiceDesc.Streams[0], "/authmailboxrpc.Mailbox/ReceiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailboxReceiveMessagesClient{stream}
	return x, nil
}

type Mailbox_ReceiveMessagesClient interface {
	Send(*ReceiveMessagesRequest) error
	Recv() (*ReceiveMessagesResponse, error)
	grpc.ClientStream
}

type mailboxReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *mailboxReceiveMessagesClient) Send(m *ReceiveMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailboxReceiveMessagesClient) Recv() (*ReceiveMessagesResponse, error) {
	m := new(ReceiveMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailboxClient) MailboxInfo(ctx context.Context, in *MailboxInfoRequest, opts ...grpc.CallOption) (*MailboxInfoResponse, error) {
	out := new(MailboxInfoResponse)
	err := c.cc.Invoke(ctx, "/authmailboxrpc.Mailbox/MailboxInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailboxServer is the server API for Mailbox service.
// All implementations must embed UnimplementedMailboxServer
// for forward compatibility
type MailboxServer interface {
	// Sends a single message to a receiver's mailbox. Requires a valid, unused
	// Bitcoin P2TR transaction outpoint as proof of uniqueness, included in a
	// block as proof of work.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Initiates a bidirectional stream to receive messages for a specific
	// receiver. This stream implements the challenge-response handshake required
	// for receiver authentication before messages are delivered.
	//
	// Expected flow:
	// 1. Client -> Server: ReceiveMessagesRequest(init = InitReceive{...})
	// 2. Server -> Client: ReceiveMessagesResponse(challenge = Challenge{...})
	// 3. Client -> Server: ReceiveMessagesRequest(auth_sig = AuthSignature{...})
	// 4. Server -> Client: [Stream of ReceiveMessagesResponse(
	// message = MailboxMessage{...}
	// )]
	// 5. Server -> Client: ReceiveMessagesResponse(eos = EndOfStream{})
	ReceiveMessages(Mailbox_ReceiveMessagesServer) error
	// Returns basic server information.
	MailboxInfo(context.Context, *MailboxInfoRequest) (*MailboxInfoResponse, error)
	mustEmbedUnimplementedMailboxServer()
}

// UnimplementedMailboxServer must be embedded to have forward compatible implementations.
type UnimplementedMailboxServer struct {
}

func (UnimplementedMailboxServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMailboxServer) ReceiveMessages(Mailbox_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedMailboxServer) MailboxInfo(context.Context, *MailboxInfoRequest) (*MailboxInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailboxInfo not implemented")
}
func (UnimplementedMailboxServer) mustEmbedUnimplementedMailboxServer() {}

// UnsafeMailboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailboxServer will
// result in compilation errors.
type UnsafeMailboxServer interface {
	mustEmbedUnimplementedMailboxServer()
}

func RegisterMailboxServer(s grpc.ServiceRegistrar, srv MailboxServer) {
	s.RegisterService(&Mailbox_ServiceDesc, srv)
}

func _Mailbox_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authmailboxrpc.Mailbox/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailboxServer).ReceiveMessages(&mailboxReceiveMessagesServer{stream})
}

type Mailbox_ReceiveMessagesServer interface {
	Send(*ReceiveMessagesResponse) error
	Recv() (*ReceiveMessagesRequest, error)
	grpc.ServerStream
}

type mailboxReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *mailboxReceiveMessagesServer) Send(m *ReceiveMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailboxReceiveMessagesServer) Recv() (*ReceiveMessagesRequest, error) {
	m := new(ReceiveMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mailbox_MailboxInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).MailboxInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authmailboxrpc.Mailbox/MailboxInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).MailboxInfo(ctx, req.(*MailboxInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailbox_ServiceDesc is the grpc.ServiceDesc for Mailbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authmailboxrpc.Mailbox",
	HandlerType: (*MailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Mailbox_SendMessage_Handler,
		},
		{
			MethodName: "MailboxInfo",
			Handler:    _Mailbox_MailboxInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _Mailbox_ReceiveMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "authmailboxrpc/mailbox.proto",
}
