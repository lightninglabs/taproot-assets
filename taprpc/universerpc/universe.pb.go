// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.6.1
// source: universerpc/universe.proto

package universerpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UniverseSyncMode int32

const (
	// A sync node that indicates that only new asset creation (minting) proofs
	// should be synced.
	UniverseSyncMode_SYNC_ISSUANCE_ONLY UniverseSyncMode = 0
	// A syncing mode that indicates that all asset proofs should be synced.
	// This includes normal transfers as well.
	UniverseSyncMode_SYNC_FULL UniverseSyncMode = 1
)

// Enum value maps for UniverseSyncMode.
var (
	UniverseSyncMode_name = map[int32]string{
		0: "SYNC_ISSUANCE_ONLY",
		1: "SYNC_FULL",
	}
	UniverseSyncMode_value = map[string]int32{
		"SYNC_ISSUANCE_ONLY": 0,
		"SYNC_FULL":          1,
	}
)

func (x UniverseSyncMode) Enum() *UniverseSyncMode {
	p := new(UniverseSyncMode)
	*p = x
	return p
}

func (x UniverseSyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UniverseSyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[0].Descriptor()
}

func (UniverseSyncMode) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[0]
}

func (x UniverseSyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UniverseSyncMode.Descriptor instead.
func (UniverseSyncMode) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

type AssetQuerySort int32

const (
	AssetQuerySort_SORT_BY_NONE           AssetQuerySort = 0
	AssetQuerySort_SORT_BY_ASSET_NAME     AssetQuerySort = 1
	AssetQuerySort_SORT_BY_ASSET_ID       AssetQuerySort = 2
	AssetQuerySort_SORT_BY_ASSET_TYPE     AssetQuerySort = 3
	AssetQuerySort_SORT_BY_TOTAL_SYNCS    AssetQuerySort = 4
	AssetQuerySort_SORT_BY_TOTAL_PROOFS   AssetQuerySort = 5
	AssetQuerySort_SORT_BY_GENESIS_HEIGHT AssetQuerySort = 6
)

// Enum value maps for AssetQuerySort.
var (
	AssetQuerySort_name = map[int32]string{
		0: "SORT_BY_NONE",
		1: "SORT_BY_ASSET_NAME",
		2: "SORT_BY_ASSET_ID",
		3: "SORT_BY_ASSET_TYPE",
		4: "SORT_BY_TOTAL_SYNCS",
		5: "SORT_BY_TOTAL_PROOFS",
		6: "SORT_BY_GENESIS_HEIGHT",
	}
	AssetQuerySort_value = map[string]int32{
		"SORT_BY_NONE":           0,
		"SORT_BY_ASSET_NAME":     1,
		"SORT_BY_ASSET_ID":       2,
		"SORT_BY_ASSET_TYPE":     3,
		"SORT_BY_TOTAL_SYNCS":    4,
		"SORT_BY_TOTAL_PROOFS":   5,
		"SORT_BY_GENESIS_HEIGHT": 6,
	}
)

func (x AssetQuerySort) Enum() *AssetQuerySort {
	p := new(AssetQuerySort)
	*p = x
	return p
}

func (x AssetQuerySort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetQuerySort) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[1].Descriptor()
}

func (AssetQuerySort) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[1]
}

func (x AssetQuerySort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetQuerySort.Descriptor instead.
func (AssetQuerySort) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{1}
}

type AssetTypeFilter int32

const (
	AssetTypeFilter_FILTER_ASSET_NONE        AssetTypeFilter = 0
	AssetTypeFilter_FILTER_ASSET_NORMAL      AssetTypeFilter = 1
	AssetTypeFilter_FILTER_ASSET_COLLECTIBLE AssetTypeFilter = 2
)

// Enum value maps for AssetTypeFilter.
var (
	AssetTypeFilter_name = map[int32]string{
		0: "FILTER_ASSET_NONE",
		1: "FILTER_ASSET_NORMAL",
		2: "FILTER_ASSET_COLLECTIBLE",
	}
	AssetTypeFilter_value = map[string]int32{
		"FILTER_ASSET_NONE":        0,
		"FILTER_ASSET_NORMAL":      1,
		"FILTER_ASSET_COLLECTIBLE": 2,
	}
)

func (x AssetTypeFilter) Enum() *AssetTypeFilter {
	p := new(AssetTypeFilter)
	*p = x
	return p
}

func (x AssetTypeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetTypeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[2].Descriptor()
}

func (AssetTypeFilter) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[2]
}

func (x AssetTypeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetTypeFilter.Descriptor instead.
func (AssetTypeFilter) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{2}
}

type AssetRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetRootRequest) Reset() {
	*x = AssetRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootRequest) ProtoMessage() {}

func (x *AssetRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootRequest.ProtoReflect.Descriptor instead.
func (*AssetRootRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

type MerkleSumNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MS-SMT root hash for the branch node.
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// The root sum of the branch node. This is hashed to create the root_hash
	// along with the left and right siblings. This value represents the total
	// known supply of the asset.
	RootSum int64 `protobuf:"varint,2,opt,name=root_sum,json=rootSum,proto3" json:"root_sum,omitempty"`
}

func (x *MerkleSumNode) Reset() {
	*x = MerkleSumNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleSumNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleSumNode) ProtoMessage() {}

func (x *MerkleSumNode) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleSumNode.ProtoReflect.Descriptor instead.
func (*MerkleSumNode) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{1}
}

func (x *MerkleSumNode) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MerkleSumNode) GetRootSum() int64 {
	if x != nil {
		return x.RootSum
	}
	return 0
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*ID_AssetId
	//	*ID_AssetIdStr
	//	*ID_GroupKey
	//	*ID_GroupKeyStr
	Id isID_Id `protobuf_oneof:"id"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{2}
}

func (m *ID) GetId() isID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ID) GetAssetId() []byte {
	if x, ok := x.GetId().(*ID_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *ID) GetAssetIdStr() string {
	if x, ok := x.GetId().(*ID_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *ID) GetGroupKey() []byte {
	if x, ok := x.GetId().(*ID_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *ID) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*ID_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isID_Id interface {
	isID_Id()
}

type ID_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ID_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type ID_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type ID_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*ID_AssetId) isID_Id() {}

func (*ID_AssetIdStr) isID_Id() {}

func (*ID_GroupKey) isID_Id() {}

func (*ID_GroupKeyStr) isID_Id() {}

type UniverseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The merkle sum sparse merkle tree root associated with the above
	// universe ID.
	MssmtRoot *MerkleSumNode `protobuf:"bytes,3,opt,name=mssmt_root,json=mssmtRoot,proto3" json:"mssmt_root,omitempty"`
	// The name of the asset.
	AssetName string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
}

func (x *UniverseRoot) Reset() {
	*x = UniverseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseRoot) ProtoMessage() {}

func (x *UniverseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseRoot.ProtoReflect.Descriptor instead.
func (*UniverseRoot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{3}
}

func (x *UniverseRoot) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseRoot) GetMssmtRoot() *MerkleSumNode {
	if x != nil {
		return x.MssmtRoot
	}
	return nil
}

func (x *UniverseRoot) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

type AssetRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of the set of known universe roots for each asset. The key in the
	// map is the 32-byte asset_id or group key hash.
	UniverseRoots map[string]*UniverseRoot `protobuf:"bytes,1,rep,name=universe_roots,json=universeRoots,proto3" json:"universe_roots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AssetRootResponse) Reset() {
	*x = AssetRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootResponse) ProtoMessage() {}

func (x *AssetRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootResponse.ProtoReflect.Descriptor instead.
func (*AssetRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{4}
}

func (x *AssetRootResponse) GetUniverseRoots() map[string]*UniverseRoot {
	if x != nil {
		return x.UniverseRoots
	}
	return nil
}

type AssetRootQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID value to uniquely identify a Universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetRootQuery) Reset() {
	*x = AssetRootQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootQuery) ProtoMessage() {}

func (x *AssetRootQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootQuery.ProtoReflect.Descriptor instead.
func (*AssetRootQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{5}
}

func (x *AssetRootQuery) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueryRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset root for the given asset ID or group key.
	AssetRoot *UniverseRoot `protobuf:"bytes,1,opt,name=asset_root,json=assetRoot,proto3" json:"asset_root,omitempty"`
}

func (x *QueryRootResponse) Reset() {
	*x = QueryRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRootResponse) ProtoMessage() {}

func (x *QueryRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRootResponse.ProtoReflect.Descriptor instead.
func (*QueryRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{6}
}

func (x *QueryRootResponse) GetAssetRoot() *UniverseRoot {
	if x != nil {
		return x.AssetRoot
	}
	return nil
}

type DeleteRootQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID value to uniquely identify a Universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRootQuery) Reset() {
	*x = DeleteRootQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRootQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRootQuery) ProtoMessage() {}

func (x *DeleteRootQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRootQuery.ProtoReflect.Descriptor instead.
func (*DeleteRootQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRootQuery) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRootResponse) Reset() {
	*x = DeleteRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRootResponse) ProtoMessage() {}

func (x *DeleteRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRootResponse.ProtoReflect.Descriptor instead.
func (*DeleteRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{8}
}

type Outpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output as a hex encoded (and reversed!) string.
	HashStr string `protobuf:"bytes,1,opt,name=hash_str,json=hashStr,proto3" json:"hash_str,omitempty"`
	// The index of the output.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{9}
}

func (x *Outpoint) GetHashStr() string {
	if x != nil {
		return x.HashStr
	}
	return ""
}

func (x *Outpoint) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AssetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the asset key, either as a single hex encoded string, or
	// an unrolled outpoint.
	//
	// Types that are assignable to Outpoint:
	//
	//	*AssetKey_OpStr
	//	*AssetKey_Op
	Outpoint isAssetKey_Outpoint `protobuf_oneof:"outpoint"`
	// The script key of the asset.
	//
	// Types that are assignable to ScriptKey:
	//
	//	*AssetKey_ScriptKeyBytes
	//	*AssetKey_ScriptKeyStr
	ScriptKey isAssetKey_ScriptKey `protobuf_oneof:"script_key"`
}

func (x *AssetKey) Reset() {
	*x = AssetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetKey) ProtoMessage() {}

func (x *AssetKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetKey.ProtoReflect.Descriptor instead.
func (*AssetKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{10}
}

func (m *AssetKey) GetOutpoint() isAssetKey_Outpoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (x *AssetKey) GetOpStr() string {
	if x, ok := x.GetOutpoint().(*AssetKey_OpStr); ok {
		return x.OpStr
	}
	return ""
}

func (x *AssetKey) GetOp() *Outpoint {
	if x, ok := x.GetOutpoint().(*AssetKey_Op); ok {
		return x.Op
	}
	return nil
}

func (m *AssetKey) GetScriptKey() isAssetKey_ScriptKey {
	if m != nil {
		return m.ScriptKey
	}
	return nil
}

func (x *AssetKey) GetScriptKeyBytes() []byte {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyBytes); ok {
		return x.ScriptKeyBytes
	}
	return nil
}

func (x *AssetKey) GetScriptKeyStr() string {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyStr); ok {
		return x.ScriptKeyStr
	}
	return ""
}

type isAssetKey_Outpoint interface {
	isAssetKey_Outpoint()
}

type AssetKey_OpStr struct {
	OpStr string `protobuf:"bytes,1,opt,name=op_str,json=opStr,proto3,oneof"`
}

type AssetKey_Op struct {
	Op *Outpoint `protobuf:"bytes,2,opt,name=op,proto3,oneof"`
}

func (*AssetKey_OpStr) isAssetKey_Outpoint() {}

func (*AssetKey_Op) isAssetKey_Outpoint() {}

type isAssetKey_ScriptKey interface {
	isAssetKey_ScriptKey()
}

type AssetKey_ScriptKeyBytes struct {
	ScriptKeyBytes []byte `protobuf:"bytes,3,opt,name=script_key_bytes,json=scriptKeyBytes,proto3,oneof"`
}

type AssetKey_ScriptKeyStr struct {
	ScriptKeyStr string `protobuf:"bytes,4,opt,name=script_key_str,json=scriptKeyStr,proto3,oneof"`
}

func (*AssetKey_ScriptKeyBytes) isAssetKey_ScriptKey() {}

func (*AssetKey_ScriptKeyStr) isAssetKey_ScriptKey() {}

type AssetLeafKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaf keys for the given asset ID or group key.
	AssetKeys []*AssetKey `protobuf:"bytes,1,rep,name=asset_keys,json=assetKeys,proto3" json:"asset_keys,omitempty"`
}

func (x *AssetLeafKeyResponse) Reset() {
	*x = AssetLeafKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafKeyResponse) ProtoMessage() {}

func (x *AssetLeafKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafKeyResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafKeyResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{11}
}

func (x *AssetLeafKeyResponse) GetAssetKeys() []*AssetKey {
	if x != nil {
		return x.AssetKeys
	}
	return nil
}

type AssetLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset included in the leaf.
	Asset *taprpc.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The asset issuance proof, which proves that the asset specified above
	// was issued properly.
	IssuanceProof []byte `protobuf:"bytes,2,opt,name=issuance_proof,json=issuanceProof,proto3" json:"issuance_proof,omitempty"`
}

func (x *AssetLeaf) Reset() {
	*x = AssetLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeaf) ProtoMessage() {}

func (x *AssetLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeaf.ProtoReflect.Descriptor instead.
func (*AssetLeaf) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{12}
}

func (x *AssetLeaf) GetAsset() *taprpc.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AssetLeaf) GetIssuanceProof() []byte {
	if x != nil {
		return x.IssuanceProof
	}
	return nil
}

type AssetLeafResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaves for the given asset ID or group key.
	Leaves []*AssetLeaf `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *AssetLeafResponse) Reset() {
	*x = AssetLeafResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafResponse) ProtoMessage() {}

func (x *AssetLeafResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{13}
}

func (x *AssetLeafResponse) GetLeaves() []*AssetLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type UniverseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to query for.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The asset key to query for.
	LeafKey *AssetKey `protobuf:"bytes,2,opt,name=leaf_key,json=leafKey,proto3" json:"leaf_key,omitempty"`
}

func (x *UniverseKey) Reset() {
	*x = UniverseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseKey) ProtoMessage() {}

func (x *UniverseKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseKey.ProtoReflect.Descriptor instead.
func (*UniverseKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{14}
}

func (x *UniverseKey) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseKey) GetLeafKey() *AssetKey {
	if x != nil {
		return x.LeafKey
	}
	return nil
}

type AssetProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request original request for the issuance proof.
	Req *UniverseKey `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	// The Universe root that includes this asset leaf.
	UniverseRoot *UniverseRoot `protobuf:"bytes,2,opt,name=universe_root,json=universeRoot,proto3" json:"universe_root,omitempty"`
	// An inclusion proof for the asset leaf included below. The value is that
	// issuance proof itself, with a sum value of the amount of the asset.
	UniverseInclusionProof []byte `protobuf:"bytes,3,opt,name=universe_inclusion_proof,json=universeInclusionProof,proto3" json:"universe_inclusion_proof,omitempty"`
	// The asset leaf itself, which includes the asset and the issuance proof.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
	// MultiverseRoot is the root of the multiverse tree that includes this
	// asset leaf.
	MultiverseRoot *MerkleSumNode `protobuf:"bytes,5,opt,name=multiverse_root,json=multiverseRoot,proto3" json:"multiverse_root,omitempty"`
	// MultiverseInclusionProof is the inclusion proof for the asset leaf in the
	// multiverse.
	MultiverseInclusionProof []byte `protobuf:"bytes,6,opt,name=multiverse_inclusion_proof,json=multiverseInclusionProof,proto3" json:"multiverse_inclusion_proof,omitempty"`
}

func (x *AssetProofResponse) Reset() {
	*x = AssetProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetProofResponse) ProtoMessage() {}

func (x *AssetProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetProofResponse.ProtoReflect.Descriptor instead.
func (*AssetProofResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{15}
}

func (x *AssetProofResponse) GetReq() *UniverseKey {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *AssetProofResponse) GetUniverseRoot() *UniverseRoot {
	if x != nil {
		return x.UniverseRoot
	}
	return nil
}

func (x *AssetProofResponse) GetUniverseInclusionProof() []byte {
	if x != nil {
		return x.UniverseInclusionProof
	}
	return nil
}

func (x *AssetProofResponse) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

func (x *AssetProofResponse) GetMultiverseRoot() *MerkleSumNode {
	if x != nil {
		return x.MultiverseRoot
	}
	return nil
}

func (x *AssetProofResponse) GetMultiverseInclusionProof() []byte {
	if x != nil {
		return x.MultiverseInclusionProof
	}
	return nil
}

type AssetProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to insert the proof for.
	Key *UniverseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The asset leaf to insert into the Universe tree.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
}

func (x *AssetProof) Reset() {
	*x = AssetProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetProof) ProtoMessage() {}

func (x *AssetProof) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetProof.ProtoReflect.Descriptor instead.
func (*AssetProof) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{16}
}

func (x *AssetProof) GetKey() *UniverseKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssetProof) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{17}
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pseudo-random runtime ID for the current instance of the Universe
	// server, changes with each restart. Mainly used to identify identical
	// servers when they are exposed under different hostnames/ports.
	RuntimeId int64 `protobuf:"varint,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	// The number of assets known to this Universe server.
	NumAssets uint64 `protobuf:"varint,2,opt,name=num_assets,json=numAssets,proto3" json:"num_assets,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{18}
}

func (x *InfoResponse) GetRuntimeId() int64 {
	if x != nil {
		return x.RuntimeId
	}
	return 0
}

func (x *InfoResponse) GetNumAssets() uint64 {
	if x != nil {
		return x.NumAssets
	}
	return 0
}

type SyncTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SyncTarget) Reset() {
	*x = SyncTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTarget) ProtoMessage() {}

func (x *SyncTarget) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTarget.ProtoReflect.Descriptor instead.
func (*SyncTarget) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{19}
}

func (x *SyncTarget) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(roasbeef): accept connection type? so can pass along self-signed
	// cert, also brontide based RPC handshake
	UniverseHost string `protobuf:"bytes,1,opt,name=universe_host,json=universeHost,proto3" json:"universe_host,omitempty"`
	// The sync mode. This determines what type of proofs are synced.
	SyncMode UniverseSyncMode `protobuf:"varint,2,opt,name=sync_mode,json=syncMode,proto3,enum=universerpc.UniverseSyncMode" json:"sync_mode,omitempty"`
	// The set of assets to sync. If none are specified, then all assets are
	// synced.
	SyncTargets []*SyncTarget `protobuf:"bytes,3,rep,name=sync_targets,json=syncTargets,proto3" json:"sync_targets,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{20}
}

func (x *SyncRequest) GetUniverseHost() string {
	if x != nil {
		return x.UniverseHost
	}
	return ""
}

func (x *SyncRequest) GetSyncMode() UniverseSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return UniverseSyncMode_SYNC_ISSUANCE_ONLY
}

func (x *SyncRequest) GetSyncTargets() []*SyncTarget {
	if x != nil {
		return x.SyncTargets
	}
	return nil
}

type SyncedUniverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old Universe root for the synced asset.
	OldAssetRoot *UniverseRoot `protobuf:"bytes,1,opt,name=old_asset_root,json=oldAssetRoot,proto3" json:"old_asset_root,omitempty"`
	// The new Universe root for the synced asset.
	NewAssetRoot *UniverseRoot `protobuf:"bytes,2,opt,name=new_asset_root,json=newAssetRoot,proto3" json:"new_asset_root,omitempty"`
	// The set of new asset leaves that were synced.
	NewAssetLeaves []*AssetLeaf `protobuf:"bytes,3,rep,name=new_asset_leaves,json=newAssetLeaves,proto3" json:"new_asset_leaves,omitempty"`
}

func (x *SyncedUniverse) Reset() {
	*x = SyncedUniverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncedUniverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncedUniverse) ProtoMessage() {}

func (x *SyncedUniverse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncedUniverse.ProtoReflect.Descriptor instead.
func (*SyncedUniverse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{21}
}

func (x *SyncedUniverse) GetOldAssetRoot() *UniverseRoot {
	if x != nil {
		return x.OldAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetRoot() *UniverseRoot {
	if x != nil {
		return x.NewAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetLeaves() []*AssetLeaf {
	if x != nil {
		return x.NewAssetLeaves
	}
	return nil
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{22}
}

type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of synced asset Universes.
	SyncedUniverses []*SyncedUniverse `protobuf:"bytes,1,rep,name=synced_universes,json=syncedUniverses,proto3" json:"synced_universes,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{23}
}

func (x *SyncResponse) GetSyncedUniverses() []*SyncedUniverse {
	if x != nil {
		return x.SyncedUniverses
	}
	return nil
}

type UniverseFederationServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UniverseFederationServer) Reset() {
	*x = UniverseFederationServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseFederationServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseFederationServer) ProtoMessage() {}

func (x *UniverseFederationServer) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseFederationServer.ProtoReflect.Descriptor instead.
func (*UniverseFederationServer) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{24}
}

func (x *UniverseFederationServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UniverseFederationServer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListFederationServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFederationServersRequest) Reset() {
	*x = ListFederationServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationServersRequest) ProtoMessage() {}

func (x *ListFederationServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationServersRequest.ProtoReflect.Descriptor instead.
func (*ListFederationServersRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{25}
}

type ListFederationServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListFederationServersResponse) Reset() {
	*x = ListFederationServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationServersResponse) ProtoMessage() {}

func (x *ListFederationServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationServersResponse.ProtoReflect.Descriptor instead.
func (*ListFederationServersResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{26}
}

func (x *ListFederationServersResponse) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type AddFederationServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *AddFederationServerRequest) Reset() {
	*x = AddFederationServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederationServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederationServerRequest) ProtoMessage() {}

func (x *AddFederationServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederationServerRequest.ProtoReflect.Descriptor instead.
func (*AddFederationServerRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{27}
}

func (x *AddFederationServerRequest) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type AddFederationServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFederationServerResponse) Reset() {
	*x = AddFederationServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederationServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederationServerResponse) ProtoMessage() {}

func (x *AddFederationServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederationServerResponse.ProtoReflect.Descriptor instead.
func (*AddFederationServerResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{28}
}

type DeleteFederationServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *DeleteFederationServerRequest) Reset() {
	*x = DeleteFederationServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationServerRequest) ProtoMessage() {}

func (x *DeleteFederationServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteFederationServerRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteFederationServerRequest) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type DeleteFederationServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFederationServerResponse) Reset() {
	*x = DeleteFederationServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationServerResponse) ProtoMessage() {}

func (x *DeleteFederationServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteFederationServerResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{30}
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTotalAssets int64 `protobuf:"varint,1,opt,name=num_total_assets,json=numTotalAssets,proto3" json:"num_total_assets,omitempty"`
	NumTotalSyncs  int64 `protobuf:"varint,2,opt,name=num_total_syncs,json=numTotalSyncs,proto3" json:"num_total_syncs,omitempty"`
	NumTotalProofs int64 `protobuf:"varint,3,opt,name=num_total_proofs,json=numTotalProofs,proto3" json:"num_total_proofs,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{31}
}

func (x *StatsResponse) GetNumTotalAssets() int64 {
	if x != nil {
		return x.NumTotalAssets
	}
	return 0
}

func (x *StatsResponse) GetNumTotalSyncs() int64 {
	if x != nil {
		return x.NumTotalSyncs
	}
	return 0
}

func (x *StatsResponse) GetNumTotalProofs() int64 {
	if x != nil {
		return x.NumTotalProofs
	}
	return 0
}

type AssetStatsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetNameFilter string          `protobuf:"bytes,1,opt,name=asset_name_filter,json=assetNameFilter,proto3" json:"asset_name_filter,omitempty"`
	AssetIdFilter   []byte          `protobuf:"bytes,2,opt,name=asset_id_filter,json=assetIdFilter,proto3" json:"asset_id_filter,omitempty"`
	AssetTypeFilter AssetTypeFilter `protobuf:"varint,3,opt,name=asset_type_filter,json=assetTypeFilter,proto3,enum=universerpc.AssetTypeFilter" json:"asset_type_filter,omitempty"`
	SortBy          AssetQuerySort  `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=universerpc.AssetQuerySort" json:"sort_by,omitempty"`
	Offset          int32           `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AssetStatsQuery) Reset() {
	*x = AssetStatsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStatsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStatsQuery) ProtoMessage() {}

func (x *AssetStatsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStatsQuery.ProtoReflect.Descriptor instead.
func (*AssetStatsQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{32}
}

func (x *AssetStatsQuery) GetAssetNameFilter() string {
	if x != nil {
		return x.AssetNameFilter
	}
	return ""
}

func (x *AssetStatsQuery) GetAssetIdFilter() []byte {
	if x != nil {
		return x.AssetIdFilter
	}
	return nil
}

func (x *AssetStatsQuery) GetAssetTypeFilter() AssetTypeFilter {
	if x != nil {
		return x.AssetTypeFilter
	}
	return AssetTypeFilter_FILTER_ASSET_NONE
}

func (x *AssetStatsQuery) GetSortBy() AssetQuerySort {
	if x != nil {
		return x.SortBy
	}
	return AssetQuerySort_SORT_BY_NONE
}

func (x *AssetStatsQuery) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AssetStatsQuery) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AssetStatsSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId          []byte           `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	GroupKey         []byte           `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GenesisPoint     string           `protobuf:"bytes,3,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	TotalSupply      int64            `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	AssetName        string           `protobuf:"bytes,5,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	AssetType        taprpc.AssetType `protobuf:"varint,6,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	GenesisHeight    int32            `protobuf:"varint,7,opt,name=genesis_height,json=genesisHeight,proto3" json:"genesis_height,omitempty"`
	GenesisTimestamp int64            `protobuf:"varint,8,opt,name=genesis_timestamp,json=genesisTimestamp,proto3" json:"genesis_timestamp,omitempty"`
	TotalSyncs       int64            `protobuf:"varint,9,opt,name=total_syncs,json=totalSyncs,proto3" json:"total_syncs,omitempty"`
	TotalProofs      int64            `protobuf:"varint,10,opt,name=total_proofs,json=totalProofs,proto3" json:"total_proofs,omitempty"`
}

func (x *AssetStatsSnapshot) Reset() {
	*x = AssetStatsSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStatsSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStatsSnapshot) ProtoMessage() {}

func (x *AssetStatsSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStatsSnapshot.ProtoReflect.Descriptor instead.
func (*AssetStatsSnapshot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{33}
}

func (x *AssetStatsSnapshot) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetStatsSnapshot) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *AssetStatsSnapshot) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

func (x *AssetStatsSnapshot) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *AssetStatsSnapshot) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AssetStatsSnapshot) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *AssetStatsSnapshot) GetGenesisHeight() int32 {
	if x != nil {
		return x.GenesisHeight
	}
	return 0
}

func (x *AssetStatsSnapshot) GetGenesisTimestamp() int64 {
	if x != nil {
		return x.GenesisTimestamp
	}
	return 0
}

func (x *AssetStatsSnapshot) GetTotalSyncs() int64 {
	if x != nil {
		return x.TotalSyncs
	}
	return 0
}

func (x *AssetStatsSnapshot) GetTotalProofs() int64 {
	if x != nil {
		return x.TotalProofs
	}
	return 0
}

type UniverseAssetStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetStats []*AssetStatsSnapshot `protobuf:"bytes,1,rep,name=asset_stats,json=assetStats,proto3" json:"asset_stats,omitempty"`
}

func (x *UniverseAssetStats) Reset() {
	*x = UniverseAssetStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseAssetStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseAssetStats) ProtoMessage() {}

func (x *UniverseAssetStats) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseAssetStats.ProtoReflect.Descriptor instead.
func (*UniverseAssetStats) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{34}
}

func (x *UniverseAssetStats) GetAssetStats() []*AssetStatsSnapshot {
	if x != nil {
		return x.AssetStats
	}
	return nil
}

type QueryEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp int64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   int64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *QueryEventsRequest) Reset() {
	*x = QueryEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsRequest) ProtoMessage() {}

func (x *QueryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsRequest.ProtoReflect.Descriptor instead.
func (*QueryEventsRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{35}
}

func (x *QueryEventsRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *QueryEventsRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type QueryEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*GroupedUniverseEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *QueryEventsResponse) Reset() {
	*x = QueryEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsResponse) ProtoMessage() {}

func (x *QueryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsResponse.ProtoReflect.Descriptor instead.
func (*QueryEventsResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{36}
}

func (x *QueryEventsResponse) GetEvents() []*GroupedUniverseEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

type GroupedUniverseEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the events occurred on, formatted as YYYY-MM-DD.
	Date           string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	SyncEvents     uint64 `protobuf:"varint,2,opt,name=sync_events,json=syncEvents,proto3" json:"sync_events,omitempty"`
	NewProofEvents uint64 `protobuf:"varint,3,opt,name=new_proof_events,json=newProofEvents,proto3" json:"new_proof_events,omitempty"`
}

func (x *GroupedUniverseEvents) Reset() {
	*x = GroupedUniverseEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedUniverseEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedUniverseEvents) ProtoMessage() {}

func (x *GroupedUniverseEvents) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedUniverseEvents.ProtoReflect.Descriptor instead.
func (*GroupedUniverseEvents) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{37}
}

func (x *GroupedUniverseEvents) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GroupedUniverseEvents) GetSyncEvents() uint64 {
	if x != nil {
		return x.SyncEvents
	}
	return 0
}

func (x *GroupedUniverseEvents) GetNewProofEvents() uint64 {
	if x != nil {
		return x.NewProofEvents
	}
	return 0
}

var File_universerpc_universe_proto protoreflect.FileDescriptor

var file_universerpc_universe_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x1a, 0x13, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x02,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x12, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x32, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xba, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x06, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a,
	0x14, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x65, 0x61,
	0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x22, 0xf4, 0x02, 0x0a, 0x12,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12,
	0x43, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x6f, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x22, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x2d, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xaa, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x0b, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a,
	0x0e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x18, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a,
	0x1a, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x1d, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x20, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x93, 0x02,
	0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x51, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x39, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0xb7, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46,
	0x53, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06, 0x2a,
	0x5f, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x32, 0xcb, 0x09, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x0f, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x21,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x12, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x44, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_universerpc_universe_proto_rawDescOnce sync.Once
	file_universerpc_universe_proto_rawDescData = file_universerpc_universe_proto_rawDesc
)

func file_universerpc_universe_proto_rawDescGZIP() []byte {
	file_universerpc_universe_proto_rawDescOnce.Do(func() {
		file_universerpc_universe_proto_rawDescData = protoimpl.X.CompressGZIP(file_universerpc_universe_proto_rawDescData)
	})
	return file_universerpc_universe_proto_rawDescData
}

var file_universerpc_universe_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_universerpc_universe_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_universerpc_universe_proto_goTypes = []interface{}{
	(UniverseSyncMode)(0),                  // 0: universerpc.UniverseSyncMode
	(AssetQuerySort)(0),                    // 1: universerpc.AssetQuerySort
	(AssetTypeFilter)(0),                   // 2: universerpc.AssetTypeFilter
	(*AssetRootRequest)(nil),               // 3: universerpc.AssetRootRequest
	(*MerkleSumNode)(nil),                  // 4: universerpc.MerkleSumNode
	(*ID)(nil),                             // 5: universerpc.ID
	(*UniverseRoot)(nil),                   // 6: universerpc.UniverseRoot
	(*AssetRootResponse)(nil),              // 7: universerpc.AssetRootResponse
	(*AssetRootQuery)(nil),                 // 8: universerpc.AssetRootQuery
	(*QueryRootResponse)(nil),              // 9: universerpc.QueryRootResponse
	(*DeleteRootQuery)(nil),                // 10: universerpc.DeleteRootQuery
	(*DeleteRootResponse)(nil),             // 11: universerpc.DeleteRootResponse
	(*Outpoint)(nil),                       // 12: universerpc.Outpoint
	(*AssetKey)(nil),                       // 13: universerpc.AssetKey
	(*AssetLeafKeyResponse)(nil),           // 14: universerpc.AssetLeafKeyResponse
	(*AssetLeaf)(nil),                      // 15: universerpc.AssetLeaf
	(*AssetLeafResponse)(nil),              // 16: universerpc.AssetLeafResponse
	(*UniverseKey)(nil),                    // 17: universerpc.UniverseKey
	(*AssetProofResponse)(nil),             // 18: universerpc.AssetProofResponse
	(*AssetProof)(nil),                     // 19: universerpc.AssetProof
	(*InfoRequest)(nil),                    // 20: universerpc.InfoRequest
	(*InfoResponse)(nil),                   // 21: universerpc.InfoResponse
	(*SyncTarget)(nil),                     // 22: universerpc.SyncTarget
	(*SyncRequest)(nil),                    // 23: universerpc.SyncRequest
	(*SyncedUniverse)(nil),                 // 24: universerpc.SyncedUniverse
	(*StatsRequest)(nil),                   // 25: universerpc.StatsRequest
	(*SyncResponse)(nil),                   // 26: universerpc.SyncResponse
	(*UniverseFederationServer)(nil),       // 27: universerpc.UniverseFederationServer
	(*ListFederationServersRequest)(nil),   // 28: universerpc.ListFederationServersRequest
	(*ListFederationServersResponse)(nil),  // 29: universerpc.ListFederationServersResponse
	(*AddFederationServerRequest)(nil),     // 30: universerpc.AddFederationServerRequest
	(*AddFederationServerResponse)(nil),    // 31: universerpc.AddFederationServerResponse
	(*DeleteFederationServerRequest)(nil),  // 32: universerpc.DeleteFederationServerRequest
	(*DeleteFederationServerResponse)(nil), // 33: universerpc.DeleteFederationServerResponse
	(*StatsResponse)(nil),                  // 34: universerpc.StatsResponse
	(*AssetStatsQuery)(nil),                // 35: universerpc.AssetStatsQuery
	(*AssetStatsSnapshot)(nil),             // 36: universerpc.AssetStatsSnapshot
	(*UniverseAssetStats)(nil),             // 37: universerpc.UniverseAssetStats
	(*QueryEventsRequest)(nil),             // 38: universerpc.QueryEventsRequest
	(*QueryEventsResponse)(nil),            // 39: universerpc.QueryEventsResponse
	(*GroupedUniverseEvents)(nil),          // 40: universerpc.GroupedUniverseEvents
	nil,                                    // 41: universerpc.AssetRootResponse.UniverseRootsEntry
	(*taprpc.Asset)(nil),                   // 42: taprpc.Asset
	(taprpc.AssetType)(0),                  // 43: taprpc.AssetType
}
var file_universerpc_universe_proto_depIdxs = []int32{
	5,  // 0: universerpc.UniverseRoot.id:type_name -> universerpc.ID
	4,  // 1: universerpc.UniverseRoot.mssmt_root:type_name -> universerpc.MerkleSumNode
	41, // 2: universerpc.AssetRootResponse.universe_roots:type_name -> universerpc.AssetRootResponse.UniverseRootsEntry
	5,  // 3: universerpc.AssetRootQuery.id:type_name -> universerpc.ID
	6,  // 4: universerpc.QueryRootResponse.asset_root:type_name -> universerpc.UniverseRoot
	5,  // 5: universerpc.DeleteRootQuery.id:type_name -> universerpc.ID
	12, // 6: universerpc.AssetKey.op:type_name -> universerpc.Outpoint
	13, // 7: universerpc.AssetLeafKeyResponse.asset_keys:type_name -> universerpc.AssetKey
	42, // 8: universerpc.AssetLeaf.asset:type_name -> taprpc.Asset
	15, // 9: universerpc.AssetLeafResponse.leaves:type_name -> universerpc.AssetLeaf
	5,  // 10: universerpc.UniverseKey.id:type_name -> universerpc.ID
	13, // 11: universerpc.UniverseKey.leaf_key:type_name -> universerpc.AssetKey
	17, // 12: universerpc.AssetProofResponse.req:type_name -> universerpc.UniverseKey
	6,  // 13: universerpc.AssetProofResponse.universe_root:type_name -> universerpc.UniverseRoot
	15, // 14: universerpc.AssetProofResponse.asset_leaf:type_name -> universerpc.AssetLeaf
	4,  // 15: universerpc.AssetProofResponse.multiverse_root:type_name -> universerpc.MerkleSumNode
	17, // 16: universerpc.AssetProof.key:type_name -> universerpc.UniverseKey
	15, // 17: universerpc.AssetProof.asset_leaf:type_name -> universerpc.AssetLeaf
	5,  // 18: universerpc.SyncTarget.id:type_name -> universerpc.ID
	0,  // 19: universerpc.SyncRequest.sync_mode:type_name -> universerpc.UniverseSyncMode
	22, // 20: universerpc.SyncRequest.sync_targets:type_name -> universerpc.SyncTarget
	6,  // 21: universerpc.SyncedUniverse.old_asset_root:type_name -> universerpc.UniverseRoot
	6,  // 22: universerpc.SyncedUniverse.new_asset_root:type_name -> universerpc.UniverseRoot
	15, // 23: universerpc.SyncedUniverse.new_asset_leaves:type_name -> universerpc.AssetLeaf
	24, // 24: universerpc.SyncResponse.synced_universes:type_name -> universerpc.SyncedUniverse
	27, // 25: universerpc.ListFederationServersResponse.servers:type_name -> universerpc.UniverseFederationServer
	27, // 26: universerpc.AddFederationServerRequest.servers:type_name -> universerpc.UniverseFederationServer
	27, // 27: universerpc.DeleteFederationServerRequest.servers:type_name -> universerpc.UniverseFederationServer
	2,  // 28: universerpc.AssetStatsQuery.asset_type_filter:type_name -> universerpc.AssetTypeFilter
	1,  // 29: universerpc.AssetStatsQuery.sort_by:type_name -> universerpc.AssetQuerySort
	43, // 30: universerpc.AssetStatsSnapshot.asset_type:type_name -> taprpc.AssetType
	36, // 31: universerpc.UniverseAssetStats.asset_stats:type_name -> universerpc.AssetStatsSnapshot
	40, // 32: universerpc.QueryEventsResponse.events:type_name -> universerpc.GroupedUniverseEvents
	6,  // 33: universerpc.AssetRootResponse.UniverseRootsEntry.value:type_name -> universerpc.UniverseRoot
	3,  // 34: universerpc.Universe.AssetRoots:input_type -> universerpc.AssetRootRequest
	8,  // 35: universerpc.Universe.QueryAssetRoots:input_type -> universerpc.AssetRootQuery
	10, // 36: universerpc.Universe.DeleteAssetRoot:input_type -> universerpc.DeleteRootQuery
	5,  // 37: universerpc.Universe.AssetLeafKeys:input_type -> universerpc.ID
	5,  // 38: universerpc.Universe.AssetLeaves:input_type -> universerpc.ID
	17, // 39: universerpc.Universe.QueryProof:input_type -> universerpc.UniverseKey
	19, // 40: universerpc.Universe.InsertProof:input_type -> universerpc.AssetProof
	20, // 41: universerpc.Universe.Info:input_type -> universerpc.InfoRequest
	23, // 42: universerpc.Universe.SyncUniverse:input_type -> universerpc.SyncRequest
	28, // 43: universerpc.Universe.ListFederationServers:input_type -> universerpc.ListFederationServersRequest
	30, // 44: universerpc.Universe.AddFederationServer:input_type -> universerpc.AddFederationServerRequest
	32, // 45: universerpc.Universe.DeleteFederationServer:input_type -> universerpc.DeleteFederationServerRequest
	25, // 46: universerpc.Universe.UniverseStats:input_type -> universerpc.StatsRequest
	35, // 47: universerpc.Universe.QueryAssetStats:input_type -> universerpc.AssetStatsQuery
	38, // 48: universerpc.Universe.QueryEvents:input_type -> universerpc.QueryEventsRequest
	7,  // 49: universerpc.Universe.AssetRoots:output_type -> universerpc.AssetRootResponse
	9,  // 50: universerpc.Universe.QueryAssetRoots:output_type -> universerpc.QueryRootResponse
	11, // 51: universerpc.Universe.DeleteAssetRoot:output_type -> universerpc.DeleteRootResponse
	14, // 52: universerpc.Universe.AssetLeafKeys:output_type -> universerpc.AssetLeafKeyResponse
	16, // 53: universerpc.Universe.AssetLeaves:output_type -> universerpc.AssetLeafResponse
	18, // 54: universerpc.Universe.QueryProof:output_type -> universerpc.AssetProofResponse
	18, // 55: universerpc.Universe.InsertProof:output_type -> universerpc.AssetProofResponse
	21, // 56: universerpc.Universe.Info:output_type -> universerpc.InfoResponse
	26, // 57: universerpc.Universe.SyncUniverse:output_type -> universerpc.SyncResponse
	29, // 58: universerpc.Universe.ListFederationServers:output_type -> universerpc.ListFederationServersResponse
	31, // 59: universerpc.Universe.AddFederationServer:output_type -> universerpc.AddFederationServerResponse
	33, // 60: universerpc.Universe.DeleteFederationServer:output_type -> universerpc.DeleteFederationServerResponse
	34, // 61: universerpc.Universe.UniverseStats:output_type -> universerpc.StatsResponse
	37, // 62: universerpc.Universe.QueryAssetStats:output_type -> universerpc.UniverseAssetStats
	39, // 63: universerpc.Universe.QueryEvents:output_type -> universerpc.QueryEventsResponse
	49, // [49:64] is the sub-list for method output_type
	34, // [34:49] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_universerpc_universe_proto_init() }
func file_universerpc_universe_proto_init() {
	if File_universerpc_universe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_universerpc_universe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleSumNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRootQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeafKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeafResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncedUniverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseFederationServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFederationServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFederationServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetStatsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetStatsSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseAssetStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupedUniverseEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_universerpc_universe_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ID_AssetId)(nil),
		(*ID_AssetIdStr)(nil),
		(*ID_GroupKey)(nil),
		(*ID_GroupKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AssetKey_OpStr)(nil),
		(*AssetKey_Op)(nil),
		(*AssetKey_ScriptKeyBytes)(nil),
		(*AssetKey_ScriptKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_universerpc_universe_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_universerpc_universe_proto_goTypes,
		DependencyIndexes: file_universerpc_universe_proto_depIdxs,
		EnumInfos:         file_universerpc_universe_proto_enumTypes,
		MessageInfos:      file_universerpc_universe_proto_msgTypes,
	}.Build()
	File_universerpc_universe_proto = out.File
	file_universerpc_universe_proto_rawDesc = nil
	file_universerpc_universe_proto_goTypes = nil
	file_universerpc_universe_proto_depIdxs = nil
}
