// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: universerpc/universe.proto

package universerpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProofType int32

const (
	ProofType_PROOF_TYPE_UNSPECIFIED ProofType = 0
	ProofType_PROOF_TYPE_ISSUANCE    ProofType = 1
	ProofType_PROOF_TYPE_TRANSFER    ProofType = 2
)

// Enum value maps for ProofType.
var (
	ProofType_name = map[int32]string{
		0: "PROOF_TYPE_UNSPECIFIED",
		1: "PROOF_TYPE_ISSUANCE",
		2: "PROOF_TYPE_TRANSFER",
	}
	ProofType_value = map[string]int32{
		"PROOF_TYPE_UNSPECIFIED": 0,
		"PROOF_TYPE_ISSUANCE":    1,
		"PROOF_TYPE_TRANSFER":    2,
	}
)

func (x ProofType) Enum() *ProofType {
	p := new(ProofType)
	*p = x
	return p
}

func (x ProofType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofType) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[0].Descriptor()
}

func (ProofType) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[0]
}

func (x ProofType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofType.Descriptor instead.
func (ProofType) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

type UniverseSyncMode int32

const (
	// A sync node that indicates that only new asset creation (minting) proofs
	// should be synced.
	UniverseSyncMode_SYNC_ISSUANCE_ONLY UniverseSyncMode = 0
	// A syncing mode that indicates that all asset proofs should be synced.
	// This includes normal transfers as well.
	UniverseSyncMode_SYNC_FULL UniverseSyncMode = 1
)

// Enum value maps for UniverseSyncMode.
var (
	UniverseSyncMode_name = map[int32]string{
		0: "SYNC_ISSUANCE_ONLY",
		1: "SYNC_FULL",
	}
	UniverseSyncMode_value = map[string]int32{
		"SYNC_ISSUANCE_ONLY": 0,
		"SYNC_FULL":          1,
	}
)

func (x UniverseSyncMode) Enum() *UniverseSyncMode {
	p := new(UniverseSyncMode)
	*p = x
	return p
}

func (x UniverseSyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UniverseSyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[1].Descriptor()
}

func (UniverseSyncMode) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[1]
}

func (x UniverseSyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UniverseSyncMode.Descriptor instead.
func (UniverseSyncMode) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{1}
}

type AssetQuerySort int32

const (
	AssetQuerySort_SORT_BY_NONE           AssetQuerySort = 0
	AssetQuerySort_SORT_BY_ASSET_NAME     AssetQuerySort = 1
	AssetQuerySort_SORT_BY_ASSET_ID       AssetQuerySort = 2
	AssetQuerySort_SORT_BY_ASSET_TYPE     AssetQuerySort = 3
	AssetQuerySort_SORT_BY_TOTAL_SYNCS    AssetQuerySort = 4
	AssetQuerySort_SORT_BY_TOTAL_PROOFS   AssetQuerySort = 5
	AssetQuerySort_SORT_BY_GENESIS_HEIGHT AssetQuerySort = 6
	AssetQuerySort_SORT_BY_TOTAL_SUPPLY   AssetQuerySort = 7
)

// Enum value maps for AssetQuerySort.
var (
	AssetQuerySort_name = map[int32]string{
		0: "SORT_BY_NONE",
		1: "SORT_BY_ASSET_NAME",
		2: "SORT_BY_ASSET_ID",
		3: "SORT_BY_ASSET_TYPE",
		4: "SORT_BY_TOTAL_SYNCS",
		5: "SORT_BY_TOTAL_PROOFS",
		6: "SORT_BY_GENESIS_HEIGHT",
		7: "SORT_BY_TOTAL_SUPPLY",
	}
	AssetQuerySort_value = map[string]int32{
		"SORT_BY_NONE":           0,
		"SORT_BY_ASSET_NAME":     1,
		"SORT_BY_ASSET_ID":       2,
		"SORT_BY_ASSET_TYPE":     3,
		"SORT_BY_TOTAL_SYNCS":    4,
		"SORT_BY_TOTAL_PROOFS":   5,
		"SORT_BY_GENESIS_HEIGHT": 6,
		"SORT_BY_TOTAL_SUPPLY":   7,
	}
)

func (x AssetQuerySort) Enum() *AssetQuerySort {
	p := new(AssetQuerySort)
	*p = x
	return p
}

func (x AssetQuerySort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetQuerySort) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[2].Descriptor()
}

func (AssetQuerySort) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[2]
}

func (x AssetQuerySort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetQuerySort.Descriptor instead.
func (AssetQuerySort) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{2}
}

type SortDirection int32

const (
	SortDirection_SORT_DIRECTION_ASC  SortDirection = 0
	SortDirection_SORT_DIRECTION_DESC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_ASC",
		1: "SORT_DIRECTION_DESC",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_ASC":  0,
		"SORT_DIRECTION_DESC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[3].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[3]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{3}
}

type AssetTypeFilter int32

const (
	AssetTypeFilter_FILTER_ASSET_NONE        AssetTypeFilter = 0
	AssetTypeFilter_FILTER_ASSET_NORMAL      AssetTypeFilter = 1
	AssetTypeFilter_FILTER_ASSET_COLLECTIBLE AssetTypeFilter = 2
)

// Enum value maps for AssetTypeFilter.
var (
	AssetTypeFilter_name = map[int32]string{
		0: "FILTER_ASSET_NONE",
		1: "FILTER_ASSET_NORMAL",
		2: "FILTER_ASSET_COLLECTIBLE",
	}
	AssetTypeFilter_value = map[string]int32{
		"FILTER_ASSET_NONE":        0,
		"FILTER_ASSET_NORMAL":      1,
		"FILTER_ASSET_COLLECTIBLE": 2,
	}
)

func (x AssetTypeFilter) Enum() *AssetTypeFilter {
	p := new(AssetTypeFilter)
	*p = x
	return p
}

func (x AssetTypeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetTypeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[4].Descriptor()
}

func (AssetTypeFilter) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[4]
}

func (x AssetTypeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetTypeFilter.Descriptor instead.
func (AssetTypeFilter) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{4}
}

type MultiverseRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proof type to calculate the multiverse root for.
	ProofType ProofType `protobuf:"varint,1,opt,name=proof_type,json=proofType,proto3,enum=universerpc.ProofType" json:"proof_type,omitempty"`
	// An optional list of universe IDs to include in the multiverse root. If
	// none are specified, then all known universes of the given proof type are
	// included. NOTE: The proof type within the IDs must either be unspecified
	// or match the proof type above.
	SpecificIds []*ID `protobuf:"bytes,2,rep,name=specific_ids,json=specificIds,proto3" json:"specific_ids,omitempty"`
}

func (x *MultiverseRootRequest) Reset() {
	*x = MultiverseRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiverseRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiverseRootRequest) ProtoMessage() {}

func (x *MultiverseRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiverseRootRequest.ProtoReflect.Descriptor instead.
func (*MultiverseRootRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

func (x *MultiverseRootRequest) GetProofType() ProofType {
	if x != nil {
		return x.ProofType
	}
	return ProofType_PROOF_TYPE_UNSPECIFIED
}

func (x *MultiverseRootRequest) GetSpecificIds() []*ID {
	if x != nil {
		return x.SpecificIds
	}
	return nil
}

type MultiverseRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root of the multiverse tree.
	MultiverseRoot *MerkleSumNode `protobuf:"bytes,1,opt,name=multiverse_root,json=multiverseRoot,proto3" json:"multiverse_root,omitempty"`
}

func (x *MultiverseRootResponse) Reset() {
	*x = MultiverseRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiverseRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiverseRootResponse) ProtoMessage() {}

func (x *MultiverseRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiverseRootResponse.ProtoReflect.Descriptor instead.
func (*MultiverseRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{1}
}

func (x *MultiverseRootResponse) GetMultiverseRoot() *MerkleSumNode {
	if x != nil {
		return x.MultiverseRoot
	}
	return nil
}

type AssetRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then the response will include the amounts for each asset ID
	// of grouped assets.
	WithAmountsById bool `protobuf:"varint,1,opt,name=with_amounts_by_id,json=withAmountsById,proto3" json:"with_amounts_by_id,omitempty"`
	// The offset for the page.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The length limit for the page.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The direction of the page.
	Direction SortDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=universerpc.SortDirection" json:"direction,omitempty"`
}

func (x *AssetRootRequest) Reset() {
	*x = AssetRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootRequest) ProtoMessage() {}

func (x *AssetRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootRequest.ProtoReflect.Descriptor instead.
func (*AssetRootRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{2}
}

func (x *AssetRootRequest) GetWithAmountsById() bool {
	if x != nil {
		return x.WithAmountsById
	}
	return false
}

func (x *AssetRootRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AssetRootRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AssetRootRequest) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_ASC
}

type MerkleSumNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MS-SMT root hash for the branch node.
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// The root sum of the branch node. This is hashed to create the root_hash
	// along with the left and right siblings. This value represents the total
	// known supply of the asset.
	RootSum int64 `protobuf:"varint,2,opt,name=root_sum,json=rootSum,proto3" json:"root_sum,omitempty"`
}

func (x *MerkleSumNode) Reset() {
	*x = MerkleSumNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleSumNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleSumNode) ProtoMessage() {}

func (x *MerkleSumNode) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleSumNode.ProtoReflect.Descriptor instead.
func (*MerkleSumNode) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{3}
}

func (x *MerkleSumNode) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MerkleSumNode) GetRootSum() int64 {
	if x != nil {
		return x.RootSum
	}
	return 0
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*ID_AssetId
	//	*ID_AssetIdStr
	//	*ID_GroupKey
	//	*ID_GroupKeyStr
	Id        isID_Id   `protobuf_oneof:"id"`
	ProofType ProofType `protobuf:"varint,5,opt,name=proof_type,json=proofType,proto3,enum=universerpc.ProofType" json:"proof_type,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{4}
}

func (m *ID) GetId() isID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ID) GetAssetId() []byte {
	if x, ok := x.GetId().(*ID_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *ID) GetAssetIdStr() string {
	if x, ok := x.GetId().(*ID_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *ID) GetGroupKey() []byte {
	if x, ok := x.GetId().(*ID_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *ID) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*ID_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

func (x *ID) GetProofType() ProofType {
	if x != nil {
		return x.ProofType
	}
	return ProofType_PROOF_TYPE_UNSPECIFIED
}

type isID_Id interface {
	isID_Id()
}

type ID_AssetId struct {
	// The 32-byte asset ID specified as raw bytes (gRPC only).
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ID_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string (use this for REST).
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type ID_GroupKey struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type ID_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*ID_AssetId) isID_Id() {}

func (*ID_AssetIdStr) isID_Id() {}

func (*ID_GroupKey) isID_Id() {}

func (*ID_GroupKeyStr) isID_Id() {}

type UniverseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The merkle sum sparse merkle tree root associated with the above
	// universe ID.
	MssmtRoot *MerkleSumNode `protobuf:"bytes,3,opt,name=mssmt_root,json=mssmtRoot,proto3" json:"mssmt_root,omitempty"`
	// The name of the asset.
	AssetName string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// A map of hex encoded asset IDs to the number of units minted for that
	// asset. This only contains more than one entry for grouped assets and in
	// that case represents the whole list of assets currently known to exist
	// within the group. For single (non-grouped) assets, this is equal to the
	// asset ID above and the sum in the mssmt_root. A hex encoded string is
	// used as the map key because gRPC does not support using raw bytes for a
	// map key.
	AmountsByAssetId map[string]uint64 `protobuf:"bytes,5,rep,name=amounts_by_asset_id,json=amountsByAssetId,proto3" json:"amounts_by_asset_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UniverseRoot) Reset() {
	*x = UniverseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseRoot) ProtoMessage() {}

func (x *UniverseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseRoot.ProtoReflect.Descriptor instead.
func (*UniverseRoot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{5}
}

func (x *UniverseRoot) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseRoot) GetMssmtRoot() *MerkleSumNode {
	if x != nil {
		return x.MssmtRoot
	}
	return nil
}

func (x *UniverseRoot) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *UniverseRoot) GetAmountsByAssetId() map[string]uint64 {
	if x != nil {
		return x.AmountsByAssetId
	}
	return nil
}

type AssetRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of the set of known universe roots for each asset. The key in the
	// map is the 32-byte asset_id or group key hash.
	UniverseRoots map[string]*UniverseRoot `protobuf:"bytes,1,rep,name=universe_roots,json=universeRoots,proto3" json:"universe_roots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AssetRootResponse) Reset() {
	*x = AssetRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootResponse) ProtoMessage() {}

func (x *AssetRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootResponse.ProtoReflect.Descriptor instead.
func (*AssetRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{6}
}

func (x *AssetRootResponse) GetUniverseRoots() map[string]*UniverseRoot {
	if x != nil {
		return x.UniverseRoots
	}
	return nil
}

type AssetRootQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID value to uniquely identify a Universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetRootQuery) Reset() {
	*x = AssetRootQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootQuery) ProtoMessage() {}

func (x *AssetRootQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootQuery.ProtoReflect.Descriptor instead.
func (*AssetRootQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{7}
}

func (x *AssetRootQuery) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueryRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issuance universe root for the given asset ID or group key.
	IssuanceRoot *UniverseRoot `protobuf:"bytes,1,opt,name=issuance_root,json=issuanceRoot,proto3" json:"issuance_root,omitempty"`
	// The transfer universe root for the given asset ID or group key.
	TransferRoot *UniverseRoot `protobuf:"bytes,2,opt,name=transfer_root,json=transferRoot,proto3" json:"transfer_root,omitempty"`
}

func (x *QueryRootResponse) Reset() {
	*x = QueryRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRootResponse) ProtoMessage() {}

func (x *QueryRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRootResponse.ProtoReflect.Descriptor instead.
func (*QueryRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{8}
}

func (x *QueryRootResponse) GetIssuanceRoot() *UniverseRoot {
	if x != nil {
		return x.IssuanceRoot
	}
	return nil
}

func (x *QueryRootResponse) GetTransferRoot() *UniverseRoot {
	if x != nil {
		return x.TransferRoot
	}
	return nil
}

type DeleteRootQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID value to uniquely identify a Universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRootQuery) Reset() {
	*x = DeleteRootQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRootQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRootQuery) ProtoMessage() {}

func (x *DeleteRootQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRootQuery.ProtoReflect.Descriptor instead.
func (*DeleteRootQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRootQuery) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRootResponse) Reset() {
	*x = DeleteRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRootResponse) ProtoMessage() {}

func (x *DeleteRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRootResponse.ProtoReflect.Descriptor instead.
func (*DeleteRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{10}
}

type Outpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output as a hex encoded (and reversed!) string.
	HashStr string `protobuf:"bytes,1,opt,name=hash_str,json=hashStr,proto3" json:"hash_str,omitempty"`
	// The index of the output.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{11}
}

func (x *Outpoint) GetHashStr() string {
	if x != nil {
		return x.HashStr
	}
	return ""
}

func (x *Outpoint) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AssetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the asset key, either as a single hex encoded string, or
	// an unrolled outpoint.
	//
	// Types that are assignable to Outpoint:
	//
	//	*AssetKey_OpStr
	//	*AssetKey_Op
	Outpoint isAssetKey_Outpoint `protobuf_oneof:"outpoint"`
	// The script key of the asset.
	//
	// Types that are assignable to ScriptKey:
	//
	//	*AssetKey_ScriptKeyBytes
	//	*AssetKey_ScriptKeyStr
	ScriptKey isAssetKey_ScriptKey `protobuf_oneof:"script_key"`
}

func (x *AssetKey) Reset() {
	*x = AssetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetKey) ProtoMessage() {}

func (x *AssetKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetKey.ProtoReflect.Descriptor instead.
func (*AssetKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{12}
}

func (m *AssetKey) GetOutpoint() isAssetKey_Outpoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (x *AssetKey) GetOpStr() string {
	if x, ok := x.GetOutpoint().(*AssetKey_OpStr); ok {
		return x.OpStr
	}
	return ""
}

func (x *AssetKey) GetOp() *Outpoint {
	if x, ok := x.GetOutpoint().(*AssetKey_Op); ok {
		return x.Op
	}
	return nil
}

func (m *AssetKey) GetScriptKey() isAssetKey_ScriptKey {
	if m != nil {
		return m.ScriptKey
	}
	return nil
}

func (x *AssetKey) GetScriptKeyBytes() []byte {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyBytes); ok {
		return x.ScriptKeyBytes
	}
	return nil
}

func (x *AssetKey) GetScriptKeyStr() string {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyStr); ok {
		return x.ScriptKeyStr
	}
	return ""
}

type isAssetKey_Outpoint interface {
	isAssetKey_Outpoint()
}

type AssetKey_OpStr struct {
	OpStr string `protobuf:"bytes,1,opt,name=op_str,json=opStr,proto3,oneof"`
}

type AssetKey_Op struct {
	Op *Outpoint `protobuf:"bytes,2,opt,name=op,proto3,oneof"`
}

func (*AssetKey_OpStr) isAssetKey_Outpoint() {}

func (*AssetKey_Op) isAssetKey_Outpoint() {}

type isAssetKey_ScriptKey interface {
	isAssetKey_ScriptKey()
}

type AssetKey_ScriptKeyBytes struct {
	ScriptKeyBytes []byte `protobuf:"bytes,3,opt,name=script_key_bytes,json=scriptKeyBytes,proto3,oneof"`
}

type AssetKey_ScriptKeyStr struct {
	ScriptKeyStr string `protobuf:"bytes,4,opt,name=script_key_str,json=scriptKeyStr,proto3,oneof"`
}

func (*AssetKey_ScriptKeyBytes) isAssetKey_ScriptKey() {}

func (*AssetKey_ScriptKeyStr) isAssetKey_ScriptKey() {}

type AssetLeafKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to query for.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The offset for the page.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The length limit for the page.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The direction of the page.
	Direction SortDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=universerpc.SortDirection" json:"direction,omitempty"`
}

func (x *AssetLeafKeysRequest) Reset() {
	*x = AssetLeafKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafKeysRequest) ProtoMessage() {}

func (x *AssetLeafKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafKeysRequest.ProtoReflect.Descriptor instead.
func (*AssetLeafKeysRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{13}
}

func (x *AssetLeafKeysRequest) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetLeafKeysRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AssetLeafKeysRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AssetLeafKeysRequest) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_ASC
}

type AssetLeafKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaf keys for the given asset ID or group key.
	AssetKeys []*AssetKey `protobuf:"bytes,1,rep,name=asset_keys,json=assetKeys,proto3" json:"asset_keys,omitempty"`
}

func (x *AssetLeafKeyResponse) Reset() {
	*x = AssetLeafKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafKeyResponse) ProtoMessage() {}

func (x *AssetLeafKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafKeyResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafKeyResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{14}
}

func (x *AssetLeafKeyResponse) GetAssetKeys() []*AssetKey {
	if x != nil {
		return x.AssetKeys
	}
	return nil
}

type AssetLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset included in the leaf.
	Asset *taprpc.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The asset issuance or transfer proof, which proves that the asset
	// specified above was issued or transferred properly. This is always just
	// an individual mint/transfer proof and never a proof file.
	Proof []byte `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *AssetLeaf) Reset() {
	*x = AssetLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeaf) ProtoMessage() {}

func (x *AssetLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeaf.ProtoReflect.Descriptor instead.
func (*AssetLeaf) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{15}
}

func (x *AssetLeaf) GetAsset() *taprpc.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AssetLeaf) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type AssetLeafResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaves for the given asset ID or group key.
	Leaves []*AssetLeaf `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *AssetLeafResponse) Reset() {
	*x = AssetLeafResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafResponse) ProtoMessage() {}

func (x *AssetLeafResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{16}
}

func (x *AssetLeafResponse) GetLeaves() []*AssetLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type UniverseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to query for.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The asset key to query for.
	LeafKey *AssetKey `protobuf:"bytes,2,opt,name=leaf_key,json=leafKey,proto3" json:"leaf_key,omitempty"`
}

func (x *UniverseKey) Reset() {
	*x = UniverseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseKey) ProtoMessage() {}

func (x *UniverseKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseKey.ProtoReflect.Descriptor instead.
func (*UniverseKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{17}
}

func (x *UniverseKey) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseKey) GetLeafKey() *AssetKey {
	if x != nil {
		return x.LeafKey
	}
	return nil
}

type AssetProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original request for the issuance proof.
	Req *UniverseKey `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	// The Universe root that includes this asset leaf.
	UniverseRoot *UniverseRoot `protobuf:"bytes,2,opt,name=universe_root,json=universeRoot,proto3" json:"universe_root,omitempty"`
	// An inclusion proof for the asset leaf included below. The value is that
	// issuance proof itself, with a sum value of the amount of the asset.
	UniverseInclusionProof []byte `protobuf:"bytes,3,opt,name=universe_inclusion_proof,json=universeInclusionProof,proto3" json:"universe_inclusion_proof,omitempty"`
	// The asset leaf itself, which includes the asset and the issuance proof.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
	// MultiverseRoot is the root of the multiverse tree that includes this
	// asset leaf.
	MultiverseRoot *MerkleSumNode `protobuf:"bytes,5,opt,name=multiverse_root,json=multiverseRoot,proto3" json:"multiverse_root,omitempty"`
	// MultiverseInclusionProof is the inclusion proof for the asset leaf in the
	// multiverse.
	MultiverseInclusionProof []byte `protobuf:"bytes,6,opt,name=multiverse_inclusion_proof,json=multiverseInclusionProof,proto3" json:"multiverse_inclusion_proof,omitempty"`
	// The issuance related data for an issuance asset leaf. This is empty for
	// any other type of asset leaf.
	IssuanceData *IssuanceData `protobuf:"bytes,7,opt,name=issuance_data,json=issuanceData,proto3" json:"issuance_data,omitempty"`
}

func (x *AssetProofResponse) Reset() {
	*x = AssetProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetProofResponse) ProtoMessage() {}

func (x *AssetProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetProofResponse.ProtoReflect.Descriptor instead.
func (*AssetProofResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{18}
}

func (x *AssetProofResponse) GetReq() *UniverseKey {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *AssetProofResponse) GetUniverseRoot() *UniverseRoot {
	if x != nil {
		return x.UniverseRoot
	}
	return nil
}

func (x *AssetProofResponse) GetUniverseInclusionProof() []byte {
	if x != nil {
		return x.UniverseInclusionProof
	}
	return nil
}

func (x *AssetProofResponse) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

func (x *AssetProofResponse) GetMultiverseRoot() *MerkleSumNode {
	if x != nil {
		return x.MultiverseRoot
	}
	return nil
}

func (x *AssetProofResponse) GetMultiverseInclusionProof() []byte {
	if x != nil {
		return x.MultiverseInclusionProof
	}
	return nil
}

func (x *AssetProofResponse) GetIssuanceData() *IssuanceData {
	if x != nil {
		return x.IssuanceData
	}
	return nil
}

type IssuanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reveal meta data associated with the proof, if available.
	MetaReveal *taprpc.AssetMeta `protobuf:"bytes,1,opt,name=meta_reveal,json=metaReveal,proto3" json:"meta_reveal,omitempty"`
	// GenesisReveal is an optional field that is the Genesis information for
	// the asset. This is required for minting proofs.
	GenesisReveal *taprpc.GenesisReveal `protobuf:"bytes,2,opt,name=genesis_reveal,json=genesisReveal,proto3" json:"genesis_reveal,omitempty"`
	// GroupKeyReveal is an optional field that includes the information needed
	// to derive the tweaked group key.
	GroupKeyReveal *taprpc.GroupKeyReveal `protobuf:"bytes,3,opt,name=group_key_reveal,json=groupKeyReveal,proto3" json:"group_key_reveal,omitempty"`
}

func (x *IssuanceData) Reset() {
	*x = IssuanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceData) ProtoMessage() {}

func (x *IssuanceData) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceData.ProtoReflect.Descriptor instead.
func (*IssuanceData) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{19}
}

func (x *IssuanceData) GetMetaReveal() *taprpc.AssetMeta {
	if x != nil {
		return x.MetaReveal
	}
	return nil
}

func (x *IssuanceData) GetGenesisReveal() *taprpc.GenesisReveal {
	if x != nil {
		return x.GenesisReveal
	}
	return nil
}

func (x *IssuanceData) GetGroupKeyReveal() *taprpc.GroupKeyReveal {
	if x != nil {
		return x.GroupKeyReveal
	}
	return nil
}

type AssetProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to insert the proof for.
	Key *UniverseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The asset leaf to insert into the Universe tree.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
}

func (x *AssetProof) Reset() {
	*x = AssetProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetProof) ProtoMessage() {}

func (x *AssetProof) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetProof.ProtoReflect.Descriptor instead.
func (*AssetProof) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{20}
}

func (x *AssetProof) GetKey() *UniverseKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssetProof) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

type PushProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to push the proof for.
	Key *UniverseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The universe server to push the proof to.
	Server *UniverseFederationServer `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *PushProofRequest) Reset() {
	*x = PushProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushProofRequest) ProtoMessage() {}

func (x *PushProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushProofRequest.ProtoReflect.Descriptor instead.
func (*PushProofRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{21}
}

func (x *PushProofRequest) GetKey() *UniverseKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PushProofRequest) GetServer() *UniverseFederationServer {
	if x != nil {
		return x.Server
	}
	return nil
}

type PushProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset a push was requested for.
	Key *UniverseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PushProofResponse) Reset() {
	*x = PushProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushProofResponse) ProtoMessage() {}

func (x *PushProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushProofResponse.ProtoReflect.Descriptor instead.
func (*PushProofResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{22}
}

func (x *PushProofResponse) GetKey() *UniverseKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{23}
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pseudo-random runtime ID for the current instance of the Universe
	// server, changes with each restart. Mainly used to identify identical
	// servers when they are exposed under different hostnames/ports.
	RuntimeId int64 `protobuf:"varint,1,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{24}
}

func (x *InfoResponse) GetRuntimeId() int64 {
	if x != nil {
		return x.RuntimeId
	}
	return 0
}

type SyncTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to sync.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SyncTarget) Reset() {
	*x = SyncTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTarget) ProtoMessage() {}

func (x *SyncTarget) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTarget.ProtoReflect.Descriptor instead.
func (*SyncTarget) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{25}
}

func (x *SyncTarget) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(roasbeef): accept connection type? so can pass along self-signed
	// cert, also brontide based RPC handshake
	UniverseHost string `protobuf:"bytes,1,opt,name=universe_host,json=universeHost,proto3" json:"universe_host,omitempty"`
	// The sync mode. This determines what type of proofs are synced.
	SyncMode UniverseSyncMode `protobuf:"varint,2,opt,name=sync_mode,json=syncMode,proto3,enum=universerpc.UniverseSyncMode" json:"sync_mode,omitempty"`
	// The set of assets to sync. If none are specified, then all assets are
	// synced.
	SyncTargets []*SyncTarget `protobuf:"bytes,3,rep,name=sync_targets,json=syncTargets,proto3" json:"sync_targets,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{26}
}

func (x *SyncRequest) GetUniverseHost() string {
	if x != nil {
		return x.UniverseHost
	}
	return ""
}

func (x *SyncRequest) GetSyncMode() UniverseSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return UniverseSyncMode_SYNC_ISSUANCE_ONLY
}

func (x *SyncRequest) GetSyncTargets() []*SyncTarget {
	if x != nil {
		return x.SyncTargets
	}
	return nil
}

type SyncedUniverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old Universe root for the synced asset.
	OldAssetRoot *UniverseRoot `protobuf:"bytes,1,opt,name=old_asset_root,json=oldAssetRoot,proto3" json:"old_asset_root,omitempty"`
	// The new Universe root for the synced asset.
	NewAssetRoot *UniverseRoot `protobuf:"bytes,2,opt,name=new_asset_root,json=newAssetRoot,proto3" json:"new_asset_root,omitempty"`
	// The set of new asset leaves that were synced.
	NewAssetLeaves []*AssetLeaf `protobuf:"bytes,3,rep,name=new_asset_leaves,json=newAssetLeaves,proto3" json:"new_asset_leaves,omitempty"`
}

func (x *SyncedUniverse) Reset() {
	*x = SyncedUniverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncedUniverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncedUniverse) ProtoMessage() {}

func (x *SyncedUniverse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncedUniverse.ProtoReflect.Descriptor instead.
func (*SyncedUniverse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{27}
}

func (x *SyncedUniverse) GetOldAssetRoot() *UniverseRoot {
	if x != nil {
		return x.OldAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetRoot() *UniverseRoot {
	if x != nil {
		return x.NewAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetLeaves() []*AssetLeaf {
	if x != nil {
		return x.NewAssetLeaves
	}
	return nil
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{28}
}

type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of synced asset Universes.
	SyncedUniverses []*SyncedUniverse `protobuf:"bytes,1,rep,name=synced_universes,json=syncedUniverses,proto3" json:"synced_universes,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{29}
}

func (x *SyncResponse) GetSyncedUniverses() []*SyncedUniverse {
	if x != nil {
		return x.SyncedUniverses
	}
	return nil
}

type UniverseFederationServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host of the federation server, which is used to connect to the
	// server to push proofs and sync new proofs.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The numeric ID of the federation server. This is used to identify
	// existing servers when adding or deleting them from the federation.
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UniverseFederationServer) Reset() {
	*x = UniverseFederationServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseFederationServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseFederationServer) ProtoMessage() {}

func (x *UniverseFederationServer) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseFederationServer.ProtoReflect.Descriptor instead.
func (*UniverseFederationServer) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{30}
}

func (x *UniverseFederationServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UniverseFederationServer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListFederationServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFederationServersRequest) Reset() {
	*x = ListFederationServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationServersRequest) ProtoMessage() {}

func (x *ListFederationServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationServersRequest.ProtoReflect.Descriptor instead.
func (*ListFederationServersRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{31}
}

type ListFederationServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of federation servers that make up the local Universe
	// federation.
	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListFederationServersResponse) Reset() {
	*x = ListFederationServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationServersResponse) ProtoMessage() {}

func (x *ListFederationServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationServersResponse.ProtoReflect.Descriptor instead.
func (*ListFederationServersResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{32}
}

func (x *ListFederationServersResponse) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type AddFederationServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The federation server to add to the local Universe federation.
	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *AddFederationServerRequest) Reset() {
	*x = AddFederationServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederationServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederationServerRequest) ProtoMessage() {}

func (x *AddFederationServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederationServerRequest.ProtoReflect.Descriptor instead.
func (*AddFederationServerRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{33}
}

func (x *AddFederationServerRequest) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type AddFederationServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFederationServerResponse) Reset() {
	*x = AddFederationServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederationServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederationServerResponse) ProtoMessage() {}

func (x *AddFederationServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederationServerResponse.ProtoReflect.Descriptor instead.
func (*AddFederationServerResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{34}
}

type DeleteFederationServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The federation server to delete from the local Universe federation.
	Servers []*UniverseFederationServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *DeleteFederationServerRequest) Reset() {
	*x = DeleteFederationServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationServerRequest) ProtoMessage() {}

func (x *DeleteFederationServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteFederationServerRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteFederationServerRequest) GetServers() []*UniverseFederationServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type DeleteFederationServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFederationServerResponse) Reset() {
	*x = DeleteFederationServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationServerResponse) ProtoMessage() {}

func (x *DeleteFederationServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteFederationServerResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{36}
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTotalAssets int64 `protobuf:"varint,1,opt,name=num_total_assets,json=numTotalAssets,proto3" json:"num_total_assets,omitempty"`
	NumTotalGroups int64 `protobuf:"varint,2,opt,name=num_total_groups,json=numTotalGroups,proto3" json:"num_total_groups,omitempty"`
	NumTotalSyncs  int64 `protobuf:"varint,3,opt,name=num_total_syncs,json=numTotalSyncs,proto3" json:"num_total_syncs,omitempty"`
	NumTotalProofs int64 `protobuf:"varint,4,opt,name=num_total_proofs,json=numTotalProofs,proto3" json:"num_total_proofs,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{37}
}

func (x *StatsResponse) GetNumTotalAssets() int64 {
	if x != nil {
		return x.NumTotalAssets
	}
	return 0
}

func (x *StatsResponse) GetNumTotalGroups() int64 {
	if x != nil {
		return x.NumTotalGroups
	}
	return 0
}

func (x *StatsResponse) GetNumTotalSyncs() int64 {
	if x != nil {
		return x.NumTotalSyncs
	}
	return 0
}

func (x *StatsResponse) GetNumTotalProofs() int64 {
	if x != nil {
		return x.NumTotalProofs
	}
	return 0
}

type AssetStatsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset name filter. If this is empty, then all assets are returned.
	AssetNameFilter string `protobuf:"bytes,1,opt,name=asset_name_filter,json=assetNameFilter,proto3" json:"asset_name_filter,omitempty"`
	// The asset ID filter. If this is empty, then all assets are returned.
	AssetIdFilter []byte `protobuf:"bytes,2,opt,name=asset_id_filter,json=assetIdFilter,proto3" json:"asset_id_filter,omitempty"`
	// The asset type filter. If this is set to FILTER_ASSET_NONE, then all
	// assets are returned. If set to FILTER_ASSET_NORMAL, then only normal
	// assets are returned. If set to FILTER_ASSET_COLLECTIBLE, then only
	// collectible assets are returned.
	AssetTypeFilter AssetTypeFilter `protobuf:"varint,3,opt,name=asset_type_filter,json=assetTypeFilter,proto3,enum=universerpc.AssetTypeFilter" json:"asset_type_filter,omitempty"`
	// The sort order for the query. If this is set to SORT_BY_NONE, then the
	// results are not sorted.
	SortBy AssetQuerySort `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=universerpc.AssetQuerySort" json:"sort_by,omitempty"`
	// The offset for the page. This is used for pagination.
	Offset int32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// The length limit for the page. This is used for pagination.
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// The direction of the sort. If this is set to SORT_DIRECTION_ASC, then
	// the results are sorted in ascending order. If set to
	// SORT_DIRECTION_DESC, then the results are sorted in descending order.
	Direction SortDirection `protobuf:"varint,7,opt,name=direction,proto3,enum=universerpc.SortDirection" json:"direction,omitempty"`
}

func (x *AssetStatsQuery) Reset() {
	*x = AssetStatsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStatsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStatsQuery) ProtoMessage() {}

func (x *AssetStatsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStatsQuery.ProtoReflect.Descriptor instead.
func (*AssetStatsQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{38}
}

func (x *AssetStatsQuery) GetAssetNameFilter() string {
	if x != nil {
		return x.AssetNameFilter
	}
	return ""
}

func (x *AssetStatsQuery) GetAssetIdFilter() []byte {
	if x != nil {
		return x.AssetIdFilter
	}
	return nil
}

func (x *AssetStatsQuery) GetAssetTypeFilter() AssetTypeFilter {
	if x != nil {
		return x.AssetTypeFilter
	}
	return AssetTypeFilter_FILTER_ASSET_NONE
}

func (x *AssetStatsQuery) GetSortBy() AssetQuerySort {
	if x != nil {
		return x.SortBy
	}
	return AssetQuerySort_SORT_BY_NONE
}

func (x *AssetStatsQuery) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AssetStatsQuery) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AssetStatsQuery) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_ASC
}

type AssetStatsSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group key of the asset group. If this is empty, then the asset is
	// not part of a group.
	GroupKey []byte `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The total supply of the asset group. If the asset is not part of an asset
	// group then this is always zero.
	GroupSupply int64 `protobuf:"varint,2,opt,name=group_supply,json=groupSupply,proto3" json:"group_supply,omitempty"`
	// The group anchor that was used to group assets together into an asset
	// group. This is only set if the asset is part of an asset group.
	GroupAnchor *AssetStatsAsset `protobuf:"bytes,3,opt,name=group_anchor,json=groupAnchor,proto3" json:"group_anchor,omitempty"`
	// If the asset is not part of an asset group, then this is the asset the
	// stats below refer to.
	Asset *AssetStatsAsset `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The total number of syncs either for the asset group or the single asset
	// if it is not part of a group.
	TotalSyncs int64 `protobuf:"varint,5,opt,name=total_syncs,json=totalSyncs,proto3" json:"total_syncs,omitempty"`
	// The total number of proofs either for the asset group or the single asset
	// if it is not part of a group.
	TotalProofs int64 `protobuf:"varint,6,opt,name=total_proofs,json=totalProofs,proto3" json:"total_proofs,omitempty"`
}

func (x *AssetStatsSnapshot) Reset() {
	*x = AssetStatsSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStatsSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStatsSnapshot) ProtoMessage() {}

func (x *AssetStatsSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStatsSnapshot.ProtoReflect.Descriptor instead.
func (*AssetStatsSnapshot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{39}
}

func (x *AssetStatsSnapshot) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *AssetStatsSnapshot) GetGroupSupply() int64 {
	if x != nil {
		return x.GroupSupply
	}
	return 0
}

func (x *AssetStatsSnapshot) GetGroupAnchor() *AssetStatsAsset {
	if x != nil {
		return x.GroupAnchor
	}
	return nil
}

func (x *AssetStatsSnapshot) GetAsset() *AssetStatsAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AssetStatsSnapshot) GetTotalSyncs() int64 {
	if x != nil {
		return x.TotalSyncs
	}
	return 0
}

func (x *AssetStatsSnapshot) GetTotalProofs() int64 {
	if x != nil {
		return x.TotalProofs
	}
	return 0
}

type AssetStatsAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The asset's genesis point, which is the outpoint of the genesis
	// transaction that created the asset. This is a hex encoded string.
	GenesisPoint string `protobuf:"bytes,2,opt,name=genesis_point,json=genesisPoint,proto3" json:"genesis_point,omitempty"`
	// The total supply of the asset. This is the total number of units of the
	// asset that have been issued.
	TotalSupply int64 `protobuf:"varint,3,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	// The human-readable name of the asset.
	AssetName string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// The type of the asset. This can be either a normal asset or a collectible
	// asset.
	AssetType taprpc.AssetType `protobuf:"varint,5,opt,name=asset_type,json=assetType,proto3,enum=taprpc.AssetType" json:"asset_type,omitempty"`
	// The height of the block at which the asset was created.
	GenesisHeight int32 `protobuf:"varint,6,opt,name=genesis_height,json=genesisHeight,proto3" json:"genesis_height,omitempty"`
	// The timestamp of the block at which the asset was created, in Unix epoch
	// time (seconds).
	GenesisTimestamp int64 `protobuf:"varint,7,opt,name=genesis_timestamp,json=genesisTimestamp,proto3" json:"genesis_timestamp,omitempty"`
	// The anchor point of the asset, which is a human-readable string that
	// represents the asset's anchor point in the blockchain.
	AnchorPoint string `protobuf:"bytes,8,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	// The decimal display value for the asset. This is the number of decimal
	// places that the asset can be divided into.
	DecimalDisplay uint32 `protobuf:"varint,9,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
}

func (x *AssetStatsAsset) Reset() {
	*x = AssetStatsAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStatsAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStatsAsset) ProtoMessage() {}

func (x *AssetStatsAsset) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStatsAsset.ProtoReflect.Descriptor instead.
func (*AssetStatsAsset) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{40}
}

func (x *AssetStatsAsset) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetStatsAsset) GetGenesisPoint() string {
	if x != nil {
		return x.GenesisPoint
	}
	return ""
}

func (x *AssetStatsAsset) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *AssetStatsAsset) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AssetStatsAsset) GetAssetType() taprpc.AssetType {
	if x != nil {
		return x.AssetType
	}
	return taprpc.AssetType(0)
}

func (x *AssetStatsAsset) GetGenesisHeight() int32 {
	if x != nil {
		return x.GenesisHeight
	}
	return 0
}

func (x *AssetStatsAsset) GetGenesisTimestamp() int64 {
	if x != nil {
		return x.GenesisTimestamp
	}
	return 0
}

func (x *AssetStatsAsset) GetAnchorPoint() string {
	if x != nil {
		return x.AnchorPoint
	}
	return ""
}

func (x *AssetStatsAsset) GetDecimalDisplay() uint32 {
	if x != nil {
		return x.DecimalDisplay
	}
	return 0
}

type UniverseAssetStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset statistics snapshot for the queried assets.
	AssetStats []*AssetStatsSnapshot `protobuf:"bytes,1,rep,name=asset_stats,json=assetStats,proto3" json:"asset_stats,omitempty"`
}

func (x *UniverseAssetStats) Reset() {
	*x = UniverseAssetStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseAssetStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseAssetStats) ProtoMessage() {}

func (x *UniverseAssetStats) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseAssetStats.ProtoReflect.Descriptor instead.
func (*UniverseAssetStats) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{41}
}

func (x *UniverseAssetStats) GetAssetStats() []*AssetStatsSnapshot {
	if x != nil {
		return x.AssetStats
	}
	return nil
}

type QueryEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start timestamp for the query, in Unix epoch time (seconds).
	StartTimestamp int64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The end timestamp for the query, in Unix epoch time (seconds).
	EndTimestamp int64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *QueryEventsRequest) Reset() {
	*x = QueryEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsRequest) ProtoMessage() {}

func (x *QueryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsRequest.ProtoReflect.Descriptor instead.
func (*QueryEventsRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{42}
}

func (x *QueryEventsRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *QueryEventsRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type QueryEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of grouped universe events that occurred within the specified
	// time range. Each entry in the list represents a day, with the number of
	// sync and new proof events that occurred on that day.
	Events []*GroupedUniverseEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *QueryEventsResponse) Reset() {
	*x = QueryEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsResponse) ProtoMessage() {}

func (x *QueryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsResponse.ProtoReflect.Descriptor instead.
func (*QueryEventsResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{43}
}

func (x *QueryEventsResponse) GetEvents() []*GroupedUniverseEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

type GroupedUniverseEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the events occurred on, formatted as YYYY-MM-DD.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// The number of sync events that occurred on this date.
	SyncEvents uint64 `protobuf:"varint,2,opt,name=sync_events,json=syncEvents,proto3" json:"sync_events,omitempty"`
	// The number of new proof events that occurred on this date.
	NewProofEvents uint64 `protobuf:"varint,3,opt,name=new_proof_events,json=newProofEvents,proto3" json:"new_proof_events,omitempty"`
}

func (x *GroupedUniverseEvents) Reset() {
	*x = GroupedUniverseEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedUniverseEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedUniverseEvents) ProtoMessage() {}

func (x *GroupedUniverseEvents) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedUniverseEvents.ProtoReflect.Descriptor instead.
func (*GroupedUniverseEvents) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{44}
}

func (x *GroupedUniverseEvents) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GroupedUniverseEvents) GetSyncEvents() uint64 {
	if x != nil {
		return x.SyncEvents
	}
	return 0
}

func (x *GroupedUniverseEvents) GetNewProofEvents() uint64 {
	if x != nil {
		return x.NewProofEvents
	}
	return 0
}

type SetFederationSyncConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global federation sync configs for the given proof types.
	GlobalSyncConfigs []*GlobalFederationSyncConfig `protobuf:"bytes,1,rep,name=global_sync_configs,json=globalSyncConfigs,proto3" json:"global_sync_configs,omitempty"`
	// The asset federation sync configs for the given universe IDs.
	AssetSyncConfigs []*AssetFederationSyncConfig `protobuf:"bytes,2,rep,name=asset_sync_configs,json=assetSyncConfigs,proto3" json:"asset_sync_configs,omitempty"`
}

func (x *SetFederationSyncConfigRequest) Reset() {
	*x = SetFederationSyncConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFederationSyncConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFederationSyncConfigRequest) ProtoMessage() {}

func (x *SetFederationSyncConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFederationSyncConfigRequest.ProtoReflect.Descriptor instead.
func (*SetFederationSyncConfigRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{45}
}

func (x *SetFederationSyncConfigRequest) GetGlobalSyncConfigs() []*GlobalFederationSyncConfig {
	if x != nil {
		return x.GlobalSyncConfigs
	}
	return nil
}

func (x *SetFederationSyncConfigRequest) GetAssetSyncConfigs() []*AssetFederationSyncConfig {
	if x != nil {
		return x.AssetSyncConfigs
	}
	return nil
}

type SetFederationSyncConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFederationSyncConfigResponse) Reset() {
	*x = SetFederationSyncConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFederationSyncConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFederationSyncConfigResponse) ProtoMessage() {}

func (x *SetFederationSyncConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFederationSyncConfigResponse.ProtoReflect.Descriptor instead.
func (*SetFederationSyncConfigResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{46}
}

// GlobalFederationSyncConfig is a global proof type specific configuration
// for universe federation syncing.
type GlobalFederationSyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proof_type is the universe proof type which this config applies to.
	ProofType ProofType `protobuf:"varint,1,opt,name=proof_type,json=proofType,proto3,enum=universerpc.ProofType" json:"proof_type,omitempty"`
	// allow_sync_insert is a boolean that indicates whether leaves from
	// universes of the given proof type have may be inserted via federation
	// sync.
	AllowSyncInsert bool `protobuf:"varint,2,opt,name=allow_sync_insert,json=allowSyncInsert,proto3" json:"allow_sync_insert,omitempty"`
	// allow_sync_export is a boolean that indicates whether leaves from
	// universes of the given proof type have may be exported via federation
	// sync.
	AllowSyncExport bool `protobuf:"varint,3,opt,name=allow_sync_export,json=allowSyncExport,proto3" json:"allow_sync_export,omitempty"`
}

func (x *GlobalFederationSyncConfig) Reset() {
	*x = GlobalFederationSyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalFederationSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalFederationSyncConfig) ProtoMessage() {}

func (x *GlobalFederationSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalFederationSyncConfig.ProtoReflect.Descriptor instead.
func (*GlobalFederationSyncConfig) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{47}
}

func (x *GlobalFederationSyncConfig) GetProofType() ProofType {
	if x != nil {
		return x.ProofType
	}
	return ProofType_PROOF_TYPE_UNSPECIFIED
}

func (x *GlobalFederationSyncConfig) GetAllowSyncInsert() bool {
	if x != nil {
		return x.AllowSyncInsert
	}
	return false
}

func (x *GlobalFederationSyncConfig) GetAllowSyncExport() bool {
	if x != nil {
		return x.AllowSyncExport
	}
	return false
}

// AssetFederationSyncConfig is an asset universe specific configuration for
// federation syncing.
type AssetFederationSyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the universe to configure.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// allow_sync_insert is a boolean that indicates whether leaves from
	// universes of the given proof type have may be inserted via federation
	// sync.
	AllowSyncInsert bool `protobuf:"varint,2,opt,name=allow_sync_insert,json=allowSyncInsert,proto3" json:"allow_sync_insert,omitempty"`
	// allow_sync_export is a boolean that indicates whether leaves from
	// universes of the given proof type have may be exported via federation
	// sync.
	AllowSyncExport bool `protobuf:"varint,3,opt,name=allow_sync_export,json=allowSyncExport,proto3" json:"allow_sync_export,omitempty"`
}

func (x *AssetFederationSyncConfig) Reset() {
	*x = AssetFederationSyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetFederationSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetFederationSyncConfig) ProtoMessage() {}

func (x *AssetFederationSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetFederationSyncConfig.ProtoReflect.Descriptor instead.
func (*AssetFederationSyncConfig) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{48}
}

func (x *AssetFederationSyncConfig) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssetFederationSyncConfig) GetAllowSyncInsert() bool {
	if x != nil {
		return x.AllowSyncInsert
	}
	return false
}

func (x *AssetFederationSyncConfig) GetAllowSyncExport() bool {
	if x != nil {
		return x.AllowSyncExport
	}
	return false
}

type QueryFederationSyncConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target universe ID(s).
	Id []*ID `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryFederationSyncConfigRequest) Reset() {
	*x = QueryFederationSyncConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFederationSyncConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFederationSyncConfigRequest) ProtoMessage() {}

func (x *QueryFederationSyncConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFederationSyncConfigRequest.ProtoReflect.Descriptor instead.
func (*QueryFederationSyncConfigRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{49}
}

func (x *QueryFederationSyncConfigRequest) GetId() []*ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueryFederationSyncConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global federation sync configs for the given proof types.
	GlobalSyncConfigs []*GlobalFederationSyncConfig `protobuf:"bytes,1,rep,name=global_sync_configs,json=globalSyncConfigs,proto3" json:"global_sync_configs,omitempty"`
	// The asset federation sync configs for the given universe IDs.
	AssetSyncConfigs []*AssetFederationSyncConfig `protobuf:"bytes,2,rep,name=asset_sync_configs,json=assetSyncConfigs,proto3" json:"asset_sync_configs,omitempty"`
}

func (x *QueryFederationSyncConfigResponse) Reset() {
	*x = QueryFederationSyncConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFederationSyncConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFederationSyncConfigResponse) ProtoMessage() {}

func (x *QueryFederationSyncConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFederationSyncConfigResponse.ProtoReflect.Descriptor instead.
func (*QueryFederationSyncConfigResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{50}
}

func (x *QueryFederationSyncConfigResponse) GetGlobalSyncConfigs() []*GlobalFederationSyncConfig {
	if x != nil {
		return x.GlobalSyncConfigs
	}
	return nil
}

func (x *QueryFederationSyncConfigResponse) GetAssetSyncConfigs() []*AssetFederationSyncConfig {
	if x != nil {
		return x.AssetSyncConfigs
	}
	return nil
}

type IgnoreAssetOutPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the asset to ignore.
	AssetOutPoint *taprpc.AssetOutPoint `protobuf:"bytes,1,opt,name=asset_out_point,json=assetOutPoint,proto3" json:"asset_out_point,omitempty"`
	// The amount of asset units at the associated asset outpoint.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *IgnoreAssetOutPointRequest) Reset() {
	*x = IgnoreAssetOutPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoreAssetOutPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoreAssetOutPointRequest) ProtoMessage() {}

func (x *IgnoreAssetOutPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoreAssetOutPointRequest.ProtoReflect.Descriptor instead.
func (*IgnoreAssetOutPointRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{51}
}

func (x *IgnoreAssetOutPointRequest) GetAssetOutPoint() *taprpc.AssetOutPoint {
	if x != nil {
		return x.AssetOutPoint
	}
	return nil
}

func (x *IgnoreAssetOutPointRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type IgnoreAssetOutPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key identifying the signed ignore outpoint leaf in the ignore supply
	// commitment subtree.
	LeafKey []byte `protobuf:"bytes,1,opt,name=leaf_key,json=leafKey,proto3" json:"leaf_key,omitempty"`
	// The signed ignore outpoint leaf in the ignore supply commitment tree.
	Leaf *MerkleSumNode `protobuf:"bytes,2,opt,name=leaf,proto3" json:"leaf,omitempty"`
}

func (x *IgnoreAssetOutPointResponse) Reset() {
	*x = IgnoreAssetOutPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoreAssetOutPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoreAssetOutPointResponse) ProtoMessage() {}

func (x *IgnoreAssetOutPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoreAssetOutPointResponse.ProtoReflect.Descriptor instead.
func (*IgnoreAssetOutPointResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{52}
}

func (x *IgnoreAssetOutPointResponse) GetLeafKey() []byte {
	if x != nil {
		return x.LeafKey
	}
	return nil
}

func (x *IgnoreAssetOutPointResponse) GetLeaf() *MerkleSumNode {
	if x != nil {
		return x.Leaf
	}
	return nil
}

type UpdateSupplyCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the target asset group whose supply commitment
	// is being updated.
	//
	// Types that are assignable to GroupKey:
	//
	//	*UpdateSupplyCommitRequest_GroupKeyBytes
	//	*UpdateSupplyCommitRequest_GroupKeyStr
	GroupKey isUpdateSupplyCommitRequest_GroupKey `protobuf_oneof:"group_key"`
}

func (x *UpdateSupplyCommitRequest) Reset() {
	*x = UpdateSupplyCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSupplyCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSupplyCommitRequest) ProtoMessage() {}

func (x *UpdateSupplyCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSupplyCommitRequest.ProtoReflect.Descriptor instead.
func (*UpdateSupplyCommitRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{53}
}

func (m *UpdateSupplyCommitRequest) GetGroupKey() isUpdateSupplyCommitRequest_GroupKey {
	if m != nil {
		return m.GroupKey
	}
	return nil
}

func (x *UpdateSupplyCommitRequest) GetGroupKeyBytes() []byte {
	if x, ok := x.GetGroupKey().(*UpdateSupplyCommitRequest_GroupKeyBytes); ok {
		return x.GroupKeyBytes
	}
	return nil
}

func (x *UpdateSupplyCommitRequest) GetGroupKeyStr() string {
	if x, ok := x.GetGroupKey().(*UpdateSupplyCommitRequest_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isUpdateSupplyCommitRequest_GroupKey interface {
	isUpdateSupplyCommitRequest_GroupKey()
}

type UpdateSupplyCommitRequest_GroupKeyBytes struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKeyBytes []byte `protobuf:"bytes,1,opt,name=group_key_bytes,json=groupKeyBytes,proto3,oneof"`
}

type UpdateSupplyCommitRequest_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,2,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*UpdateSupplyCommitRequest_GroupKeyBytes) isUpdateSupplyCommitRequest_GroupKey() {}

func (*UpdateSupplyCommitRequest_GroupKeyStr) isUpdateSupplyCommitRequest_GroupKey() {}

type UpdateSupplyCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSupplyCommitResponse) Reset() {
	*x = UpdateSupplyCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSupplyCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSupplyCommitResponse) ProtoMessage() {}

func (x *UpdateSupplyCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSupplyCommitResponse.ProtoReflect.Descriptor instead.
func (*UpdateSupplyCommitResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{54}
}

type FetchSupplyCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the target asset group whose supply commitment
	// is being fetched.
	//
	// Types that are assignable to GroupKey:
	//
	//	*FetchSupplyCommitRequest_GroupKeyBytes
	//	*FetchSupplyCommitRequest_GroupKeyStr
	GroupKey isFetchSupplyCommitRequest_GroupKey `protobuf_oneof:"group_key"`
	// Optional: A list of issuance leaf keys. For each key in this list,
	// the endpoint will generate and return an inclusion proof.
	IssuanceLeafKeys [][]byte `protobuf:"bytes,3,rep,name=issuance_leaf_keys,json=issuanceLeafKeys,proto3" json:"issuance_leaf_keys,omitempty"`
	// Optional: A list of burn leaf keys. For each key in this list,
	// the endpoint will generate and return an inclusion proof.
	BurnLeafKeys [][]byte `protobuf:"bytes,4,rep,name=burn_leaf_keys,json=burnLeafKeys,proto3" json:"burn_leaf_keys,omitempty"`
	// Optional: A list of ignore leaf keys. For each key in this list, the
	// endpoint will generate and return an inclusion proof.
	IgnoreLeafKeys [][]byte `protobuf:"bytes,5,rep,name=ignore_leaf_keys,json=ignoreLeafKeys,proto3" json:"ignore_leaf_keys,omitempty"`
}

func (x *FetchSupplyCommitRequest) Reset() {
	*x = FetchSupplyCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSupplyCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSupplyCommitRequest) ProtoMessage() {}

func (x *FetchSupplyCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSupplyCommitRequest.ProtoReflect.Descriptor instead.
func (*FetchSupplyCommitRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{55}
}

func (m *FetchSupplyCommitRequest) GetGroupKey() isFetchSupplyCommitRequest_GroupKey {
	if m != nil {
		return m.GroupKey
	}
	return nil
}

func (x *FetchSupplyCommitRequest) GetGroupKeyBytes() []byte {
	if x, ok := x.GetGroupKey().(*FetchSupplyCommitRequest_GroupKeyBytes); ok {
		return x.GroupKeyBytes
	}
	return nil
}

func (x *FetchSupplyCommitRequest) GetGroupKeyStr() string {
	if x, ok := x.GetGroupKey().(*FetchSupplyCommitRequest_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

func (x *FetchSupplyCommitRequest) GetIssuanceLeafKeys() [][]byte {
	if x != nil {
		return x.IssuanceLeafKeys
	}
	return nil
}

func (x *FetchSupplyCommitRequest) GetBurnLeafKeys() [][]byte {
	if x != nil {
		return x.BurnLeafKeys
	}
	return nil
}

func (x *FetchSupplyCommitRequest) GetIgnoreLeafKeys() [][]byte {
	if x != nil {
		return x.IgnoreLeafKeys
	}
	return nil
}

type isFetchSupplyCommitRequest_GroupKey interface {
	isFetchSupplyCommitRequest_GroupKey()
}

type FetchSupplyCommitRequest_GroupKeyBytes struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKeyBytes []byte `protobuf:"bytes,1,opt,name=group_key_bytes,json=groupKeyBytes,proto3,oneof"`
}

type FetchSupplyCommitRequest_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,2,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*FetchSupplyCommitRequest_GroupKeyBytes) isFetchSupplyCommitRequest_GroupKey() {}

func (*FetchSupplyCommitRequest_GroupKeyStr) isFetchSupplyCommitRequest_GroupKey() {}

type SupplyCommitSubtreeRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the supply commit subtree.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The root node of the supply commit subtree.
	RootNode *MerkleSumNode `protobuf:"bytes,2,opt,name=root_node,json=rootNode,proto3" json:"root_node,omitempty"`
	// The leaf key which locates the subtree leaf node in the supply commit
	// tree.
	SupplyTreeLeafKey []byte `protobuf:"bytes,3,opt,name=supply_tree_leaf_key,json=supplyTreeLeafKey,proto3" json:"supply_tree_leaf_key,omitempty"`
	// The inclusion proof for the supply commit subtree root node.
	SupplyTreeInclusionProof []byte `protobuf:"bytes,4,opt,name=supply_tree_inclusion_proof,json=supplyTreeInclusionProof,proto3" json:"supply_tree_inclusion_proof,omitempty"`
}

func (x *SupplyCommitSubtreeRoot) Reset() {
	*x = SupplyCommitSubtreeRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyCommitSubtreeRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyCommitSubtreeRoot) ProtoMessage() {}

func (x *SupplyCommitSubtreeRoot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyCommitSubtreeRoot.ProtoReflect.Descriptor instead.
func (*SupplyCommitSubtreeRoot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{56}
}

func (x *SupplyCommitSubtreeRoot) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SupplyCommitSubtreeRoot) GetRootNode() *MerkleSumNode {
	if x != nil {
		return x.RootNode
	}
	return nil
}

func (x *SupplyCommitSubtreeRoot) GetSupplyTreeLeafKey() []byte {
	if x != nil {
		return x.SupplyTreeLeafKey
	}
	return nil
}

func (x *SupplyCommitSubtreeRoot) GetSupplyTreeInclusionProof() []byte {
	if x != nil {
		return x.SupplyTreeInclusionProof
	}
	return nil
}

type FetchSupplyCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The supply commitment merkle sum root node for the specified asset.
	SupplyCommitmentRoot *MerkleSumNode `protobuf:"bytes,1,opt,name=supply_commitment_root,json=supplyCommitmentRoot,proto3" json:"supply_commitment_root,omitempty"`
	// The txid of the anchor transaction that commits to the supply
	// commitment for the specified asset.
	AnchorTxid string `protobuf:"bytes,2,opt,name=anchor_txid,json=anchorTxid,proto3" json:"anchor_txid,omitempty"`
	// The output index of the anchor transaction that commits to the supply
	// commitment for the specified asset.
	AnchorTxOutIdx uint32 `protobuf:"varint,3,opt,name=anchor_tx_out_idx,json=anchorTxOutIdx,proto3" json:"anchor_tx_out_idx,omitempty"`
	// The transaction output taproot internal key of the anchor transaction
	// that commits to the supply commitment for the specified asset.
	AnchorTxOutInternalKey []byte `protobuf:"bytes,4,opt,name=anchor_tx_out_internal_key,json=anchorTxOutInternalKey,proto3" json:"anchor_tx_out_internal_key,omitempty"`
	// The height of the block at which the supply commitment was anchored.
	BlockHeight uint32 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The hash of the block at which the supply commitment was anchored.
	BlockHash []byte `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The index of the transaction in the block that commits to the supply
	// commitment.
	BlockTxIndex uint32 `protobuf:"varint,7,opt,name=block_tx_index,json=blockTxIndex,proto3" json:"block_tx_index,omitempty"`
	// The total number of satoshis in on-chain fees paid by the supply
	// commitment transaction.
	TxChainFeesSats int64 `protobuf:"varint,8,opt,name=tx_chain_fees_sats,json=txChainFeesSats,proto3" json:"tx_chain_fees_sats,omitempty"`
	// The root of the issuance tree for the specified asset.
	IssuanceSubtreeRoot *SupplyCommitSubtreeRoot `protobuf:"bytes,9,opt,name=issuance_subtree_root,json=issuanceSubtreeRoot,proto3" json:"issuance_subtree_root,omitempty"`
	// The root of the burn tree for the specified asset.
	BurnSubtreeRoot *SupplyCommitSubtreeRoot `protobuf:"bytes,10,opt,name=burn_subtree_root,json=burnSubtreeRoot,proto3" json:"burn_subtree_root,omitempty"`
	// The root of the ignore tree for the specified asset.
	IgnoreSubtreeRoot *SupplyCommitSubtreeRoot `protobuf:"bytes,11,opt,name=ignore_subtree_root,json=ignoreSubtreeRoot,proto3" json:"ignore_subtree_root,omitempty"`
	// Inclusion proofs for each issuance leaf key provided in the request.
	// Each entry corresponds to the key at the same index in
	// `issuance_leaf_keys`.
	IssuanceLeafInclusionProofs [][]byte `protobuf:"bytes,12,rep,name=issuance_leaf_inclusion_proofs,json=issuanceLeafInclusionProofs,proto3" json:"issuance_leaf_inclusion_proofs,omitempty"`
	// Inclusion proofs for each burn leaf key provided in the request.
	// Each entry corresponds to the key at the same index in `burn_leaf_keys`.
	BurnLeafInclusionProofs [][]byte `protobuf:"bytes,13,rep,name=burn_leaf_inclusion_proofs,json=burnLeafInclusionProofs,proto3" json:"burn_leaf_inclusion_proofs,omitempty"`
	// Inclusion proofs for each ignored leaf key provided in the request.
	// Each entry corresponds to the key at the same index in
	// `ignore_leaf_keys`.
	IgnoreLeafInclusionProofs [][]byte `protobuf:"bytes,14,rep,name=ignore_leaf_inclusion_proofs,json=ignoreLeafInclusionProofs,proto3" json:"ignore_leaf_inclusion_proofs,omitempty"`
}

func (x *FetchSupplyCommitResponse) Reset() {
	*x = FetchSupplyCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSupplyCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSupplyCommitResponse) ProtoMessage() {}

func (x *FetchSupplyCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSupplyCommitResponse.ProtoReflect.Descriptor instead.
func (*FetchSupplyCommitResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{57}
}

func (x *FetchSupplyCommitResponse) GetSupplyCommitmentRoot() *MerkleSumNode {
	if x != nil {
		return x.SupplyCommitmentRoot
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetAnchorTxid() string {
	if x != nil {
		return x.AnchorTxid
	}
	return ""
}

func (x *FetchSupplyCommitResponse) GetAnchorTxOutIdx() uint32 {
	if x != nil {
		return x.AnchorTxOutIdx
	}
	return 0
}

func (x *FetchSupplyCommitResponse) GetAnchorTxOutInternalKey() []byte {
	if x != nil {
		return x.AnchorTxOutInternalKey
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *FetchSupplyCommitResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetBlockTxIndex() uint32 {
	if x != nil {
		return x.BlockTxIndex
	}
	return 0
}

func (x *FetchSupplyCommitResponse) GetTxChainFeesSats() int64 {
	if x != nil {
		return x.TxChainFeesSats
	}
	return 0
}

func (x *FetchSupplyCommitResponse) GetIssuanceSubtreeRoot() *SupplyCommitSubtreeRoot {
	if x != nil {
		return x.IssuanceSubtreeRoot
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetBurnSubtreeRoot() *SupplyCommitSubtreeRoot {
	if x != nil {
		return x.BurnSubtreeRoot
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetIgnoreSubtreeRoot() *SupplyCommitSubtreeRoot {
	if x != nil {
		return x.IgnoreSubtreeRoot
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetIssuanceLeafInclusionProofs() [][]byte {
	if x != nil {
		return x.IssuanceLeafInclusionProofs
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetBurnLeafInclusionProofs() [][]byte {
	if x != nil {
		return x.BurnLeafInclusionProofs
	}
	return nil
}

func (x *FetchSupplyCommitResponse) GetIgnoreLeafInclusionProofs() [][]byte {
	if x != nil {
		return x.IgnoreLeafInclusionProofs
	}
	return nil
}

type FetchSupplyLeavesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the target asset group whose supply leaves are
	// being fetched.
	//
	// Types that are assignable to GroupKey:
	//
	//	*FetchSupplyLeavesRequest_GroupKeyBytes
	//	*FetchSupplyLeavesRequest_GroupKeyStr
	GroupKey isFetchSupplyLeavesRequest_GroupKey `protobuf_oneof:"group_key"`
	// The start block height for the range of supply leaves to fetch.
	BlockHeightStart uint32 `protobuf:"varint,3,opt,name=block_height_start,json=blockHeightStart,proto3" json:"block_height_start,omitempty"`
	// The end block height for the range of supply leaves to fetch.
	BlockHeightEnd uint32 `protobuf:"varint,4,opt,name=block_height_end,json=blockHeightEnd,proto3" json:"block_height_end,omitempty"`
}

func (x *FetchSupplyLeavesRequest) Reset() {
	*x = FetchSupplyLeavesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSupplyLeavesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSupplyLeavesRequest) ProtoMessage() {}

func (x *FetchSupplyLeavesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSupplyLeavesRequest.ProtoReflect.Descriptor instead.
func (*FetchSupplyLeavesRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{58}
}

func (m *FetchSupplyLeavesRequest) GetGroupKey() isFetchSupplyLeavesRequest_GroupKey {
	if m != nil {
		return m.GroupKey
	}
	return nil
}

func (x *FetchSupplyLeavesRequest) GetGroupKeyBytes() []byte {
	if x, ok := x.GetGroupKey().(*FetchSupplyLeavesRequest_GroupKeyBytes); ok {
		return x.GroupKeyBytes
	}
	return nil
}

func (x *FetchSupplyLeavesRequest) GetGroupKeyStr() string {
	if x, ok := x.GetGroupKey().(*FetchSupplyLeavesRequest_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

func (x *FetchSupplyLeavesRequest) GetBlockHeightStart() uint32 {
	if x != nil {
		return x.BlockHeightStart
	}
	return 0
}

func (x *FetchSupplyLeavesRequest) GetBlockHeightEnd() uint32 {
	if x != nil {
		return x.BlockHeightEnd
	}
	return 0
}

type isFetchSupplyLeavesRequest_GroupKey interface {
	isFetchSupplyLeavesRequest_GroupKey()
}

type FetchSupplyLeavesRequest_GroupKeyBytes struct {
	// The 32-byte asset group key specified as raw bytes (gRPC only).
	GroupKeyBytes []byte `protobuf:"bytes,1,opt,name=group_key_bytes,json=groupKeyBytes,proto3,oneof"`
}

type FetchSupplyLeavesRequest_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string (use this for
	// REST).
	GroupKeyStr string `protobuf:"bytes,2,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*FetchSupplyLeavesRequest_GroupKeyBytes) isFetchSupplyLeavesRequest_GroupKey() {}

func (*FetchSupplyLeavesRequest_GroupKeyStr) isFetchSupplyLeavesRequest_GroupKey() {}

// SupplyLeafKey identifies a supply leaf entry. It contains the components
// used to derive the key, which is computed as a hash of these fields.
type SupplyLeafKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint associated with the supply leaf.
	Outpoint *Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The script key of the supply leaf. This is the script key of the asset
	// point.
	ScriptKey []byte `protobuf:"bytes,2,opt,name=script_key,json=scriptKey,proto3" json:"script_key,omitempty"`
	// The asset ID associated with the supply leaf. This is only set for
	// ignore type supply leaves.
	AssetId []byte `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *SupplyLeafKey) Reset() {
	*x = SupplyLeafKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyLeafKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyLeafKey) ProtoMessage() {}

func (x *SupplyLeafKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyLeafKey.ProtoReflect.Descriptor instead.
func (*SupplyLeafKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{59}
}

func (x *SupplyLeafKey) GetOutpoint() *Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *SupplyLeafKey) GetScriptKey() []byte {
	if x != nil {
		return x.ScriptKey
	}
	return nil
}

func (x *SupplyLeafKey) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type SupplyLeafEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key that identifies the supply leaf in the supply commitment subtree.
	LeafKey *SupplyLeafKey `protobuf:"bytes,1,opt,name=leaf_key,json=leafKey,proto3" json:"leaf_key,omitempty"`
	// The merkle sum node representing the supply leaf in the supply commitment
	// subtree.
	LeafNode *MerkleSumNode `protobuf:"bytes,2,opt,name=leaf_node,json=leafNode,proto3" json:"leaf_node,omitempty"`
	// The block height at which the supply leaf was created.
	BlockHeight uint32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The raw serialized bytes of the supply leaf.
	RawLeaf []byte `protobuf:"bytes,4,opt,name=raw_leaf,json=rawLeaf,proto3" json:"raw_leaf,omitempty"`
}

func (x *SupplyLeafEntry) Reset() {
	*x = SupplyLeafEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyLeafEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyLeafEntry) ProtoMessage() {}

func (x *SupplyLeafEntry) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyLeafEntry.ProtoReflect.Descriptor instead.
func (*SupplyLeafEntry) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{60}
}

func (x *SupplyLeafEntry) GetLeafKey() *SupplyLeafKey {
	if x != nil {
		return x.LeafKey
	}
	return nil
}

func (x *SupplyLeafEntry) GetLeafNode() *MerkleSumNode {
	if x != nil {
		return x.LeafNode
	}
	return nil
}

func (x *SupplyLeafEntry) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SupplyLeafEntry) GetRawLeaf() []byte {
	if x != nil {
		return x.RawLeaf
	}
	return nil
}

type FetchSupplyLeavesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuanceLeaves []*SupplyLeafEntry `protobuf:"bytes,1,rep,name=issuance_leaves,json=issuanceLeaves,proto3" json:"issuance_leaves,omitempty"`
	BurnLeaves     []*SupplyLeafEntry `protobuf:"bytes,2,rep,name=burn_leaves,json=burnLeaves,proto3" json:"burn_leaves,omitempty"`
	IgnoreLeaves   []*SupplyLeafEntry `protobuf:"bytes,3,rep,name=ignore_leaves,json=ignoreLeaves,proto3" json:"ignore_leaves,omitempty"`
}

func (x *FetchSupplyLeavesResponse) Reset() {
	*x = FetchSupplyLeavesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSupplyLeavesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSupplyLeavesResponse) ProtoMessage() {}

func (x *FetchSupplyLeavesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSupplyLeavesResponse.ProtoReflect.Descriptor instead.
func (*FetchSupplyLeavesResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{61}
}

func (x *FetchSupplyLeavesResponse) GetIssuanceLeaves() []*SupplyLeafEntry {
	if x != nil {
		return x.IssuanceLeaves
	}
	return nil
}

func (x *FetchSupplyLeavesResponse) GetBurnLeaves() []*SupplyLeafEntry {
	if x != nil {
		return x.BurnLeaves
	}
	return nil
}

func (x *FetchSupplyLeavesResponse) GetIgnoreLeaves() []*SupplyLeafEntry {
	if x != nil {
		return x.IgnoreLeaves
	}
	return nil
}

var File_universerpc_universe_proto protoreflect.FileDescriptor

var file_universerpc_universe_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x1a, 0x0f, 0x74, 0x61, 0x70, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x82, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x49, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a,
	0x0d, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72,
	0x6f, 0x6f, 0x74, 0x53, 0x75, 0x6d, 0x22, 0xc7, 0x01, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x1b, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64,
	0x22, 0xae, 0x02, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x13,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x73, 0x1a, 0x5b, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x32, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xba,
	0x01, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x6f,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f,
	0x70, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x14,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a,
	0x14, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x46, 0x0a, 0x09, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x66,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x22, 0xb4, 0x03, 0x0a, 0x12, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x3e, 0x0a,
	0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x43,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x22, 0x6f, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x22, 0x7d, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73,
	0x22, 0x3e, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x60, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x22, 0x5d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x60, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xcd, 0x02, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a,
	0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xe5, 0x02, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x22, 0x56, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x51, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57,
	0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x21, 0x0a,
	0x1f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xab, 0x01, 0x0a, 0x1a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x21, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22,
	0x73, 0x0a, 0x1a, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x1b, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x22, 0x78,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x10, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x4c,
	0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xd6,
	0x01, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x65,
	0x65, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xcf, 0x06, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x49, 0x64, 0x78, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x78,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x73,
	0x53, 0x61, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x75,
	0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x50,
	0x0a, 0x11, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x0f, 0x62, 0x75, 0x72, 0x6e, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x54, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1b,
	0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x62,
	0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x17, 0x62, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x19,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x18, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x7c, 0x0a, 0x0d, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x65, 0x61,
	0x66, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x66, 0x22, 0xe4, 0x01, 0x0a, 0x19,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x2a, 0x59, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x39, 0x0a,
	0x10, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0xd1, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x53, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42,
	0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x07, 0x2a, 0x40, 0x0a, 0x0d,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x5f,
	0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x32,
	0x8f, 0x10, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x1e, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x1f,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x09, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x27, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x25,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x12, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_universerpc_universe_proto_rawDescOnce sync.Once
	file_universerpc_universe_proto_rawDescData = file_universerpc_universe_proto_rawDesc
)

func file_universerpc_universe_proto_rawDescGZIP() []byte {
	file_universerpc_universe_proto_rawDescOnce.Do(func() {
		file_universerpc_universe_proto_rawDescData = protoimpl.X.CompressGZIP(file_universerpc_universe_proto_rawDescData)
	})
	return file_universerpc_universe_proto_rawDescData
}

var file_universerpc_universe_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_universerpc_universe_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_universerpc_universe_proto_goTypes = []any{
	(ProofType)(0),                            // 0: universerpc.ProofType
	(UniverseSyncMode)(0),                     // 1: universerpc.UniverseSyncMode
	(AssetQuerySort)(0),                       // 2: universerpc.AssetQuerySort
	(SortDirection)(0),                        // 3: universerpc.SortDirection
	(AssetTypeFilter)(0),                      // 4: universerpc.AssetTypeFilter
	(*MultiverseRootRequest)(nil),             // 5: universerpc.MultiverseRootRequest
	(*MultiverseRootResponse)(nil),            // 6: universerpc.MultiverseRootResponse
	(*AssetRootRequest)(nil),                  // 7: universerpc.AssetRootRequest
	(*MerkleSumNode)(nil),                     // 8: universerpc.MerkleSumNode
	(*ID)(nil),                                // 9: universerpc.ID
	(*UniverseRoot)(nil),                      // 10: universerpc.UniverseRoot
	(*AssetRootResponse)(nil),                 // 11: universerpc.AssetRootResponse
	(*AssetRootQuery)(nil),                    // 12: universerpc.AssetRootQuery
	(*QueryRootResponse)(nil),                 // 13: universerpc.QueryRootResponse
	(*DeleteRootQuery)(nil),                   // 14: universerpc.DeleteRootQuery
	(*DeleteRootResponse)(nil),                // 15: universerpc.DeleteRootResponse
	(*Outpoint)(nil),                          // 16: universerpc.Outpoint
	(*AssetKey)(nil),                          // 17: universerpc.AssetKey
	(*AssetLeafKeysRequest)(nil),              // 18: universerpc.AssetLeafKeysRequest
	(*AssetLeafKeyResponse)(nil),              // 19: universerpc.AssetLeafKeyResponse
	(*AssetLeaf)(nil),                         // 20: universerpc.AssetLeaf
	(*AssetLeafResponse)(nil),                 // 21: universerpc.AssetLeafResponse
	(*UniverseKey)(nil),                       // 22: universerpc.UniverseKey
	(*AssetProofResponse)(nil),                // 23: universerpc.AssetProofResponse
	(*IssuanceData)(nil),                      // 24: universerpc.IssuanceData
	(*AssetProof)(nil),                        // 25: universerpc.AssetProof
	(*PushProofRequest)(nil),                  // 26: universerpc.PushProofRequest
	(*PushProofResponse)(nil),                 // 27: universerpc.PushProofResponse
	(*InfoRequest)(nil),                       // 28: universerpc.InfoRequest
	(*InfoResponse)(nil),                      // 29: universerpc.InfoResponse
	(*SyncTarget)(nil),                        // 30: universerpc.SyncTarget
	(*SyncRequest)(nil),                       // 31: universerpc.SyncRequest
	(*SyncedUniverse)(nil),                    // 32: universerpc.SyncedUniverse
	(*StatsRequest)(nil),                      // 33: universerpc.StatsRequest
	(*SyncResponse)(nil),                      // 34: universerpc.SyncResponse
	(*UniverseFederationServer)(nil),          // 35: universerpc.UniverseFederationServer
	(*ListFederationServersRequest)(nil),      // 36: universerpc.ListFederationServersRequest
	(*ListFederationServersResponse)(nil),     // 37: universerpc.ListFederationServersResponse
	(*AddFederationServerRequest)(nil),        // 38: universerpc.AddFederationServerRequest
	(*AddFederationServerResponse)(nil),       // 39: universerpc.AddFederationServerResponse
	(*DeleteFederationServerRequest)(nil),     // 40: universerpc.DeleteFederationServerRequest
	(*DeleteFederationServerResponse)(nil),    // 41: universerpc.DeleteFederationServerResponse
	(*StatsResponse)(nil),                     // 42: universerpc.StatsResponse
	(*AssetStatsQuery)(nil),                   // 43: universerpc.AssetStatsQuery
	(*AssetStatsSnapshot)(nil),                // 44: universerpc.AssetStatsSnapshot
	(*AssetStatsAsset)(nil),                   // 45: universerpc.AssetStatsAsset
	(*UniverseAssetStats)(nil),                // 46: universerpc.UniverseAssetStats
	(*QueryEventsRequest)(nil),                // 47: universerpc.QueryEventsRequest
	(*QueryEventsResponse)(nil),               // 48: universerpc.QueryEventsResponse
	(*GroupedUniverseEvents)(nil),             // 49: universerpc.GroupedUniverseEvents
	(*SetFederationSyncConfigRequest)(nil),    // 50: universerpc.SetFederationSyncConfigRequest
	(*SetFederationSyncConfigResponse)(nil),   // 51: universerpc.SetFederationSyncConfigResponse
	(*GlobalFederationSyncConfig)(nil),        // 52: universerpc.GlobalFederationSyncConfig
	(*AssetFederationSyncConfig)(nil),         // 53: universerpc.AssetFederationSyncConfig
	(*QueryFederationSyncConfigRequest)(nil),  // 54: universerpc.QueryFederationSyncConfigRequest
	(*QueryFederationSyncConfigResponse)(nil), // 55: universerpc.QueryFederationSyncConfigResponse
	(*IgnoreAssetOutPointRequest)(nil),        // 56: universerpc.IgnoreAssetOutPointRequest
	(*IgnoreAssetOutPointResponse)(nil),       // 57: universerpc.IgnoreAssetOutPointResponse
	(*UpdateSupplyCommitRequest)(nil),         // 58: universerpc.UpdateSupplyCommitRequest
	(*UpdateSupplyCommitResponse)(nil),        // 59: universerpc.UpdateSupplyCommitResponse
	(*FetchSupplyCommitRequest)(nil),          // 60: universerpc.FetchSupplyCommitRequest
	(*SupplyCommitSubtreeRoot)(nil),           // 61: universerpc.SupplyCommitSubtreeRoot
	(*FetchSupplyCommitResponse)(nil),         // 62: universerpc.FetchSupplyCommitResponse
	(*FetchSupplyLeavesRequest)(nil),          // 63: universerpc.FetchSupplyLeavesRequest
	(*SupplyLeafKey)(nil),                     // 64: universerpc.SupplyLeafKey
	(*SupplyLeafEntry)(nil),                   // 65: universerpc.SupplyLeafEntry
	(*FetchSupplyLeavesResponse)(nil),         // 66: universerpc.FetchSupplyLeavesResponse
	nil,                                       // 67: universerpc.UniverseRoot.AmountsByAssetIdEntry
	nil,                                       // 68: universerpc.AssetRootResponse.UniverseRootsEntry
	(*taprpc.Asset)(nil),                      // 69: taprpc.Asset
	(*taprpc.AssetMeta)(nil),                  // 70: taprpc.AssetMeta
	(*taprpc.GenesisReveal)(nil),              // 71: taprpc.GenesisReveal
	(*taprpc.GroupKeyReveal)(nil),             // 72: taprpc.GroupKeyReveal
	(taprpc.AssetType)(0),                     // 73: taprpc.AssetType
	(*taprpc.AssetOutPoint)(nil),              // 74: taprpc.AssetOutPoint
}
var file_universerpc_universe_proto_depIdxs = []int32{
	0,  // 0: universerpc.MultiverseRootRequest.proof_type:type_name -> universerpc.ProofType
	9,  // 1: universerpc.MultiverseRootRequest.specific_ids:type_name -> universerpc.ID
	8,  // 2: universerpc.MultiverseRootResponse.multiverse_root:type_name -> universerpc.MerkleSumNode
	3,  // 3: universerpc.AssetRootRequest.direction:type_name -> universerpc.SortDirection
	0,  // 4: universerpc.ID.proof_type:type_name -> universerpc.ProofType
	9,  // 5: universerpc.UniverseRoot.id:type_name -> universerpc.ID
	8,  // 6: universerpc.UniverseRoot.mssmt_root:type_name -> universerpc.MerkleSumNode
	67, // 7: universerpc.UniverseRoot.amounts_by_asset_id:type_name -> universerpc.UniverseRoot.AmountsByAssetIdEntry
	68, // 8: universerpc.AssetRootResponse.universe_roots:type_name -> universerpc.AssetRootResponse.UniverseRootsEntry
	9,  // 9: universerpc.AssetRootQuery.id:type_name -> universerpc.ID
	10, // 10: universerpc.QueryRootResponse.issuance_root:type_name -> universerpc.UniverseRoot
	10, // 11: universerpc.QueryRootResponse.transfer_root:type_name -> universerpc.UniverseRoot
	9,  // 12: universerpc.DeleteRootQuery.id:type_name -> universerpc.ID
	16, // 13: universerpc.AssetKey.op:type_name -> universerpc.Outpoint
	9,  // 14: universerpc.AssetLeafKeysRequest.id:type_name -> universerpc.ID
	3,  // 15: universerpc.AssetLeafKeysRequest.direction:type_name -> universerpc.SortDirection
	17, // 16: universerpc.AssetLeafKeyResponse.asset_keys:type_name -> universerpc.AssetKey
	69, // 17: universerpc.AssetLeaf.asset:type_name -> taprpc.Asset
	20, // 18: universerpc.AssetLeafResponse.leaves:type_name -> universerpc.AssetLeaf
	9,  // 19: universerpc.UniverseKey.id:type_name -> universerpc.ID
	17, // 20: universerpc.UniverseKey.leaf_key:type_name -> universerpc.AssetKey
	22, // 21: universerpc.AssetProofResponse.req:type_name -> universerpc.UniverseKey
	10, // 22: universerpc.AssetProofResponse.universe_root:type_name -> universerpc.UniverseRoot
	20, // 23: universerpc.AssetProofResponse.asset_leaf:type_name -> universerpc.AssetLeaf
	8,  // 24: universerpc.AssetProofResponse.multiverse_root:type_name -> universerpc.MerkleSumNode
	24, // 25: universerpc.AssetProofResponse.issuance_data:type_name -> universerpc.IssuanceData
	70, // 26: universerpc.IssuanceData.meta_reveal:type_name -> taprpc.AssetMeta
	71, // 27: universerpc.IssuanceData.genesis_reveal:type_name -> taprpc.GenesisReveal
	72, // 28: universerpc.IssuanceData.group_key_reveal:type_name -> taprpc.GroupKeyReveal
	22, // 29: universerpc.AssetProof.key:type_name -> universerpc.UniverseKey
	20, // 30: universerpc.AssetProof.asset_leaf:type_name -> universerpc.AssetLeaf
	22, // 31: universerpc.PushProofRequest.key:type_name -> universerpc.UniverseKey
	35, // 32: universerpc.PushProofRequest.server:type_name -> universerpc.UniverseFederationServer
	22, // 33: universerpc.PushProofResponse.key:type_name -> universerpc.UniverseKey
	9,  // 34: universerpc.SyncTarget.id:type_name -> universerpc.ID
	1,  // 35: universerpc.SyncRequest.sync_mode:type_name -> universerpc.UniverseSyncMode
	30, // 36: universerpc.SyncRequest.sync_targets:type_name -> universerpc.SyncTarget
	10, // 37: universerpc.SyncedUniverse.old_asset_root:type_name -> universerpc.UniverseRoot
	10, // 38: universerpc.SyncedUniverse.new_asset_root:type_name -> universerpc.UniverseRoot
	20, // 39: universerpc.SyncedUniverse.new_asset_leaves:type_name -> universerpc.AssetLeaf
	32, // 40: universerpc.SyncResponse.synced_universes:type_name -> universerpc.SyncedUniverse
	35, // 41: universerpc.ListFederationServersResponse.servers:type_name -> universerpc.UniverseFederationServer
	35, // 42: universerpc.AddFederationServerRequest.servers:type_name -> universerpc.UniverseFederationServer
	35, // 43: universerpc.DeleteFederationServerRequest.servers:type_name -> universerpc.UniverseFederationServer
	4,  // 44: universerpc.AssetStatsQuery.asset_type_filter:type_name -> universerpc.AssetTypeFilter
	2,  // 45: universerpc.AssetStatsQuery.sort_by:type_name -> universerpc.AssetQuerySort
	3,  // 46: universerpc.AssetStatsQuery.direction:type_name -> universerpc.SortDirection
	45, // 47: universerpc.AssetStatsSnapshot.group_anchor:type_name -> universerpc.AssetStatsAsset
	45, // 48: universerpc.AssetStatsSnapshot.asset:type_name -> universerpc.AssetStatsAsset
	73, // 49: universerpc.AssetStatsAsset.asset_type:type_name -> taprpc.AssetType
	44, // 50: universerpc.UniverseAssetStats.asset_stats:type_name -> universerpc.AssetStatsSnapshot
	49, // 51: universerpc.QueryEventsResponse.events:type_name -> universerpc.GroupedUniverseEvents
	52, // 52: universerpc.SetFederationSyncConfigRequest.global_sync_configs:type_name -> universerpc.GlobalFederationSyncConfig
	53, // 53: universerpc.SetFederationSyncConfigRequest.asset_sync_configs:type_name -> universerpc.AssetFederationSyncConfig
	0,  // 54: universerpc.GlobalFederationSyncConfig.proof_type:type_name -> universerpc.ProofType
	9,  // 55: universerpc.AssetFederationSyncConfig.id:type_name -> universerpc.ID
	9,  // 56: universerpc.QueryFederationSyncConfigRequest.id:type_name -> universerpc.ID
	52, // 57: universerpc.QueryFederationSyncConfigResponse.global_sync_configs:type_name -> universerpc.GlobalFederationSyncConfig
	53, // 58: universerpc.QueryFederationSyncConfigResponse.asset_sync_configs:type_name -> universerpc.AssetFederationSyncConfig
	74, // 59: universerpc.IgnoreAssetOutPointRequest.asset_out_point:type_name -> taprpc.AssetOutPoint
	8,  // 60: universerpc.IgnoreAssetOutPointResponse.leaf:type_name -> universerpc.MerkleSumNode
	8,  // 61: universerpc.SupplyCommitSubtreeRoot.root_node:type_name -> universerpc.MerkleSumNode
	8,  // 62: universerpc.FetchSupplyCommitResponse.supply_commitment_root:type_name -> universerpc.MerkleSumNode
	61, // 63: universerpc.FetchSupplyCommitResponse.issuance_subtree_root:type_name -> universerpc.SupplyCommitSubtreeRoot
	61, // 64: universerpc.FetchSupplyCommitResponse.burn_subtree_root:type_name -> universerpc.SupplyCommitSubtreeRoot
	61, // 65: universerpc.FetchSupplyCommitResponse.ignore_subtree_root:type_name -> universerpc.SupplyCommitSubtreeRoot
	16, // 66: universerpc.SupplyLeafKey.outpoint:type_name -> universerpc.Outpoint
	64, // 67: universerpc.SupplyLeafEntry.leaf_key:type_name -> universerpc.SupplyLeafKey
	8,  // 68: universerpc.SupplyLeafEntry.leaf_node:type_name -> universerpc.MerkleSumNode
	65, // 69: universerpc.FetchSupplyLeavesResponse.issuance_leaves:type_name -> universerpc.SupplyLeafEntry
	65, // 70: universerpc.FetchSupplyLeavesResponse.burn_leaves:type_name -> universerpc.SupplyLeafEntry
	65, // 71: universerpc.FetchSupplyLeavesResponse.ignore_leaves:type_name -> universerpc.SupplyLeafEntry
	10, // 72: universerpc.AssetRootResponse.UniverseRootsEntry.value:type_name -> universerpc.UniverseRoot
	5,  // 73: universerpc.Universe.MultiverseRoot:input_type -> universerpc.MultiverseRootRequest
	7,  // 74: universerpc.Universe.AssetRoots:input_type -> universerpc.AssetRootRequest
	12, // 75: universerpc.Universe.QueryAssetRoots:input_type -> universerpc.AssetRootQuery
	14, // 76: universerpc.Universe.DeleteAssetRoot:input_type -> universerpc.DeleteRootQuery
	18, // 77: universerpc.Universe.AssetLeafKeys:input_type -> universerpc.AssetLeafKeysRequest
	9,  // 78: universerpc.Universe.AssetLeaves:input_type -> universerpc.ID
	22, // 79: universerpc.Universe.QueryProof:input_type -> universerpc.UniverseKey
	25, // 80: universerpc.Universe.InsertProof:input_type -> universerpc.AssetProof
	26, // 81: universerpc.Universe.PushProof:input_type -> universerpc.PushProofRequest
	28, // 82: universerpc.Universe.Info:input_type -> universerpc.InfoRequest
	31, // 83: universerpc.Universe.SyncUniverse:input_type -> universerpc.SyncRequest
	36, // 84: universerpc.Universe.ListFederationServers:input_type -> universerpc.ListFederationServersRequest
	38, // 85: universerpc.Universe.AddFederationServer:input_type -> universerpc.AddFederationServerRequest
	40, // 86: universerpc.Universe.DeleteFederationServer:input_type -> universerpc.DeleteFederationServerRequest
	33, // 87: universerpc.Universe.UniverseStats:input_type -> universerpc.StatsRequest
	43, // 88: universerpc.Universe.QueryAssetStats:input_type -> universerpc.AssetStatsQuery
	47, // 89: universerpc.Universe.QueryEvents:input_type -> universerpc.QueryEventsRequest
	50, // 90: universerpc.Universe.SetFederationSyncConfig:input_type -> universerpc.SetFederationSyncConfigRequest
	54, // 91: universerpc.Universe.QueryFederationSyncConfig:input_type -> universerpc.QueryFederationSyncConfigRequest
	56, // 92: universerpc.Universe.IgnoreAssetOutPoint:input_type -> universerpc.IgnoreAssetOutPointRequest
	58, // 93: universerpc.Universe.UpdateSupplyCommit:input_type -> universerpc.UpdateSupplyCommitRequest
	60, // 94: universerpc.Universe.FetchSupplyCommit:input_type -> universerpc.FetchSupplyCommitRequest
	63, // 95: universerpc.Universe.FetchSupplyLeaves:input_type -> universerpc.FetchSupplyLeavesRequest
	6,  // 96: universerpc.Universe.MultiverseRoot:output_type -> universerpc.MultiverseRootResponse
	11, // 97: universerpc.Universe.AssetRoots:output_type -> universerpc.AssetRootResponse
	13, // 98: universerpc.Universe.QueryAssetRoots:output_type -> universerpc.QueryRootResponse
	15, // 99: universerpc.Universe.DeleteAssetRoot:output_type -> universerpc.DeleteRootResponse
	19, // 100: universerpc.Universe.AssetLeafKeys:output_type -> universerpc.AssetLeafKeyResponse
	21, // 101: universerpc.Universe.AssetLeaves:output_type -> universerpc.AssetLeafResponse
	23, // 102: universerpc.Universe.QueryProof:output_type -> universerpc.AssetProofResponse
	23, // 103: universerpc.Universe.InsertProof:output_type -> universerpc.AssetProofResponse
	27, // 104: universerpc.Universe.PushProof:output_type -> universerpc.PushProofResponse
	29, // 105: universerpc.Universe.Info:output_type -> universerpc.InfoResponse
	34, // 106: universerpc.Universe.SyncUniverse:output_type -> universerpc.SyncResponse
	37, // 107: universerpc.Universe.ListFederationServers:output_type -> universerpc.ListFederationServersResponse
	39, // 108: universerpc.Universe.AddFederationServer:output_type -> universerpc.AddFederationServerResponse
	41, // 109: universerpc.Universe.DeleteFederationServer:output_type -> universerpc.DeleteFederationServerResponse
	42, // 110: universerpc.Universe.UniverseStats:output_type -> universerpc.StatsResponse
	46, // 111: universerpc.Universe.QueryAssetStats:output_type -> universerpc.UniverseAssetStats
	48, // 112: universerpc.Universe.QueryEvents:output_type -> universerpc.QueryEventsResponse
	51, // 113: universerpc.Universe.SetFederationSyncConfig:output_type -> universerpc.SetFederationSyncConfigResponse
	55, // 114: universerpc.Universe.QueryFederationSyncConfig:output_type -> universerpc.QueryFederationSyncConfigResponse
	57, // 115: universerpc.Universe.IgnoreAssetOutPoint:output_type -> universerpc.IgnoreAssetOutPointResponse
	59, // 116: universerpc.Universe.UpdateSupplyCommit:output_type -> universerpc.UpdateSupplyCommitResponse
	62, // 117: universerpc.Universe.FetchSupplyCommit:output_type -> universerpc.FetchSupplyCommitResponse
	66, // 118: universerpc.Universe.FetchSupplyLeaves:output_type -> universerpc.FetchSupplyLeavesResponse
	96, // [96:119] is the sub-list for method output_type
	73, // [73:96] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_universerpc_universe_proto_init() }
func file_universerpc_universe_proto_init() {
	if File_universerpc_universe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_universerpc_universe_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MultiverseRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MultiverseRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AssetRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MerkleSumNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AssetRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AssetRootQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*QueryRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRootQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Outpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AssetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AssetLeafKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AssetLeafKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AssetLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AssetLeafResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AssetProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*IssuanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AssetProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PushProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PushProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SyncTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SyncedUniverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseFederationServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ListFederationServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ListFederationServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AddFederationServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*AddFederationServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteFederationServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteFederationServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*AssetStatsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AssetStatsSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*AssetStatsAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseAssetStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*QueryEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*QueryEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GroupedUniverseEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SetFederationSyncConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SetFederationSyncConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GlobalFederationSyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*AssetFederationSyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*QueryFederationSyncConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*QueryFederationSyncConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*IgnoreAssetOutPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*IgnoreAssetOutPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSupplyCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSupplyCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*FetchSupplyCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*SupplyCommitSubtreeRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*FetchSupplyCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*FetchSupplyLeavesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SupplyLeafKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*SupplyLeafEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*FetchSupplyLeavesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_universerpc_universe_proto_msgTypes[4].OneofWrappers = []any{
		(*ID_AssetId)(nil),
		(*ID_AssetIdStr)(nil),
		(*ID_GroupKey)(nil),
		(*ID_GroupKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[12].OneofWrappers = []any{
		(*AssetKey_OpStr)(nil),
		(*AssetKey_Op)(nil),
		(*AssetKey_ScriptKeyBytes)(nil),
		(*AssetKey_ScriptKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[53].OneofWrappers = []any{
		(*UpdateSupplyCommitRequest_GroupKeyBytes)(nil),
		(*UpdateSupplyCommitRequest_GroupKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[55].OneofWrappers = []any{
		(*FetchSupplyCommitRequest_GroupKeyBytes)(nil),
		(*FetchSupplyCommitRequest_GroupKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[58].OneofWrappers = []any{
		(*FetchSupplyLeavesRequest_GroupKeyBytes)(nil),
		(*FetchSupplyLeavesRequest_GroupKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_universerpc_universe_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_universerpc_universe_proto_goTypes,
		DependencyIndexes: file_universerpc_universe_proto_depIdxs,
		EnumInfos:         file_universerpc_universe_proto_enumTypes,
		MessageInfos:      file_universerpc_universe_proto_msgTypes,
	}.Build()
	File_universerpc_universe_proto = out.File
	file_universerpc_universe_proto_rawDesc = nil
	file_universerpc_universe_proto_goTypes = nil
	file_universerpc_universe_proto_depIdxs = nil
}
