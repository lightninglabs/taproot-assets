// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tapchannelrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaprootAssetChannelsClient is the client API for TaprootAssetChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaprootAssetChannelsClient interface {
	// FundChannel initiates the channel funding negotiation with a peer for the
	// creation of a channel that contains a specified amount of a given asset.
	FundChannel(ctx context.Context, in *FundChannelRequest, opts ...grpc.CallOption) (*FundChannelResponse, error)
	// EncodeCustomRecords allows RPC users to encode Taproot Asset channel related
	// data into the TLV format that is used in the custom records of the lnd
	// payment or other channel related RPCs. This RPC is completely stateless and
	// does not perform any checks on the data provided, other than pure format
	// validation.
	EncodeCustomRecords(ctx context.Context, in *EncodeCustomRecordsRequest, opts ...grpc.CallOption) (*EncodeCustomRecordsResponse, error)
	// SendPayment is a wrapper around lnd's routerrpc.SendPaymentV2 RPC method
	// with asset specific parameters. It allows RPC users to send asset keysend
	// payments (direct payments) or payments to an invoice with a specified asset
	// amount.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (TaprootAssetChannels_SendPaymentClient, error)
	// AddInvoice is a wrapper around lnd's lnrpc.AddInvoice method with asset
	// specific parameters. It allows RPC users to create invoices that correspond
	// to the specified asset amount. If a peer pubkey is specified, then only that
	// peer will be used for RFQ negotiations. If none is specified then RFQ quotes
	// for all peers with suitable asset channels will be created.
	AddInvoice(ctx context.Context, in *AddInvoiceRequest, opts ...grpc.CallOption) (*AddInvoiceResponse, error)
	// DecodeAssetPayReq is similar to lnd's lnrpc.DecodePayReq, but it accepts an
	// asset ID and returns the invoice amount expressed in asset units along side
	// the normal information.
	DecodeAssetPayReq(ctx context.Context, in *AssetPayReq, opts ...grpc.CallOption) (*AssetPayReqResponse, error)
}

type taprootAssetChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewTaprootAssetChannelsClient(cc grpc.ClientConnInterface) TaprootAssetChannelsClient {
	return &taprootAssetChannelsClient{cc}
}

func (c *taprootAssetChannelsClient) FundChannel(ctx context.Context, in *FundChannelRequest, opts ...grpc.CallOption) (*FundChannelResponse, error) {
	out := new(FundChannelResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/FundChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taprootAssetChannelsClient) EncodeCustomRecords(ctx context.Context, in *EncodeCustomRecordsRequest, opts ...grpc.CallOption) (*EncodeCustomRecordsResponse, error) {
	out := new(EncodeCustomRecordsResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taprootAssetChannelsClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (TaprootAssetChannels_SendPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaprootAssetChannels_ServiceDesc.Streams[0], "/tapchannelrpc.TaprootAssetChannels/SendPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &taprootAssetChannelsSendPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaprootAssetChannels_SendPaymentClient interface {
	Recv() (*SendPaymentResponse, error)
	grpc.ClientStream
}

type taprootAssetChannelsSendPaymentClient struct {
	grpc.ClientStream
}

func (x *taprootAssetChannelsSendPaymentClient) Recv() (*SendPaymentResponse, error) {
	m := new(SendPaymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taprootAssetChannelsClient) AddInvoice(ctx context.Context, in *AddInvoiceRequest, opts ...grpc.CallOption) (*AddInvoiceResponse, error) {
	out := new(AddInvoiceResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/AddInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taprootAssetChannelsClient) DecodeAssetPayReq(ctx context.Context, in *AssetPayReq, opts ...grpc.CallOption) (*AssetPayReqResponse, error) {
	out := new(AssetPayReqResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/DecodeAssetPayReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaprootAssetChannelsServer is the server API for TaprootAssetChannels service.
// All implementations must embed UnimplementedTaprootAssetChannelsServer
// for forward compatibility
type TaprootAssetChannelsServer interface {
	// FundChannel initiates the channel funding negotiation with a peer for the
	// creation of a channel that contains a specified amount of a given asset.
	FundChannel(context.Context, *FundChannelRequest) (*FundChannelResponse, error)
	// EncodeCustomRecords allows RPC users to encode Taproot Asset channel related
	// data into the TLV format that is used in the custom records of the lnd
	// payment or other channel related RPCs. This RPC is completely stateless and
	// does not perform any checks on the data provided, other than pure format
	// validation.
	EncodeCustomRecords(context.Context, *EncodeCustomRecordsRequest) (*EncodeCustomRecordsResponse, error)
	// SendPayment is a wrapper around lnd's routerrpc.SendPaymentV2 RPC method
	// with asset specific parameters. It allows RPC users to send asset keysend
	// payments (direct payments) or payments to an invoice with a specified asset
	// amount.
	SendPayment(*SendPaymentRequest, TaprootAssetChannels_SendPaymentServer) error
	// AddInvoice is a wrapper around lnd's lnrpc.AddInvoice method with asset
	// specific parameters. It allows RPC users to create invoices that correspond
	// to the specified asset amount. If a peer pubkey is specified, then only that
	// peer will be used for RFQ negotiations. If none is specified then RFQ quotes
	// for all peers with suitable asset channels will be created.
	AddInvoice(context.Context, *AddInvoiceRequest) (*AddInvoiceResponse, error)
	// DecodeAssetPayReq is similar to lnd's lnrpc.DecodePayReq, but it accepts an
	// asset ID and returns the invoice amount expressed in asset units along side
	// the normal information.
	DecodeAssetPayReq(context.Context, *AssetPayReq) (*AssetPayReqResponse, error)
	mustEmbedUnimplementedTaprootAssetChannelsServer()
}

// UnimplementedTaprootAssetChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedTaprootAssetChannelsServer struct {
}

func (UnimplementedTaprootAssetChannelsServer) FundChannel(context.Context, *FundChannelRequest) (*FundChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannel not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) EncodeCustomRecords(context.Context, *EncodeCustomRecordsRequest) (*EncodeCustomRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeCustomRecords not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) SendPayment(*SendPaymentRequest, TaprootAssetChannels_SendPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) AddInvoice(context.Context, *AddInvoiceRequest) (*AddInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvoice not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) DecodeAssetPayReq(context.Context, *AssetPayReq) (*AssetPayReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeAssetPayReq not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) mustEmbedUnimplementedTaprootAssetChannelsServer() {}

// UnsafeTaprootAssetChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaprootAssetChannelsServer will
// result in compilation errors.
type UnsafeTaprootAssetChannelsServer interface {
	mustEmbedUnimplementedTaprootAssetChannelsServer()
}

func RegisterTaprootAssetChannelsServer(s grpc.ServiceRegistrar, srv TaprootAssetChannelsServer) {
	s.RegisterService(&TaprootAssetChannels_ServiceDesc, srv)
}

func _TaprootAssetChannels_FundChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).FundChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/FundChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).FundChannel(ctx, req.(*FundChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaprootAssetChannels_EncodeCustomRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeCustomRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).EncodeCustomRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).EncodeCustomRecords(ctx, req.(*EncodeCustomRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaprootAssetChannels_SendPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaprootAssetChannelsServer).SendPayment(m, &taprootAssetChannelsSendPaymentServer{stream})
}

type TaprootAssetChannels_SendPaymentServer interface {
	Send(*SendPaymentResponse) error
	grpc.ServerStream
}

type taprootAssetChannelsSendPaymentServer struct {
	grpc.ServerStream
}

func (x *taprootAssetChannelsSendPaymentServer) Send(m *SendPaymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TaprootAssetChannels_AddInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).AddInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/AddInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).AddInvoice(ctx, req.(*AddInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaprootAssetChannels_DecodeAssetPayReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).DecodeAssetPayReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/DecodeAssetPayReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).DecodeAssetPayReq(ctx, req.(*AssetPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaprootAssetChannels_ServiceDesc is the grpc.ServiceDesc for TaprootAssetChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaprootAssetChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapchannelrpc.TaprootAssetChannels",
	HandlerType: (*TaprootAssetChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundChannel",
			Handler:    _TaprootAssetChannels_FundChannel_Handler,
		},
		{
			MethodName: "EncodeCustomRecords",
			Handler:    _TaprootAssetChannels_EncodeCustomRecords_Handler,
		},
		{
			MethodName: "AddInvoice",
			Handler:    _TaprootAssetChannels_AddInvoice_Handler,
		},
		{
			MethodName: "DecodeAssetPayReq",
			Handler:    _TaprootAssetChannels_DecodeAssetPayReq_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPayment",
			Handler:       _TaprootAssetChannels_SendPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tapchannelrpc/tapchannel.proto",
}
