// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: tapchannelrpc/tapchannel.proto

package tapchannelrpc

import (
	taprpc "github.com/lightninglabs/taproot-assets/taprpc"
	rfqrpc "github.com/lightninglabs/taproot-assets/taprpc/rfqrpc"
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	routerrpc "github.com/lightningnetwork/lnd/lnrpc/routerrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FundChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset amount to fund the channel with. The BTC amount is fixed and
	// cannot be customized (for now).
	AssetAmount uint64 `protobuf:"varint,1,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// The asset ID to use for the channel funding.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The public key of the peer to open the channel with. Must already be
	// connected to this peer.
	PeerPubkey []byte `protobuf:"bytes,3,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	// The channel funding fee rate in sat/vByte.
	FeeRateSatPerVbyte uint32 `protobuf:"varint,4,opt,name=fee_rate_sat_per_vbyte,json=feeRateSatPerVbyte,proto3" json:"fee_rate_sat_per_vbyte,omitempty"`
	// The number of satoshis to give the remote side as part of the initial
	// commitment state. This is equivalent to first opening a channel and then
	// sending the remote party funds, but all done in one step. Therefore, this
	// is equivalent to a donation to the remote party, unless they reimburse
	// the funds in another way (outside the protocol).
	PushSat int64 `protobuf:"varint,5,opt,name=push_sat,json=pushSat,proto3" json:"push_sat,omitempty"`
	// The group key to use for the channel. This can be used instead of the
	// asset_id to allow assets from a fungible group to be used for the channel
	// funding instead of just assets from a single minting tranche (asset_id).
	GroupKey      []byte `protobuf:"bytes,6,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FundChannelRequest) Reset() {
	*x = FundChannelRequest{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundChannelRequest) ProtoMessage() {}

func (x *FundChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundChannelRequest.ProtoReflect.Descriptor instead.
func (*FundChannelRequest) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{0}
}

func (x *FundChannelRequest) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *FundChannelRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *FundChannelRequest) GetPeerPubkey() []byte {
	if x != nil {
		return x.PeerPubkey
	}
	return nil
}

func (x *FundChannelRequest) GetFeeRateSatPerVbyte() uint32 {
	if x != nil {
		return x.FeeRateSatPerVbyte
	}
	return 0
}

func (x *FundChannelRequest) GetPushSat() int64 {
	if x != nil {
		return x.PushSat
	}
	return 0
}

func (x *FundChannelRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type FundChannelResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The channel funding transaction ID.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// The index of the channel funding output in the funding transaction.
	OutputIndex   int32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FundChannelResponse) Reset() {
	*x = FundChannelResponse{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundChannelResponse) ProtoMessage() {}

func (x *FundChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundChannelResponse.ProtoReflect.Descriptor instead.
func (*FundChannelResponse) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{1}
}

func (x *FundChannelResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *FundChannelResponse) GetOutputIndex() int32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type RouterSendPaymentData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The string encoded asset ID to amount mapping. Instructs the router to
	// use these assets in the given amounts for the payment. Can be empty for
	// a payment of an invoice, if the RFQ ID is set instead.
	AssetAmounts map[string]uint64 `protobuf:"bytes,1,rep,name=asset_amounts,json=assetAmounts,proto3" json:"asset_amounts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// The RFQ ID to use for the payment. Can be empty for a direct keysend
	// payment that doesn't involve any conversion (and thus no RFQ).
	RfqId         []byte `protobuf:"bytes,2,opt,name=rfq_id,json=rfqId,proto3" json:"rfq_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouterSendPaymentData) Reset() {
	*x = RouterSendPaymentData{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterSendPaymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSendPaymentData) ProtoMessage() {}

func (x *RouterSendPaymentData) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSendPaymentData.ProtoReflect.Descriptor instead.
func (*RouterSendPaymentData) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{2}
}

func (x *RouterSendPaymentData) GetAssetAmounts() map[string]uint64 {
	if x != nil {
		return x.AssetAmounts
	}
	return nil
}

func (x *RouterSendPaymentData) GetRfqId() []byte {
	if x != nil {
		return x.RfqId
	}
	return nil
}

type EncodeCustomRecordsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Input:
	//
	//	*EncodeCustomRecordsRequest_RouterSendPayment
	Input         isEncodeCustomRecordsRequest_Input `protobuf_oneof:"input"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCustomRecordsRequest) Reset() {
	*x = EncodeCustomRecordsRequest{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCustomRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCustomRecordsRequest) ProtoMessage() {}

func (x *EncodeCustomRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCustomRecordsRequest.ProtoReflect.Descriptor instead.
func (*EncodeCustomRecordsRequest) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{3}
}

func (x *EncodeCustomRecordsRequest) GetInput() isEncodeCustomRecordsRequest_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EncodeCustomRecordsRequest) GetRouterSendPayment() *RouterSendPaymentData {
	if x != nil {
		if x, ok := x.Input.(*EncodeCustomRecordsRequest_RouterSendPayment); ok {
			return x.RouterSendPayment
		}
	}
	return nil
}

type isEncodeCustomRecordsRequest_Input interface {
	isEncodeCustomRecordsRequest_Input()
}

type EncodeCustomRecordsRequest_RouterSendPayment struct {
	RouterSendPayment *RouterSendPaymentData `protobuf:"bytes,1,opt,name=router_send_payment,json=routerSendPayment,proto3,oneof"`
}

func (*EncodeCustomRecordsRequest_RouterSendPayment) isEncodeCustomRecordsRequest_Input() {}

type EncodeCustomRecordsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The encoded custom records in TLV format.
	CustomRecords map[uint64][]byte `protobuf:"bytes,1,rep,name=custom_records,json=customRecords,proto3" json:"custom_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCustomRecordsResponse) Reset() {
	*x = EncodeCustomRecordsResponse{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCustomRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCustomRecordsResponse) ProtoMessage() {}

func (x *EncodeCustomRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCustomRecordsResponse.ProtoReflect.Descriptor instead.
func (*EncodeCustomRecordsResponse) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{4}
}

func (x *EncodeCustomRecordsResponse) GetCustomRecords() map[uint64][]byte {
	if x != nil {
		return x.CustomRecords
	}
	return nil
}

type SendPaymentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset ID to use for the payment. This must be set for both invoice
	// and keysend payments, unless RFQ negotiation was already done beforehand
	// and payment_request.first_hop_custom_records already contains valid RFQ
	// data. Mutually exclusive to group_key.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The asset amount to send in a keysend payment. This amount is ignored for
	// invoice payments as the asset amount is negotiated through RFQ with the
	// peer, depending on the invoice amount. This can also be left unset if RFQ
	// negotiation was already done beforehand and
	// payment_request.first_hop_custom_records already contains valid RFQ data.
	AssetAmount uint64 `protobuf:"varint,2,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// The node identity public key of the peer to ask for a quote for sending
	// out the assets and converting them to satoshis. This must be specified if
	// there are multiple channels with the given asset ID.
	PeerPubkey []byte `protobuf:"bytes,3,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	// The full lnd payment request to send. All fields behave the same way as
	// they do for lnd's routerrpc.SendPaymentV2 RPC method (see the API docs
	// at https://lightning.engineering/api-docs/api/lnd/router/send-payment-v2
	// for more details).
	// To send a keysend payment, the payment_request.dest_custom_records must
	// contain a valid keysend record (key 5482373484 and a 32-byte preimage
	// that corresponds to the payment hash).
	PaymentRequest *routerrpc.SendPaymentRequest `protobuf:"bytes,4,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	// The rfq id to use for this payment. If the user sets this value then the
	// payment will immediately be dispatched, skipping the rfq negotiation
	// phase, and using the following rfq id instead.
	RfqId []byte `protobuf:"bytes,5,opt,name=rfq_id,json=rfqId,proto3" json:"rfq_id,omitempty"`
	// If a small invoice should be paid that is below the amount that always
	// needs to be sent out to carry a single asset unit, then by default the
	// payment is rejected. If this flag is set, then the payment will be
	// allowed to proceed, even if it is uneconomical, meaning that more sats
	// are sent out to the network than the invoice amount plus routing fees
	// require to be paid.
	AllowOverpay bool `protobuf:"varint,6,opt,name=allow_overpay,json=allowOverpay,proto3" json:"allow_overpay,omitempty"`
	// The group key which dictates which assets may be used for this payment.
	// Mutually exclusive to asset_id.
	GroupKey      []byte `protobuf:"bytes,7,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendPaymentRequest) Reset() {
	*x = SendPaymentRequest{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentRequest) ProtoMessage() {}

func (x *SendPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentRequest.ProtoReflect.Descriptor instead.
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{5}
}

func (x *SendPaymentRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *SendPaymentRequest) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *SendPaymentRequest) GetPeerPubkey() []byte {
	if x != nil {
		return x.PeerPubkey
	}
	return nil
}

func (x *SendPaymentRequest) GetPaymentRequest() *routerrpc.SendPaymentRequest {
	if x != nil {
		return x.PaymentRequest
	}
	return nil
}

func (x *SendPaymentRequest) GetRfqId() []byte {
	if x != nil {
		return x.RfqId
	}
	return nil
}

func (x *SendPaymentRequest) GetAllowOverpay() bool {
	if x != nil {
		return x.AllowOverpay
	}
	return false
}

func (x *SendPaymentRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type SendPaymentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*SendPaymentResponse_AcceptedSellOrder
	//	*SendPaymentResponse_PaymentResult
	Result        isSendPaymentResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendPaymentResponse) Reset() {
	*x = SendPaymentResponse{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentResponse) ProtoMessage() {}

func (x *SendPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentResponse.ProtoReflect.Descriptor instead.
func (*SendPaymentResponse) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{6}
}

func (x *SendPaymentResponse) GetResult() isSendPaymentResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SendPaymentResponse) GetAcceptedSellOrder() *rfqrpc.PeerAcceptedSellQuote {
	if x != nil {
		if x, ok := x.Result.(*SendPaymentResponse_AcceptedSellOrder); ok {
			return x.AcceptedSellOrder
		}
	}
	return nil
}

func (x *SendPaymentResponse) GetPaymentResult() *lnrpc.Payment {
	if x != nil {
		if x, ok := x.Result.(*SendPaymentResponse_PaymentResult); ok {
			return x.PaymentResult
		}
	}
	return nil
}

type isSendPaymentResponse_Result interface {
	isSendPaymentResponse_Result()
}

type SendPaymentResponse_AcceptedSellOrder struct {
	// In case channel assets need to be swapped to another asset, an asset
	// sell order is negotiated with the channel peer. The result will be
	// the first message in the response stream. If no swap is needed, the
	// payment results will be streamed directly.
	AcceptedSellOrder *rfqrpc.PeerAcceptedSellQuote `protobuf:"bytes,1,opt,name=accepted_sell_order,json=acceptedSellOrder,proto3,oneof"`
}

type SendPaymentResponse_PaymentResult struct {
	// The payment result of a single payment attempt. Multiple attempts may
	// be returned per payment request until either the payment succeeds or
	// the payment times out.
	PaymentResult *lnrpc.Payment `protobuf:"bytes,2,opt,name=payment_result,json=paymentResult,proto3,oneof"`
}

func (*SendPaymentResponse_AcceptedSellOrder) isSendPaymentResponse_Result() {}

func (*SendPaymentResponse_PaymentResult) isSendPaymentResponse_Result() {}

type HodlInvoice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PaymentHash   []byte                 `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HodlInvoice) Reset() {
	*x = HodlInvoice{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HodlInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HodlInvoice) ProtoMessage() {}

func (x *HodlInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HodlInvoice.ProtoReflect.Descriptor instead.
func (*HodlInvoice) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{7}
}

func (x *HodlInvoice) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

type AddInvoiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset ID to use for the invoice. Mutually exclusive to group_key.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The asset amount to receive.
	AssetAmount uint64 `protobuf:"varint,2,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// The node identity public key of the peer to ask for a quote for receiving
	// assets and converting them from satoshis. When specified only quotes with
	// this peer will be negotiated.
	PeerPubkey []byte `protobuf:"bytes,3,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	// The full lnd invoice request to send. All fields behave the same way as
	// they do for lnd's lnrpc.AddInvoice RPC method (see the API docs at
	// https://lightning.engineering/api-docs/api/lnd/lightning/add-invoice
	// for more details).
	//
	// Only one of the asset_amount/value/value_msat may be set to dictate the
	// value of the invoice. When using asset_amount, the value/value_msat
	// fields will be overwritten by the satoshi (or milli-satoshi) equivalent
	// of the asset amount, after negotiating a quote with a peer that supports
	// the given asset ID.
	//
	// If the value/value_msat are used, we still receive assets, but they will
	// exactly evaluate to the defined amount in sats/msats.
	InvoiceRequest *lnrpc.Invoice `protobuf:"bytes,4,opt,name=invoice_request,json=invoiceRequest,proto3" json:"invoice_request,omitempty"`
	// If set, then this will make the invoice created a hodl invoice, which
	// won't be settled automatically. Instead, users will need to use the
	// invoicesrpc.SettleInvoice call to manually settle the invoice.
	HodlInvoice *HodlInvoice `protobuf:"bytes,5,opt,name=hodl_invoice,json=hodlInvoice,proto3" json:"hodl_invoice,omitempty"`
	// The group key which dictates which assets may be accepted for this
	// invoice. If set, any asset that belongs to this group may be accepted to
	// settle this invoice. Mutually exclusive to asset_id.
	GroupKey      []byte `protobuf:"bytes,6,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInvoiceRequest) Reset() {
	*x = AddInvoiceRequest{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvoiceRequest) ProtoMessage() {}

func (x *AddInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvoiceRequest.ProtoReflect.Descriptor instead.
func (*AddInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{8}
}

func (x *AddInvoiceRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AddInvoiceRequest) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *AddInvoiceRequest) GetPeerPubkey() []byte {
	if x != nil {
		return x.PeerPubkey
	}
	return nil
}

func (x *AddInvoiceRequest) GetInvoiceRequest() *lnrpc.Invoice {
	if x != nil {
		return x.InvoiceRequest
	}
	return nil
}

func (x *AddInvoiceRequest) GetHodlInvoice() *HodlInvoice {
	if x != nil {
		return x.HodlInvoice
	}
	return nil
}

func (x *AddInvoiceRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type AddInvoiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The quote for the purchase of assets that was accepted by the peer.
	AcceptedBuyQuote *rfqrpc.PeerAcceptedBuyQuote `protobuf:"bytes,1,opt,name=accepted_buy_quote,json=acceptedBuyQuote,proto3" json:"accepted_buy_quote,omitempty"`
	// The result of the invoice creation.
	InvoiceResult *lnrpc.AddInvoiceResponse `protobuf:"bytes,2,opt,name=invoice_result,json=invoiceResult,proto3" json:"invoice_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInvoiceResponse) Reset() {
	*x = AddInvoiceResponse{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvoiceResponse) ProtoMessage() {}

func (x *AddInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvoiceResponse.ProtoReflect.Descriptor instead.
func (*AddInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{9}
}

func (x *AddInvoiceResponse) GetAcceptedBuyQuote() *rfqrpc.PeerAcceptedBuyQuote {
	if x != nil {
		return x.AcceptedBuyQuote
	}
	return nil
}

func (x *AddInvoiceResponse) GetInvoiceResult() *lnrpc.AddInvoiceResponse {
	if x != nil {
		return x.InvoiceResult
	}
	return nil
}

type AssetPayReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The asset ID that will be used to resolve the invoice's satoshi amount.
	// Mutually exclusive to group_key.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The normal LN invoice that whose amount will be mapped to units of the
	// asset ID.
	PayReqString string `protobuf:"bytes,2,opt,name=pay_req_string,json=payReqString,proto3" json:"pay_req_string,omitempty"`
	// The group key that will be used to resolve the invoice's satoshi amount.
	// Mutually exclusive to asset_id.
	GroupKey      []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetPayReq) Reset() {
	*x = AssetPayReq{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPayReq) ProtoMessage() {}

func (x *AssetPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPayReq.ProtoReflect.Descriptor instead.
func (*AssetPayReq) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{10}
}

func (x *AssetPayReq) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetPayReq) GetPayReqString() string {
	if x != nil {
		return x.PayReqString
	}
	return ""
}

func (x *AssetPayReq) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type AssetPayReqResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The invoice amount, expressed in asset units.
	AssetAmount uint64 `protobuf:"varint,1,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// The decimal display corresponding to the asset_id.
	DecimalDisplay *taprpc.DecimalDisplay `protobuf:"bytes,2,opt,name=decimal_display,json=decimalDisplay,proto3" json:"decimal_display,omitempty"`
	// The group the asset ID belong to, if applicable.
	AssetGroup *taprpc.AssetGroup `protobuf:"bytes,3,opt,name=asset_group,json=assetGroup,proto3" json:"asset_group,omitempty"`
	// Genesis information for the asset ID which includes the meta hash, and
	// asset ID. This is only set if the payment request was decoded with an
	// asset ID and not with a group key (since a group can contain assets from
	// different minting events or genesis infos).
	GenesisInfo *taprpc.GenesisInfo `protobuf:"bytes,4,opt,name=genesis_info,json=genesisInfo,proto3" json:"genesis_info,omitempty"`
	// The normal decoded payment request.
	PayReq        *lnrpc.PayReq `protobuf:"bytes,5,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetPayReqResponse) Reset() {
	*x = AssetPayReqResponse{}
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetPayReqResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPayReqResponse) ProtoMessage() {}

func (x *AssetPayReqResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tapchannelrpc_tapchannel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPayReqResponse.ProtoReflect.Descriptor instead.
func (*AssetPayReqResponse) Descriptor() ([]byte, []int) {
	return file_tapchannelrpc_tapchannel_proto_rawDescGZIP(), []int{11}
}

func (x *AssetPayReqResponse) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *AssetPayReqResponse) GetDecimalDisplay() *taprpc.DecimalDisplay {
	if x != nil {
		return x.DecimalDisplay
	}
	return nil
}

func (x *AssetPayReqResponse) GetAssetGroup() *taprpc.AssetGroup {
	if x != nil {
		return x.AssetGroup
	}
	return nil
}

func (x *AssetPayReqResponse) GetGenesisInfo() *taprpc.GenesisInfo {
	if x != nil {
		return x.GenesisInfo
	}
	return nil
}

func (x *AssetPayReqResponse) GetPayReq() *lnrpc.PayReq {
	if x != nil {
		return x.PayReq
	}
	return nil
}

var File_tapchannelrpc_tapchannel_proto protoreflect.FileDescriptor

const file_tapchannelrpc_tapchannel_proto_rawDesc = "" +
	"\n" +
	"\x1etapchannelrpc/tapchannel.proto\x12\rtapchannelrpc\x1a\x10rfqrpc/rfq.proto\x1a\x0flightning.proto\x1a\x16routerrpc/router.proto\x1a\x13taprootassets.proto\"\xdf\x01\n" +
	"\x12FundChannelRequest\x12!\n" +
	"\fasset_amount\x18\x01 \x01(\x04R\vassetAmount\x12\x19\n" +
	"\basset_id\x18\x02 \x01(\fR\aassetId\x12\x1f\n" +
	"\vpeer_pubkey\x18\x03 \x01(\fR\n" +
	"peerPubkey\x122\n" +
	"\x16fee_rate_sat_per_vbyte\x18\x04 \x01(\rR\x12feeRateSatPerVbyte\x12\x19\n" +
	"\bpush_sat\x18\x05 \x01(\x03R\apushSat\x12\x1b\n" +
	"\tgroup_key\x18\x06 \x01(\fR\bgroupKey\"L\n" +
	"\x13FundChannelResponse\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12!\n" +
	"\foutput_index\x18\x02 \x01(\x05R\voutputIndex\"\xcc\x01\n" +
	"\x15RouterSendPaymentData\x12[\n" +
	"\rasset_amounts\x18\x01 \x03(\v26.tapchannelrpc.RouterSendPaymentData.AssetAmountsEntryR\fassetAmounts\x12\x15\n" +
	"\x06rfq_id\x18\x02 \x01(\fR\x05rfqId\x1a?\n" +
	"\x11AssetAmountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"}\n" +
	"\x1aEncodeCustomRecordsRequest\x12V\n" +
	"\x13router_send_payment\x18\x01 \x01(\v2$.tapchannelrpc.RouterSendPaymentDataH\x00R\x11routerSendPaymentB\a\n" +
	"\x05input\"\xc5\x01\n" +
	"\x1bEncodeCustomRecordsResponse\x12d\n" +
	"\x0ecustom_records\x18\x01 \x03(\v2=.tapchannelrpc.EncodeCustomRecordsResponse.CustomRecordsEntryR\rcustomRecords\x1a@\n" +
	"\x12CustomRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\x94\x02\n" +
	"\x12SendPaymentRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12!\n" +
	"\fasset_amount\x18\x02 \x01(\x04R\vassetAmount\x12\x1f\n" +
	"\vpeer_pubkey\x18\x03 \x01(\fR\n" +
	"peerPubkey\x12F\n" +
	"\x0fpayment_request\x18\x04 \x01(\v2\x1d.routerrpc.SendPaymentRequestR\x0epaymentRequest\x12\x15\n" +
	"\x06rfq_id\x18\x05 \x01(\fR\x05rfqId\x12#\n" +
	"\rallow_overpay\x18\x06 \x01(\bR\fallowOverpay\x12\x1b\n" +
	"\tgroup_key\x18\a \x01(\fR\bgroupKey\"\xa9\x01\n" +
	"\x13SendPaymentResponse\x12O\n" +
	"\x13accepted_sell_order\x18\x01 \x01(\v2\x1d.rfqrpc.PeerAcceptedSellQuoteH\x00R\x11acceptedSellOrder\x127\n" +
	"\x0epayment_result\x18\x02 \x01(\v2\x0e.lnrpc.PaymentH\x00R\rpaymentResultB\b\n" +
	"\x06result\"0\n" +
	"\vHodlInvoice\x12!\n" +
	"\fpayment_hash\x18\x01 \x01(\fR\vpaymentHash\"\x87\x02\n" +
	"\x11AddInvoiceRequest\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12!\n" +
	"\fasset_amount\x18\x02 \x01(\x04R\vassetAmount\x12\x1f\n" +
	"\vpeer_pubkey\x18\x03 \x01(\fR\n" +
	"peerPubkey\x127\n" +
	"\x0finvoice_request\x18\x04 \x01(\v2\x0e.lnrpc.InvoiceR\x0einvoiceRequest\x12=\n" +
	"\fhodl_invoice\x18\x05 \x01(\v2\x1a.tapchannelrpc.HodlInvoiceR\vhodlInvoice\x12\x1b\n" +
	"\tgroup_key\x18\x06 \x01(\fR\bgroupKey\"\xa2\x01\n" +
	"\x12AddInvoiceResponse\x12J\n" +
	"\x12accepted_buy_quote\x18\x01 \x01(\v2\x1c.rfqrpc.PeerAcceptedBuyQuoteR\x10acceptedBuyQuote\x12@\n" +
	"\x0einvoice_result\x18\x02 \x01(\v2\x19.lnrpc.AddInvoiceResponseR\rinvoiceResult\"k\n" +
	"\vAssetPayReq\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\fR\aassetId\x12$\n" +
	"\x0epay_req_string\x18\x02 \x01(\tR\fpayReqString\x12\x1b\n" +
	"\tgroup_key\x18\x03 \x01(\fR\bgroupKey\"\x8e\x02\n" +
	"\x13AssetPayReqResponse\x12!\n" +
	"\fasset_amount\x18\x01 \x01(\x04R\vassetAmount\x12?\n" +
	"\x0fdecimal_display\x18\x02 \x01(\v2\x16.taprpc.DecimalDisplayR\x0edecimalDisplay\x123\n" +
	"\vasset_group\x18\x03 \x01(\v2\x12.taprpc.AssetGroupR\n" +
	"assetGroup\x126\n" +
	"\fgenesis_info\x18\x04 \x01(\v2\x13.taprpc.GenesisInfoR\vgenesisInfo\x12&\n" +
	"\apay_req\x18\x05 \x01(\v2\r.lnrpc.PayReqR\x06payReq2\xda\x03\n" +
	"\x14TaprootAssetChannels\x12T\n" +
	"\vFundChannel\x12!.tapchannelrpc.FundChannelRequest\x1a\".tapchannelrpc.FundChannelResponse\x12l\n" +
	"\x13EncodeCustomRecords\x12).tapchannelrpc.EncodeCustomRecordsRequest\x1a*.tapchannelrpc.EncodeCustomRecordsResponse\x12V\n" +
	"\vSendPayment\x12!.tapchannelrpc.SendPaymentRequest\x1a\".tapchannelrpc.SendPaymentResponse0\x01\x12Q\n" +
	"\n" +
	"AddInvoice\x12 .tapchannelrpc.AddInvoiceRequest\x1a!.tapchannelrpc.AddInvoiceResponse\x12S\n" +
	"\x11DecodeAssetPayReq\x12\x1a.tapchannelrpc.AssetPayReq\x1a\".tapchannelrpc.AssetPayReqResponseB>Z<github.com/lightninglabs/taproot-assets/taprpc/tapchannelrpcb\x06proto3"

var (
	file_tapchannelrpc_tapchannel_proto_rawDescOnce sync.Once
	file_tapchannelrpc_tapchannel_proto_rawDescData []byte
)

func file_tapchannelrpc_tapchannel_proto_rawDescGZIP() []byte {
	file_tapchannelrpc_tapchannel_proto_rawDescOnce.Do(func() {
		file_tapchannelrpc_tapchannel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tapchannelrpc_tapchannel_proto_rawDesc), len(file_tapchannelrpc_tapchannel_proto_rawDesc)))
	})
	return file_tapchannelrpc_tapchannel_proto_rawDescData
}

var file_tapchannelrpc_tapchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tapchannelrpc_tapchannel_proto_goTypes = []any{
	(*FundChannelRequest)(nil),           // 0: tapchannelrpc.FundChannelRequest
	(*FundChannelResponse)(nil),          // 1: tapchannelrpc.FundChannelResponse
	(*RouterSendPaymentData)(nil),        // 2: tapchannelrpc.RouterSendPaymentData
	(*EncodeCustomRecordsRequest)(nil),   // 3: tapchannelrpc.EncodeCustomRecordsRequest
	(*EncodeCustomRecordsResponse)(nil),  // 4: tapchannelrpc.EncodeCustomRecordsResponse
	(*SendPaymentRequest)(nil),           // 5: tapchannelrpc.SendPaymentRequest
	(*SendPaymentResponse)(nil),          // 6: tapchannelrpc.SendPaymentResponse
	(*HodlInvoice)(nil),                  // 7: tapchannelrpc.HodlInvoice
	(*AddInvoiceRequest)(nil),            // 8: tapchannelrpc.AddInvoiceRequest
	(*AddInvoiceResponse)(nil),           // 9: tapchannelrpc.AddInvoiceResponse
	(*AssetPayReq)(nil),                  // 10: tapchannelrpc.AssetPayReq
	(*AssetPayReqResponse)(nil),          // 11: tapchannelrpc.AssetPayReqResponse
	nil,                                  // 12: tapchannelrpc.RouterSendPaymentData.AssetAmountsEntry
	nil,                                  // 13: tapchannelrpc.EncodeCustomRecordsResponse.CustomRecordsEntry
	(*routerrpc.SendPaymentRequest)(nil), // 14: routerrpc.SendPaymentRequest
	(*rfqrpc.PeerAcceptedSellQuote)(nil), // 15: rfqrpc.PeerAcceptedSellQuote
	(*lnrpc.Payment)(nil),                // 16: lnrpc.Payment
	(*lnrpc.Invoice)(nil),                // 17: lnrpc.Invoice
	(*rfqrpc.PeerAcceptedBuyQuote)(nil),  // 18: rfqrpc.PeerAcceptedBuyQuote
	(*lnrpc.AddInvoiceResponse)(nil),     // 19: lnrpc.AddInvoiceResponse
	(*taprpc.DecimalDisplay)(nil),        // 20: taprpc.DecimalDisplay
	(*taprpc.AssetGroup)(nil),            // 21: taprpc.AssetGroup
	(*taprpc.GenesisInfo)(nil),           // 22: taprpc.GenesisInfo
	(*lnrpc.PayReq)(nil),                 // 23: lnrpc.PayReq
}
var file_tapchannelrpc_tapchannel_proto_depIdxs = []int32{
	12, // 0: tapchannelrpc.RouterSendPaymentData.asset_amounts:type_name -> tapchannelrpc.RouterSendPaymentData.AssetAmountsEntry
	2,  // 1: tapchannelrpc.EncodeCustomRecordsRequest.router_send_payment:type_name -> tapchannelrpc.RouterSendPaymentData
	13, // 2: tapchannelrpc.EncodeCustomRecordsResponse.custom_records:type_name -> tapchannelrpc.EncodeCustomRecordsResponse.CustomRecordsEntry
	14, // 3: tapchannelrpc.SendPaymentRequest.payment_request:type_name -> routerrpc.SendPaymentRequest
	15, // 4: tapchannelrpc.SendPaymentResponse.accepted_sell_order:type_name -> rfqrpc.PeerAcceptedSellQuote
	16, // 5: tapchannelrpc.SendPaymentResponse.payment_result:type_name -> lnrpc.Payment
	17, // 6: tapchannelrpc.AddInvoiceRequest.invoice_request:type_name -> lnrpc.Invoice
	7,  // 7: tapchannelrpc.AddInvoiceRequest.hodl_invoice:type_name -> tapchannelrpc.HodlInvoice
	18, // 8: tapchannelrpc.AddInvoiceResponse.accepted_buy_quote:type_name -> rfqrpc.PeerAcceptedBuyQuote
	19, // 9: tapchannelrpc.AddInvoiceResponse.invoice_result:type_name -> lnrpc.AddInvoiceResponse
	20, // 10: tapchannelrpc.AssetPayReqResponse.decimal_display:type_name -> taprpc.DecimalDisplay
	21, // 11: tapchannelrpc.AssetPayReqResponse.asset_group:type_name -> taprpc.AssetGroup
	22, // 12: tapchannelrpc.AssetPayReqResponse.genesis_info:type_name -> taprpc.GenesisInfo
	23, // 13: tapchannelrpc.AssetPayReqResponse.pay_req:type_name -> lnrpc.PayReq
	0,  // 14: tapchannelrpc.TaprootAssetChannels.FundChannel:input_type -> tapchannelrpc.FundChannelRequest
	3,  // 15: tapchannelrpc.TaprootAssetChannels.EncodeCustomRecords:input_type -> tapchannelrpc.EncodeCustomRecordsRequest
	5,  // 16: tapchannelrpc.TaprootAssetChannels.SendPayment:input_type -> tapchannelrpc.SendPaymentRequest
	8,  // 17: tapchannelrpc.TaprootAssetChannels.AddInvoice:input_type -> tapchannelrpc.AddInvoiceRequest
	10, // 18: tapchannelrpc.TaprootAssetChannels.DecodeAssetPayReq:input_type -> tapchannelrpc.AssetPayReq
	1,  // 19: tapchannelrpc.TaprootAssetChannels.FundChannel:output_type -> tapchannelrpc.FundChannelResponse
	4,  // 20: tapchannelrpc.TaprootAssetChannels.EncodeCustomRecords:output_type -> tapchannelrpc.EncodeCustomRecordsResponse
	6,  // 21: tapchannelrpc.TaprootAssetChannels.SendPayment:output_type -> tapchannelrpc.SendPaymentResponse
	9,  // 22: tapchannelrpc.TaprootAssetChannels.AddInvoice:output_type -> tapchannelrpc.AddInvoiceResponse
	11, // 23: tapchannelrpc.TaprootAssetChannels.DecodeAssetPayReq:output_type -> tapchannelrpc.AssetPayReqResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tapchannelrpc_tapchannel_proto_init() }
func file_tapchannelrpc_tapchannel_proto_init() {
	if File_tapchannelrpc_tapchannel_proto != nil {
		return
	}
	file_tapchannelrpc_tapchannel_proto_msgTypes[3].OneofWrappers = []any{
		(*EncodeCustomRecordsRequest_RouterSendPayment)(nil),
	}
	file_tapchannelrpc_tapchannel_proto_msgTypes[6].OneofWrappers = []any{
		(*SendPaymentResponse_AcceptedSellOrder)(nil),
		(*SendPaymentResponse_PaymentResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tapchannelrpc_tapchannel_proto_rawDesc), len(file_tapchannelrpc_tapchannel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tapchannelrpc_tapchannel_proto_goTypes,
		DependencyIndexes: file_tapchannelrpc_tapchannel_proto_depIdxs,
		MessageInfos:      file_tapchannelrpc_tapchannel_proto_msgTypes,
	}.Build()
	File_tapchannelrpc_tapchannel_proto = out.File
	file_tapchannelrpc_tapchannel_proto_goTypes = nil
	file_tapchannelrpc_tapchannel_proto_depIdxs = nil
}
