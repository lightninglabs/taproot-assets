package itest

import (
	"fmt"
	"io/ioutil"
	"net"
	"path"
	"sync"
	"time"

	"github.com/lightningnetwork/lnd/cert"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

const (
	// DefaultAutogenValidity is the default validity of a self-signed
	// certificate. The value corresponds to 14 months
	// (14 months * 30 days * 24 hours).
	DefaultAutogenValidity = 14 * 30 * 24 * time.Hour
)

type universeServerMock struct {
	// TODO: Embed Unimplemented*Server of universe RPCs here to mock them.
}

type serverHarness struct {
	serverHost string
	mockServer *grpc.Server

	certFile string
	server   *universeServerMock

	errChan chan error

	wg sync.WaitGroup
}

func newServerHarness(serverHost string) *serverHarness {
	return &serverHarness{
		serverHost: serverHost,
		errChan:    make(chan error, 1),
	}
}

func (s *serverHarness) stop() {
	s.mockServer.Stop()
	s.wg.Wait()
}

func (s *serverHarness) start() error {
	tempDirName, err := ioutil.TempDir("", "taroitest")
	if err != nil {
		return err
	}

	s.certFile = path.Join(tempDirName, "proxy.cert")
	keyFile := path.Join(tempDirName, "proxy.key")
	creds, err := genCertPair(s.certFile, keyFile)
	if err != nil {
		return err
	}

	httpListener, err := net.Listen("tcp", s.serverHost)
	if err != nil {
		return err
	}

	s.mockServer = grpc.NewServer(grpc.Creds(creds))
	s.server = &universeServerMock{}

	// TODO(guggero): Register universe RPC servers here.

	s.wg.Add(1)
	go func() {
		defer s.wg.Done()
		s.errChan <- s.mockServer.Serve(httpListener)
	}()

	return nil
}

// genCertPair generates a pair of private key and certificate and returns them
// in different formats needed to spin up test servers and clients.
func genCertPair(certFile, keyFile string) (credentials.TransportCredentials,
	error) {

	err := cert.GenCertPair(
		"itest autogenerated cert", certFile, keyFile, nil, nil,
		false, DefaultAutogenValidity,
	)
	if err != nil {
		return nil, fmt.Errorf("unable to generate cert pair: %v", err)
	}

	creds, err := credentials.NewServerTLSFromFile(certFile, keyFile)
	if err != nil {
		return nil, fmt.Errorf("unable to load cert file: %v", err)
	}
	return creds, nil
}
